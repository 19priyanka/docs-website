{
  "/docs/agents/go-agent/instrumentation/instrument-go-transactions": [
    {
      "sections": [
        "Create custom events (Go)",
        "RecordCustomEvent parameters",
        "Example"
      ],
      "title": "Create custom events (Go)",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "51ae4a409139b08f5a2df59d9c379d425d21d97a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/create-custom-events-go/",
      "published_at": "2021-10-01T13:24:52Z",
      "updated_at": "2021-06-02T15:17:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic Go agent, add RecordCustomEvent to the apps. You can then query and visualize the event data. RecordCustomEvent parameters To add RecordCustomEvent to your Go app, use this format: RecordCustomEvent(eventType string, params map[string]interface{}) Copy Parameter Description eventType string Required. The name of the event type to record. Must consist of alphanumeric characters, underscores _, or colons :. Must contain no more than 255 bytes. Must follow New Relic data equirements for names, limits, and restricted characters. params map number, string, or boolean Required. Specify key/value pairs of attributes to annotate the event. Each value in the params map must be a number, string, or boolean. Keys must be less than 255 bytes. The params map must not contain more than 64 attributes. Example Here is an example of a custom event for a Go app: func customEvent(w http.ResponseWriter, r *http.Request) { io.WriteString(w, \"recording a custom event\") app.RecordCustomEvent(\"my_event_type\", map[string]interface{}{ \"myString\": \"hello\", \"myFloat\": 0.603, \"myInt\": 123, \"myBool\": true, }) } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.86965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create custom events (<em>Go</em>)",
        "sections": "Create custom events (<em>Go</em>)",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Custom events are useful to explore data for a single event you are interested in, including data from external sources, at a particular moment in time. To track arbitrary event data for apps monitored by your New Relic <em>Go</em> <em>agent</em>, add RecordCustomEvent to the apps. You can then query and visualize"
      },
      "id": "6043d7e028ccbcd7dc2c60d3"
    },
    {
      "sections": [
        "Go agent attributes",
        "host.displayName",
        "httpResponseCode",
        "Important",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.User-Agent",
        "request.headers.userAgent",
        "request.method",
        "response.headers.contentLength",
        "response.headers.contentType",
        "http.statusCode",
        "Span and segment attributes",
        "db.collection",
        "db.instance",
        "db.statement",
        "http.method",
        "http.url",
        "peer.address",
        "peer.hostname",
        "Change attribute destination",
        "Turn destinations on or off",
        "Turn attributes on or off",
        "Create custom attributes",
        "For more help"
      ],
      "title": "Go agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "f6e6d25a949481b15a5beb78c962303857d713a4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/go-agent-attributes/",
      "published_at": "2021-10-01T13:31:20Z",
      "updated_at": "2021-03-16T13:46:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic's Go language agent, including: Error traces Transaction events Page views For an extra level of monitoring detail, create custom attributes. Go agent attributes The Go agent receives the following default attributes from your app. You can adjust these default settings and turn attributes on or off for certain destinations. host.displayName The name of the server host under which the current script is executing, called with newrelic.AttributeHostDisplayName. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeHostDisplayName) Copy httpResponseCode The response status code for a web request, called with newrelic.AttributeResponseCodeDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCodeDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to http.statusCode. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.accept The type as read from the HTTP request's Accept header, called with newrelic.AttributeRequestAccept Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestAccept) Copy request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header, called with newrelic.AttributeRequestContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentLength) Copy request.headers.contentType The incoming request content type as read from the Content-Type request header, called with newrelic.AttributeRequestContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestContentType) Copy request.headers.host The name from the HTTP host request header, called with newrelic.AttributeRequestHost. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestHost) Copy request.headers.referer The incoming request referer as read from the Referer request header, called with newrelic.AttributeRequestReferer. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestReferer) Copy request.headers.User-Agent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgentDeprecated Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgentDeprecated) Copy Important As of Go agent v3.0.0, this attribute has been marked deprecated and been renamed to request.headers.userAgent. The v3.x agent will continue to produce this attribute, but it will be removed in v4.0.0. request.headers.userAgent The contents of the User-Agent HTTP header, called with newrelic.AttributeRequestUserAgent Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent) Copy Important This attribute was added in v3.0.0 of the agent and the original request.headers.User-Agent will eventually be removed. Therefore the v3.x agents will produce two attributes representing the the contents of the User-Agent HTTP header. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestUserAgent, newrelic.AttributeRequestUserAgentDeprecated, ) Copy request.method The HTTP method of the incoming request, called with newrelic.AttributeRequestMethod Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeRequestMethod) Copy response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header, called with newrelic.AttributeResponseContentLength. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentLength) Copy response.headers.contentType The outgoing response content-type as read from the Content-Type response header, called with newrelic.AttributeResponseContentType. Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseContentType) Copy http.statusCode The response status code for a web request, called with newrelic.AttributeResponseCode Default settings: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Important This attribute was added in v3.0.0 of the agent and the original httpResponseCode will eventually be removed. Therefore the v3.x agents will produce two attributes representing the response status code for a web request. To completely exclude the attribute when using the v3.x agent, you must include both the old and new attributes. For example: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode, newrelic.AttributeResponseCodeDeprecated, ) Copy Span and segment attributes If you have Go agent v2.6.0 or higher, you can configure attributes on spans and segments. The Go agent receives the following default attributes from your app. These attributes are only found on span events and transaction trace segments. You can adjust these default settings and turn attributes on or off for certain destinations. db.collection For datastore segments, this is the collection used and represents the table or group, called with newrelic.SpanAttributeDBCollection. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBCollection) Copy db.instance For datastore segments this is the database name and represents the name of the database where the query is being executed, called with newrelic.SpanAttributeDBInstance. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBInstance) Copy db.statement For datastore segments this is the parameterized query being executed and represents the query being performed, called with newrelic.SpanAttributeDBStatement. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeDBStatement) Copy http.method For external segments this is the http method of the outgoing request, called with newrelic.SpanAttributeHTTPMethod. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPMethod) Copy http.url For external segments this is the url of the outgoing request, called with newrelic.SpanAttributeHTTPURL. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributeHTTPURL) Copy peer.address For datastore segments this is the hostname plus port of the database being queried, called with newrelic.SpanAttributePeerAddress. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerAddress) Copy peer.hostname For datastore segments this is the hostname of the database being queried, called with newrelic.SpanAttributePeerHostname. Default settings: Transaction trace segments: Enabled Span events: Enabled Example of excluding this attribute: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.SpanAttributePeerHostname) Copy Change attribute destination Use these options to change attribute destinations: Turn destinations on or off To open or close an entire destination to attributes, set the .Enabled flag to true or false. For example, to turn off APM error collection: After the config, add: config.ErrorCollector.Attributes.Enabled = false Copy Turn attributes on or off To turn specific attributes on or off, use the .Include or .Exclude methods. For example, to disable AttributeResponseCode: After the config, add: config.Attributes.Exclude = append(config.Attributes.Exclude, newrelic.AttributeResponseCode) Copy Create custom attributes Add custom attributes by using this method in a transaction: txn.AddAttribute(\"key\", \"value\") Copy The txn variable is the one instrumented for the Go transaction. For example: txn.AddAttribute(\"product\", \"widget\") txn.AddAttribute(\"price\", 19.99) txn.AddAttribute(\"importantCustomer\", true) Copy Default settings for custom attribute destinations: Error collector (traced errors): Enabled Transaction events: Enabled For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.82821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> attributes",
        "sections": "<em>Go</em> <em>agent</em> attributes",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "Attributes are key-value pairs containing information for transaction events, error events, and traced errors. You can adjust the destinations of default attributes and create custom attributes for the attributes collected by New Relic&#x27;s <em>Go</em> language <em>agent</em>, including: Error traces Transaction events"
      },
      "id": "603e9f8028ccbcaa6ceba76d"
    },
    {
      "sections": [
        "Instrument Go segments",
        "Measure time for functions and code blocks",
        "Block-of-code segments",
        "Function segments",
        "Nest segments",
        "Datastore segments",
        "Use instrumentation package",
        "Important",
        "Use DatastoreSegment",
        "External segments",
        "Use StartExternalSegment()",
        "Use NewRoundTripper()",
        "Message producer segments",
        "Use MessageProducerSegment"
      ],
      "title": "Instrument Go segments",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Instrumentation"
      ],
      "external_id": "4ca52352a98087598f1a5ace76a9d80bf8d20cf8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/instrumentation/instrument-go-segments/",
      "published_at": "2021-10-01T13:31:23Z",
      "updated_at": "2021-03-11T08:14:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic for Go, you can monitor the specific segments of a transaction in a Go application to get more detail about specific functions or code blocks. Measure time for functions and code blocks Segments are the specific parts of a transaction in an application. By instrumenting segments, you can measure the time taken by functions and code blocks, such as external calls, datastore calls, adding messages to queues, and background tasks. Example: You have a transaction associated with a checkout process, which processes both shipping information and credit card information. You could instrument your application to break that transaction up into two pieces: one segment for shipping and one segment for payment. Block-of-code segments Once you instrument a transaction, you are ready to instrument one or more segments in that transaction. To instrument an arbitrary block of code as a segment, use the following pattern, and include txn as the variable name set for the transaction: segment := newrelic.Segment{} segment.Name = \"mySegmentName\" segment.StartTime = txn.StartSegmentNow() // ... code you want to time here ... segment.End() Copy StartSegment is a convenient helper. It creates a segment and starts it: segment := txn.StartSegment(\"mySegmentName\") // ... code you want to time here ... segment.End() Copy Function segments Instrumenting a function as a segment is essentially the same as instrumenting an arbitrary block of code as a segment. The main difference is that, because a function has a discrete ending, you can use Go's defer statement. To instrument a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(\"mySegmentName\").End() Copy Nest segments Segments can be nested. The segment being ended must be the most recently started segment. Here's an example of a segment starting and ending inside another segment: s1 := txn.StartSegment(\"outerSegment\") s2 := txn.StartSegment(\"innerSegment\") // s2 must end before s1 s2.End() s1.End() Copy A zero value segment may safely be ended. Therefore, the following code is safe even if the conditional fails: var s newrelic.Segment if recordSegment { s.StartTime = txn.StartSegmentNow(), } // ... code you wish to time here ... s.End() Copy Datastore segments You can instrument Go application datastore calls. Datastore segments appear in the APM Transactions breakdown table and Databases tab of the Transactions page in New Relic. If you are using a MySQL, PostgreSQL, or SQLite database driver, the easiest way to add Datastore segments is to use our pre-built integration packages. Otherwise, you can manually create Datastore segments for each database call. Use instrumentation package There is an integration package for each database driver that we support: Database library supported Integration package go-sql-driver/mysql v3/integrations/nrmysql lib/pq v3/integrations/nrpq mattn/go-sqlite3 v3/integrations/nrsqlite3 To use one of these integrations, first replace the driver with our integration version: import ( // import our integration package in place of \"github.com/go-sql-driver/mysql\" _ \"github.com/newrelic/go-agent/v3/integrations/nrmysql\" ) func main() { // open \"nrmysql\" in place of \"mysql\" db, err := sql.Open(\"nrmysql\", \"user@unix(/path/to/socket)/dbname\") } Copy Second, use the ExecContext, QueryContext, and QueryRowContext methods of sql.DB, sql.Conn, sql.Tx, and sql.Stmt and provide a transaction-containing context. Calls to Exec, Query, and QueryRow do not get instrumented. ctx := newrelic.NewContext(context.Background(), txn) row := db.QueryRowContext(ctx, \"SELECT count(*) from tables\") Copy If you are using a database/sql database not listed above, you can write your own instrumentation for it using InstrumentConnector, InstrumentDriver, and DriverSegmentBuilder. The integration packages act as examples of how to do this. Important Datastore integration packages for MySQL, PostgreSQL, and SQLite were added in Go Agent v2.8.0 and require Go v1.10 or above. Use DatastoreSegment Just like basic segments, datastore segments begin when the StartTime field is populated and finish when the End method is called. To instrument a datastore segment, place the following at the beginning of the function you want to monitor: s := newrelic.DatastoreSegment{ Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } s.StartTime = txn.StartSegmentNow() // ... make the datastore call s.End() Copy For more information about: Assigning the Collection, Operation, DatabaseName, and other parameter values: See the New Relic datastore segment documentation on GoDoc. Available values for Product: See the New Relic documentation on GitHub. When instrumenting a datastore call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.DatastoreSegment{ StartTime: txn.StartSegmentNow(), Product: newrelic.DatastoreMySQL, Collection: \"users\", Operation: \"INSERT\", ParameterizedQuery: \"INSERT INTO users (name, age) VALUES ($1, $2)\", QueryParameters: map[string]interface{}{ \"name\": \"Dracula\", \"age\": 439, }, Host: \"mysql-server-1\", PortPathOrID: \"3306\", DatabaseName: \"my_database\", } defer s.End() Copy External segments You can instrument Go application calls to external services, such as web services, resources in the cloud, and any other network calls. External segments appear in the APM Transactions breakdown table and the External services page in New Relic. There are two ways to instrument external segments: Use StartExternalSegment() Recommendation: Use the StartExternalSegment helper, since New Relic uses it to trace activity between your applications using cross application tracing. func external(txn *newrelic.Transaction, req *http.Request) (*http.Response, error) { s := newrelic.StartExternalSegment(txn, req) response, err := http.DefaultClient.Do(req) s.Response = response s.End() return response, err } Copy Use NewRoundTripper() NewRoundTripper returns an http.RoundTripper, which allows you to instrument external calls without calling StartExternalSegment by modifying your http.Client's Transport field. The RoundTripper returned will look for a Transaction in the request's context using FromContext. Here is an example of NewRoundTripper instrumentation: client := &http.Client{} client.Transport = newrelic.NewRoundTripper(client.Transport) request, _ := http.NewRequest(\"GET\", \"http://example.com\", nil) request = newrelic.RequestWithTransactionContext(request, txn) response, err := client.Do(request) Copy Message producer segments You can instrument Go application calls that add messages to queuing systems like RabbitMQ and Kafka. Message producer segments appear in the APM Transactions breakdown in New Relic. There is only one way to instrument message producer segments: Use MessageProducerSegment Just like basic segments, message producer segments begin when the StartTime field is populated, and finish when the End method is called. To instrument a message producer segment, place the following at the beginning of the function you want to monitor: s := newrelic.MessageProducerSegment{ Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } s.StartTime = txn.StartSegmentNow() // ... add message to queue s.End() Copy For more information about assigning the Library, DestinationType, DestinationName, or DestinationTemporary fields, see the New Relic message producer segment documentation on GoDoc. When instrumenting a message producer call that spans an entire function call, you can use the defer statement to simplify instrumentation: s := newrelic.MessageProducerSegment{ StartTime: txn.StartSegmentNow(), Library: \"RabbitMQ\", DestinationType: newrelic.MessageExchange, DestinationName: \"myExchange\", DestinationTemporary: false, } defer s.End() // ... add message to queue Copy Important Message producer segments were added in Go Agent version 2.14.0.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.70374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Instrument</em> <em>Go</em> segments",
        "sections": "<em>Instrument</em> <em>Go</em> segments",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": " is that, because a function has a discrete ending, you can use <em>Go</em>&#x27;s defer statement. To <em>instrument</em> a function as a segment, add the following code at the start of the function, and include txn as the variable name set for the transaction: defer txn.StartSegment(&quot;mySegmentName&quot;).End() Copy Nest segments"
      },
      "id": "6043b78d64441f2285378f25"
    }
  ],
  "/docs/agents/go-agent/troubleshooting/no-data-appears-go": [
    {
      "sections": [
        "Install New Relic for Go",
        "Compatibility and requirements",
        "Install the Go agent",
        "View your app's data in New Relic",
        "Keep your agent up to date"
      ],
      "title": "Install New Relic for Go ",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "1fe1294fee3ba819e696f667f6a4eebaba8f9221",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-new-relic-go/",
      "published_at": "2021-10-01T13:29:09Z",
      "updated_at": "2021-08-02T04:17:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Go agent auto-instruments your code so you can start monitoring your Go language apps and microservices. You can use our launcher, or follow the instructions in this document to complete a basic Go agent installation. If you don't have one already, create a New Relic account. It's free, forever. Add Go data Compatibility and requirements The Go agent requires Golang 1.7 or higher on Linux, macOS, or Windows. For more information, see Go agent compatibility and requirements. Install the Go agent In order to install the Go agent, you need a New Relic license key. Then, to install the agent: From github.com/newrelic/go-agent, use your preferred process; for example: go get github.com/newrelic/go-agent/v3/newrelic Copy Import the github.com/newrelic/go-agent/v3/newrelic package in your application. Initialize the Go agent by adding the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Instrument web transactions by wrapping standard HTTP requests in your app code. For example: http.HandleFunc(newrelic.WrapHandleFunc(app, \"/users\", usersHandler)) Copy Instrument other transactions you want to monitor. Optional: Instrument segments for an extra level of timing detail. Compile and deploy your application. View your app's data in New Relic Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the APM UI. If no data appears within a few minutes, follow the troubleshooting tips. Keep your agent up to date To take full advantage of New Relic's latest features, enhancements, and important security patches, keep your app's Go agent up to date.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.54817,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic for <em>Go</em> ",
        "sections": "Install the <em>Go</em> <em>agent</em>",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "&#x27;s performance in the APM UI. If no data appears within a few minutes, follow the <em>troubleshooting</em> tips. Keep your <em>agent</em> up to date To take full advantage of New Relic&#x27;s latest features, enhancements, and important security patches, keep your app&#x27;s <em>Go</em> <em>agent</em> up to date."
      },
      "id": "6043cf6428ccbc98632c60c6"
    },
    {
      "sections": [
        "Go agent logging",
        "Write log files",
        "Logrus integration example",
        "For more help"
      ],
      "title": "Go agent logging",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "3eca4ea8f4b58b64841e4c465cbacde5c897de10",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/configuration/go-agent-logging/",
      "published_at": "2021-10-01T15:29:15Z",
      "updated_at": "2021-03-11T12:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Go logging uses the standard Go log package and a New Relic Logger package. Logging is useful for troubleshooting your New Relic integration; for example, with installation or configuration problems. Write log files To use the Go agent methods for writing log and audit files, see log.go on the agent GitHub repo. Logrus integration example New Relic offers an integration for the Logrus logging system. Here is an example of using the New Relic Logrus integration in an application: Import both github.com/sirupsen/logrus and github.com/newrelic/go-agent/v3/integrations/nrlogrus. Set the log level and assign the Logger output to Logrus. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { logrus.SetLevel(logrus.DebugLevel) config.Logger = nrlogrus.StandardLogger() }, ) Copy For more help For logging on all New Relic agents, see New Relic agent logs and troubleshooting.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.27101,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> <em>agent</em> logging",
        "sections": "<em>Go</em> <em>agent</em> logging",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "New Relic for <em>Go</em> logging uses the standard <em>Go</em> log package and a New Relic Logger package. Logging is useful for <em>troubleshooting</em> your New Relic integration; for example, with installation or configuration problems. Write log files To use the <em>Go</em> <em>agent</em> methods for writing log and audit files, see"
      },
      "id": "6043f284196a67c735960f7f"
    },
    {
      "sections": [
        "Go runtime page: Troubleshoot performance problems",
        "View and filter Go runtime data",
        "Go runtime charts"
      ],
      "title": "Go runtime page: Troubleshoot performance problems",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Features"
      ],
      "external_id": "de13cce9b7e936dd86b266c3bae1b031a2343aa2",
      "image": "https://docs.newrelic.com/static/1eae071363cd2ce3e57467c3d1cce83f/c1b63/go-runtime.png",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/features/go-runtime-page-troubleshoot-performance-problems/",
      "published_at": "2021-10-01T13:27:01Z",
      "updated_at": "2021-03-16T13:45:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM user interface provides a variety of data about your app, including special features for the Go agent for APM. In addition, the Go runtime page provides important runtime data useful for troubleshooting performance issues. View and filter Go runtime data To view the Go runtime page, go to one.newrelic.com > APM > (select an app) > Go runtime. Go runtime charts This table describes the Go runtime page chart data. Chart name Description Goroutines A count of the average number of goroutines running during a given time slice. GC pause time Milliseconds spent in stop-the-world garbage collection. GC pause frequency Calls per minute of stop-the-world garbage collection. GC pauses The percentage of wall-clock time spent in stop-the-world garbage collection. CPU utilization CPU utilization as a percentage of available CPU. Memory Average memory used, in mebibytes, during a given time slice.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.25536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Go</em> runtime page: <em>Troubleshoot</em> performance problems",
        "sections": "<em>Go</em> runtime page: <em>Troubleshoot</em> performance problems",
        "tags": "<em>Go</em> <em>agent</em>",
        "body": "The APM user interface provides a variety of data about your app, including special features for the <em>Go</em> <em>agent</em> for APM. In addition, the <em>Go</em> runtime page provides important runtime data useful for <em>troubleshooting</em> performance issues. View and filter <em>Go</em> runtime data To view the <em>Go</em> runtime page, <em>go</em>"
      },
      "id": "603ecf06e7b9d25d8a2a07c9"
    }
  ],
  "/docs/agents/index": [
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-10-01T15:41:37Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 373.51202,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Java <em>agent</em>: YAML example",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " security policies and the options available. For more information about New Relic&#x27;s security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements <em>APM</em> <em>agent</em> versions that support this feature include: C SDK: not available Go: 2.1"
      },
      "id": "6043d4a8196a6773a1960f68"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-01T15:42:26Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 372.79645,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> configuration",
        "sections": "Server-side <em>agent</em> configuration",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " change automatically applies to all <em>APM</em> <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "af78a44c170729aac326233d6468b0b61b6cdff2",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-10-01T15:41:35Z",
      "updated_at": "2021-09-14T10:33:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with labels and categories. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 365.48166,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name app instances via <em>agent</em> config file",
        "tags": "Manage <em>APM</em> <em>agents</em>",
        "body": " with the same app name, <em>agent</em> language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app&#x27;s New Relic <em>APM</em> Overview page. To segment your app in a different way, or to work with each"
      },
      "id": "603ebde1196a677dbaa83dec"
    }
  ],
  "/docs/agents/java-agent/additional-installation/aws-elastic-beanstalk-installation-java": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03625,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.35339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.304634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/additional-installation/ibm-websphere-application-server": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.35339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-java-agent-using-gradle": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.35339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-java-agent-using-maven": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-09T06:22:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, browser monitoring, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.38667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": ", do not use the GAE standard environment or Google App Engine&#x27;s &quot;native mode&quot; <em>installation</em>. Build a custom runtime using Docker See Google&#x27;s documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic <em>Java</em> <em>agent</em> (for example, using Tomcat"
      },
      "id": "6043b98628ccbcef312c60c5"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-ansible": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03624,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.35339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker": [
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.35339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-09T06:22:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, browser monitoring, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.386665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": ", do not use the GAE standard environment or Google App Engine&#x27;s &quot;native mode&quot; <em>installation</em>. Build a custom runtime using Docker See Google&#x27;s documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic <em>Java</em> <em>agent</em> (for example, using Tomcat"
      },
      "id": "6043b98628ccbcef312c60c5"
    }
  ],
  "/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.353386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.30463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/additional-installation/wildfly-installation-java": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.353386,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-09T06:22:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, browser monitoring, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.386665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> in GAE flexible environment",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": ", do not use the GAE standard environment or Google App Engine&#x27;s &quot;native mode&quot; <em>installation</em>. Build a custom runtime using Docker See Google&#x27;s documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic <em>Java</em> <em>agent</em> (for example, using Tomcat"
      },
      "id": "6043b98628ccbcef312c60c5"
    }
  ],
  "/docs/agents/java-agent/api-guides/guide-using-java-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.75412,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation <em>guides</em> for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> <em>API</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent API: Instrument using annotation",
        "Important",
        "Configure your agent for annotations",
        "@Trace",
        "Create a new transaction",
        "Add detail to your transactions",
        "Convert a transaction to a web request",
        "Define your own @Trace annotation class",
        "Properties for @Trace",
        "dispatcher",
        "async",
        "metricName",
        "excludeFromTransactionTrace",
        "leaf",
        "@TraceLambda",
        "Properties for @TraceLambda",
        "pattern",
        "includeNonstatic",
        "@TraceByReturnType",
        "Properties for @TraceByReturnType",
        "traceReturnTypes",
        "Performance considerations",
        "Caution",
        "More API functions"
      ],
      "title": "Java agent API: Instrument using annotation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "4a373504c0682b36745d2283fdd902ead43510ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/java-agent-api-instrument-using-annotation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-07-15T18:31:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent provides several options for custom instrumentation. One of those options is adding the Java agent API's @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must modify the source code. If you can't or don't want to modify your source code, see Custom instrumentation for other instrumentation options. Configure your agent for annotations By default, the configuration setting enable_custom_tracing is set to true in the Java agent, which is the setting required for @Trace annotations to function. This setting is not included in the newrelic.yml by default. The only time you need to incorporate this setting into your configuration file is if you want to disable @Trace annotations altogether. To do this, set enable_custom_tracing: false (prefaced with two spaces) in the common stanza of your newrelic.yml. Make sure that newrelic-api.jar appears in your classpath as it contains all these annotations. @Trace Annotating a method with @Trace tells the Java agent that measurements should be taken for that method. To add a method call as a custom trace add @Trace annotations to your method. import com.newrelic.api.agent.Trace; ... @Trace public void run() { // background task } Copy Create a new transaction If transactions do not appear and you want to start a new transaction, include dispatcher=true with the @Trace annotation: @Trace (dispatcher=true) public void run() { // background task } Copy Add detail to your transactions If your transaction traces show large blocks of uninstrumented time and you want to include some more methods within the trace, you can use the @Trace annotation without parameters: @Trace protected void methodWithinTransaction() { // work } Copy Convert a transaction to a web request To make a background task report as a web browser transaction with a Java agent API call: In the method annotated with @Trace(dispatcher=true), call: NewRelic.setRequestAndResponse(Request request, Response response) Copy The arguments are implementations of the Request and Response interfaces in newrelic-api.jar. Important Even if your Request and Response objects already are present, you still need to add this API call. Define your own @Trace annotation class If you define your own @Trace annotation class, there is no dependency on the newrelic-api.jar. To define the class: package com.test; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Trace { public static final String NULL = \"\"; String metricName() default NULL; boolean dispatcher() default false; String tracerFactoryName() default NULL; } Copy Then, configure the agent to use this annotation in the common section of the newrelic.yml: class_transformer: trace_annotation_class_name: com.test.Trace Copy Properties for @Trace The @Trace annotation supports the following properties. dispatcher Type: Boolean Default: false If true, the agent will start a transaction when it reaches a method with this @Trace annotation if a transaction is not already in progress. If a transaction is already in progress, the method with this annotation will be included in the ongoing transaction, rather than starting a new one. If false (default), no metrics will be recorded if the agent has not started a transaction before the @Trace annotation is reached. For example: @Trace(dispatcher=true) Copy async Type: Boolean Default: false If true, this method is marked as asynchronous and the agent will trace this method if it linked to an existing transaction. For example: @Trace(async=true) Copy If false (default), the method is not marked as asynchronous. If other @Trace annotations are present and the method is not executing asynchronously, it will still be traced. metricName Type: String Default: (none) This property affects transaction traces and error reporting. By default, the metric name will include the class name followed by the method name. If you do not want class followed by method, then you can use this property to change the metric name. If you set the metricName, as in @Trace(metricName=\"YourMessageHere\"), then the time spent in this method will appear as YourMessageHere in any transaction trace. If you set the metricName in addition to the dispatcher, as in @Trace(metricName=\"YourMessageHere\", dispatcher=true), then the transaction name will appear as YourMessageHere in the APM Transactions page but the time spent in this method will not appear as YourMessageHere in any transaction trace. Here is an example: @Trace(metricName=\"YourMetricName\") Copy Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. excludeFromTransactionTrace Type: Boolean Default: false If true, the method will be excluded from the transaction trace. The agent will still collect metrics for the method. Here is an example: @Trace(excludeFromTransactionTrace=true) Copy leaf Type: Boolean Default: false A leaf tracer has no child tracers. This is useful when you want all time attributed to the tracer, even if other trace points are encountered the tracer's execution. Database tracers often act as a leaf so that all time is attributed to database activity, even if instrumented external calls are made. Here is an example: @Trace(leaf=true) Copy If a leaf tracer does not participate in transaction traces, the agent can create a tracer with lower overhead. Here is an example: @Trace(excludeFromTransactionTrace=true, leaf=true) Copy @TraceLambda If your transaction traces show large blocks of uninstrumented time and you want to include lambda expressions within the trace, you can use the @TraceLambda annotation without parameters: import com.newrelic.api.agent.TraceLambda; @TraceLambda class ClassContainingLambdaExpressions() { // work } Copy Lambda expressions become static methods of the containing class after compilation. By default, static methods within classes marked with the @TraceLambda annotation matching the annotations pattern will be marked with the @Trace annotation. Properties for @TraceLambda The @TraceLambda annotation supports the following properties. pattern Type: String Default: ^\\$?(lambda\\|anonfun)\\$(?\\<name\\>.*) If you set the pattern, as in @TraceLambda(pattern=\"YourPattern\"), then the marked classes method names will be matched against the regex pattern YourPattern. If matched the related method will be marked with the @Trace annotation. Here is an example: @TraceLambda(pattern=\"YourPattern\") Copy includeNonstatic Type: Boolean Default: false If true, the marked classes nonstatic methods will be eligible for assessment against the pattern for instrumentation. Here is an example: @TraceLambda(includeNonstatic=\"true\") Copy @TraceByReturnType To include methods with a particular return type within the trace, you can use the @TraceByReturnType annotation to mark a class passing the return types as a property. Methods in annotated classes that match one of the specified return types will be marked with the @Trace annotation. @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { // ... } Copy Properties for @TraceByReturnType The @TraceByReturnType annotation supports the following properties. traceReturnTypes Type: List < Class> Default: empty list If you set the traceReturnTypes, as in @TraceByReturnType(traceReturnTypes={String.class}), then the marked classes method return types will be matched against the String.class. All matched methods will be marked with the @Trace annotation. Here is an example: @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { public String doSomething() { // matches // ... } public Long somethingElse() { // does not match // ... } } Copy Performance considerations When the Java agent is present in the JVM, it will inject code on the annotated methods. The performance hit is negligible in heavyweight operations, such as database or webservice calls, but is noticeable in methods that are called frequently, such as an accessor called thousands of times a second. Caution Do not instrument all of your methods, as this can lead to decreased performance and to a metric grouping issue. More API functions For more about the Java agent API and its functionality, see the Java agent API introduction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.6356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "sections": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> provides several options for custom instrumentation. One of those options is adding the <em>Java</em> <em>agent</em> <em>API</em>&#x27;s @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must"
      },
      "id": "603eb64a28ccbc9ca2eba79f"
    }
  ],
  "/docs/agents/java-agent/api-guides/java-agent-api-custom-instrumentation-annotation-example-app": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.75406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation <em>guides</em> for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> <em>API</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent API: Instrument using annotation",
        "Important",
        "Configure your agent for annotations",
        "@Trace",
        "Create a new transaction",
        "Add detail to your transactions",
        "Convert a transaction to a web request",
        "Define your own @Trace annotation class",
        "Properties for @Trace",
        "dispatcher",
        "async",
        "metricName",
        "excludeFromTransactionTrace",
        "leaf",
        "@TraceLambda",
        "Properties for @TraceLambda",
        "pattern",
        "includeNonstatic",
        "@TraceByReturnType",
        "Properties for @TraceByReturnType",
        "traceReturnTypes",
        "Performance considerations",
        "Caution",
        "More API functions"
      ],
      "title": "Java agent API: Instrument using annotation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "4a373504c0682b36745d2283fdd902ead43510ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/java-agent-api-instrument-using-annotation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-07-15T18:31:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent provides several options for custom instrumentation. One of those options is adding the Java agent API's @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must modify the source code. If you can't or don't want to modify your source code, see Custom instrumentation for other instrumentation options. Configure your agent for annotations By default, the configuration setting enable_custom_tracing is set to true in the Java agent, which is the setting required for @Trace annotations to function. This setting is not included in the newrelic.yml by default. The only time you need to incorporate this setting into your configuration file is if you want to disable @Trace annotations altogether. To do this, set enable_custom_tracing: false (prefaced with two spaces) in the common stanza of your newrelic.yml. Make sure that newrelic-api.jar appears in your classpath as it contains all these annotations. @Trace Annotating a method with @Trace tells the Java agent that measurements should be taken for that method. To add a method call as a custom trace add @Trace annotations to your method. import com.newrelic.api.agent.Trace; ... @Trace public void run() { // background task } Copy Create a new transaction If transactions do not appear and you want to start a new transaction, include dispatcher=true with the @Trace annotation: @Trace (dispatcher=true) public void run() { // background task } Copy Add detail to your transactions If your transaction traces show large blocks of uninstrumented time and you want to include some more methods within the trace, you can use the @Trace annotation without parameters: @Trace protected void methodWithinTransaction() { // work } Copy Convert a transaction to a web request To make a background task report as a web browser transaction with a Java agent API call: In the method annotated with @Trace(dispatcher=true), call: NewRelic.setRequestAndResponse(Request request, Response response) Copy The arguments are implementations of the Request and Response interfaces in newrelic-api.jar. Important Even if your Request and Response objects already are present, you still need to add this API call. Define your own @Trace annotation class If you define your own @Trace annotation class, there is no dependency on the newrelic-api.jar. To define the class: package com.test; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Trace { public static final String NULL = \"\"; String metricName() default NULL; boolean dispatcher() default false; String tracerFactoryName() default NULL; } Copy Then, configure the agent to use this annotation in the common section of the newrelic.yml: class_transformer: trace_annotation_class_name: com.test.Trace Copy Properties for @Trace The @Trace annotation supports the following properties. dispatcher Type: Boolean Default: false If true, the agent will start a transaction when it reaches a method with this @Trace annotation if a transaction is not already in progress. If a transaction is already in progress, the method with this annotation will be included in the ongoing transaction, rather than starting a new one. If false (default), no metrics will be recorded if the agent has not started a transaction before the @Trace annotation is reached. For example: @Trace(dispatcher=true) Copy async Type: Boolean Default: false If true, this method is marked as asynchronous and the agent will trace this method if it linked to an existing transaction. For example: @Trace(async=true) Copy If false (default), the method is not marked as asynchronous. If other @Trace annotations are present and the method is not executing asynchronously, it will still be traced. metricName Type: String Default: (none) This property affects transaction traces and error reporting. By default, the metric name will include the class name followed by the method name. If you do not want class followed by method, then you can use this property to change the metric name. If you set the metricName, as in @Trace(metricName=\"YourMessageHere\"), then the time spent in this method will appear as YourMessageHere in any transaction trace. If you set the metricName in addition to the dispatcher, as in @Trace(metricName=\"YourMessageHere\", dispatcher=true), then the transaction name will appear as YourMessageHere in the APM Transactions page but the time spent in this method will not appear as YourMessageHere in any transaction trace. Here is an example: @Trace(metricName=\"YourMetricName\") Copy Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. excludeFromTransactionTrace Type: Boolean Default: false If true, the method will be excluded from the transaction trace. The agent will still collect metrics for the method. Here is an example: @Trace(excludeFromTransactionTrace=true) Copy leaf Type: Boolean Default: false A leaf tracer has no child tracers. This is useful when you want all time attributed to the tracer, even if other trace points are encountered the tracer's execution. Database tracers often act as a leaf so that all time is attributed to database activity, even if instrumented external calls are made. Here is an example: @Trace(leaf=true) Copy If a leaf tracer does not participate in transaction traces, the agent can create a tracer with lower overhead. Here is an example: @Trace(excludeFromTransactionTrace=true, leaf=true) Copy @TraceLambda If your transaction traces show large blocks of uninstrumented time and you want to include lambda expressions within the trace, you can use the @TraceLambda annotation without parameters: import com.newrelic.api.agent.TraceLambda; @TraceLambda class ClassContainingLambdaExpressions() { // work } Copy Lambda expressions become static methods of the containing class after compilation. By default, static methods within classes marked with the @TraceLambda annotation matching the annotations pattern will be marked with the @Trace annotation. Properties for @TraceLambda The @TraceLambda annotation supports the following properties. pattern Type: String Default: ^\\$?(lambda\\|anonfun)\\$(?\\<name\\>.*) If you set the pattern, as in @TraceLambda(pattern=\"YourPattern\"), then the marked classes method names will be matched against the regex pattern YourPattern. If matched the related method will be marked with the @Trace annotation. Here is an example: @TraceLambda(pattern=\"YourPattern\") Copy includeNonstatic Type: Boolean Default: false If true, the marked classes nonstatic methods will be eligible for assessment against the pattern for instrumentation. Here is an example: @TraceLambda(includeNonstatic=\"true\") Copy @TraceByReturnType To include methods with a particular return type within the trace, you can use the @TraceByReturnType annotation to mark a class passing the return types as a property. Methods in annotated classes that match one of the specified return types will be marked with the @Trace annotation. @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { // ... } Copy Properties for @TraceByReturnType The @TraceByReturnType annotation supports the following properties. traceReturnTypes Type: List < Class> Default: empty list If you set the traceReturnTypes, as in @TraceByReturnType(traceReturnTypes={String.class}), then the marked classes method return types will be matched against the String.class. All matched methods will be marked with the @Trace annotation. Here is an example: @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { public String doSomething() { // matches // ... } public Long somethingElse() { // does not match // ... } } Copy Performance considerations When the Java agent is present in the JVM, it will inject code on the annotated methods. The performance hit is negligible in heavyweight operations, such as database or webservice calls, but is noticeable in methods that are called frequently, such as an accessor called thousands of times a second. Caution Do not instrument all of your methods, as this can lead to decreased performance and to a metric grouping issue. More API functions For more about the Java agent API and its functionality, see the Java agent API introduction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.6356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "sections": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> provides several options for custom instrumentation. One of those options is adding the <em>Java</em> <em>agent</em> <em>API</em>&#x27;s @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must"
      },
      "id": "603eb64a28ccbc9ca2eba79f"
    }
  ],
  "/docs/agents/java-agent/api-guides/java-agent-api-instrument-external-calls-messaging-datastore-web-frameworks": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.75406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation <em>guides</em> for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> <em>API</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent API: Instrument using annotation",
        "Important",
        "Configure your agent for annotations",
        "@Trace",
        "Create a new transaction",
        "Add detail to your transactions",
        "Convert a transaction to a web request",
        "Define your own @Trace annotation class",
        "Properties for @Trace",
        "dispatcher",
        "async",
        "metricName",
        "excludeFromTransactionTrace",
        "leaf",
        "@TraceLambda",
        "Properties for @TraceLambda",
        "pattern",
        "includeNonstatic",
        "@TraceByReturnType",
        "Properties for @TraceByReturnType",
        "traceReturnTypes",
        "Performance considerations",
        "Caution",
        "More API functions"
      ],
      "title": "Java agent API: Instrument using annotation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "4a373504c0682b36745d2283fdd902ead43510ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/java-agent-api-instrument-using-annotation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-07-15T18:31:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent provides several options for custom instrumentation. One of those options is adding the Java agent API's @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must modify the source code. If you can't or don't want to modify your source code, see Custom instrumentation for other instrumentation options. Configure your agent for annotations By default, the configuration setting enable_custom_tracing is set to true in the Java agent, which is the setting required for @Trace annotations to function. This setting is not included in the newrelic.yml by default. The only time you need to incorporate this setting into your configuration file is if you want to disable @Trace annotations altogether. To do this, set enable_custom_tracing: false (prefaced with two spaces) in the common stanza of your newrelic.yml. Make sure that newrelic-api.jar appears in your classpath as it contains all these annotations. @Trace Annotating a method with @Trace tells the Java agent that measurements should be taken for that method. To add a method call as a custom trace add @Trace annotations to your method. import com.newrelic.api.agent.Trace; ... @Trace public void run() { // background task } Copy Create a new transaction If transactions do not appear and you want to start a new transaction, include dispatcher=true with the @Trace annotation: @Trace (dispatcher=true) public void run() { // background task } Copy Add detail to your transactions If your transaction traces show large blocks of uninstrumented time and you want to include some more methods within the trace, you can use the @Trace annotation without parameters: @Trace protected void methodWithinTransaction() { // work } Copy Convert a transaction to a web request To make a background task report as a web browser transaction with a Java agent API call: In the method annotated with @Trace(dispatcher=true), call: NewRelic.setRequestAndResponse(Request request, Response response) Copy The arguments are implementations of the Request and Response interfaces in newrelic-api.jar. Important Even if your Request and Response objects already are present, you still need to add this API call. Define your own @Trace annotation class If you define your own @Trace annotation class, there is no dependency on the newrelic-api.jar. To define the class: package com.test; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Trace { public static final String NULL = \"\"; String metricName() default NULL; boolean dispatcher() default false; String tracerFactoryName() default NULL; } Copy Then, configure the agent to use this annotation in the common section of the newrelic.yml: class_transformer: trace_annotation_class_name: com.test.Trace Copy Properties for @Trace The @Trace annotation supports the following properties. dispatcher Type: Boolean Default: false If true, the agent will start a transaction when it reaches a method with this @Trace annotation if a transaction is not already in progress. If a transaction is already in progress, the method with this annotation will be included in the ongoing transaction, rather than starting a new one. If false (default), no metrics will be recorded if the agent has not started a transaction before the @Trace annotation is reached. For example: @Trace(dispatcher=true) Copy async Type: Boolean Default: false If true, this method is marked as asynchronous and the agent will trace this method if it linked to an existing transaction. For example: @Trace(async=true) Copy If false (default), the method is not marked as asynchronous. If other @Trace annotations are present and the method is not executing asynchronously, it will still be traced. metricName Type: String Default: (none) This property affects transaction traces and error reporting. By default, the metric name will include the class name followed by the method name. If you do not want class followed by method, then you can use this property to change the metric name. If you set the metricName, as in @Trace(metricName=\"YourMessageHere\"), then the time spent in this method will appear as YourMessageHere in any transaction trace. If you set the metricName in addition to the dispatcher, as in @Trace(metricName=\"YourMessageHere\", dispatcher=true), then the transaction name will appear as YourMessageHere in the APM Transactions page but the time spent in this method will not appear as YourMessageHere in any transaction trace. Here is an example: @Trace(metricName=\"YourMetricName\") Copy Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. excludeFromTransactionTrace Type: Boolean Default: false If true, the method will be excluded from the transaction trace. The agent will still collect metrics for the method. Here is an example: @Trace(excludeFromTransactionTrace=true) Copy leaf Type: Boolean Default: false A leaf tracer has no child tracers. This is useful when you want all time attributed to the tracer, even if other trace points are encountered the tracer's execution. Database tracers often act as a leaf so that all time is attributed to database activity, even if instrumented external calls are made. Here is an example: @Trace(leaf=true) Copy If a leaf tracer does not participate in transaction traces, the agent can create a tracer with lower overhead. Here is an example: @Trace(excludeFromTransactionTrace=true, leaf=true) Copy @TraceLambda If your transaction traces show large blocks of uninstrumented time and you want to include lambda expressions within the trace, you can use the @TraceLambda annotation without parameters: import com.newrelic.api.agent.TraceLambda; @TraceLambda class ClassContainingLambdaExpressions() { // work } Copy Lambda expressions become static methods of the containing class after compilation. By default, static methods within classes marked with the @TraceLambda annotation matching the annotations pattern will be marked with the @Trace annotation. Properties for @TraceLambda The @TraceLambda annotation supports the following properties. pattern Type: String Default: ^\\$?(lambda\\|anonfun)\\$(?\\<name\\>.*) If you set the pattern, as in @TraceLambda(pattern=\"YourPattern\"), then the marked classes method names will be matched against the regex pattern YourPattern. If matched the related method will be marked with the @Trace annotation. Here is an example: @TraceLambda(pattern=\"YourPattern\") Copy includeNonstatic Type: Boolean Default: false If true, the marked classes nonstatic methods will be eligible for assessment against the pattern for instrumentation. Here is an example: @TraceLambda(includeNonstatic=\"true\") Copy @TraceByReturnType To include methods with a particular return type within the trace, you can use the @TraceByReturnType annotation to mark a class passing the return types as a property. Methods in annotated classes that match one of the specified return types will be marked with the @Trace annotation. @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { // ... } Copy Properties for @TraceByReturnType The @TraceByReturnType annotation supports the following properties. traceReturnTypes Type: List < Class> Default: empty list If you set the traceReturnTypes, as in @TraceByReturnType(traceReturnTypes={String.class}), then the marked classes method return types will be matched against the String.class. All matched methods will be marked with the @Trace annotation. Here is an example: @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { public String doSomething() { // matches // ... } public Long somethingElse() { // does not match // ... } } Copy Performance considerations When the Java agent is present in the JVM, it will inject code on the annotated methods. The performance hit is negligible in heavyweight operations, such as database or webservice calls, but is noticeable in methods that are called frequently, such as an accessor called thousands of times a second. Caution Do not instrument all of your methods, as this can lead to decreased performance and to a metric grouping issue. More API functions For more about the Java agent API and its functionality, see the Java agent API introduction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.6356,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "sections": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> provides several options for custom instrumentation. One of those options is adding the <em>Java</em> <em>agent</em> <em>API</em>&#x27;s @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must"
      },
      "id": "603eb64a28ccbc9ca2eba79f"
    }
  ],
  "/docs/agents/java-agent/api-guides/java-agent-api-instrument-using-annotation": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.75406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation <em>guides</em> for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> <em>API</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent API: Custom instrumentation with annotation of an example app",
        "Important",
        "Complete example app using API",
        "Tip",
        "Complete API call example",
        "How the example uses the API",
        "Import the needed packages",
        "Set @Trace for transaction traces",
        "Create custom names for web transactions",
        "Bypass Apdex when collecting non-public data",
        "Record the user ID",
        "Collect promotion data",
        "Send instructions to the handler",
        "Include page load timing code in the HTTP response",
        "Complete the HTTP response"
      ],
      "title": "Java agent API: Custom instrumentation with annotation of an example app",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "a6a2aadf63f8282b7d599579f67010fbd600d183",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/java-agent-api-custom-instrumentation-annotation-example-app/",
      "published_at": "2021-10-01T13:36:50Z",
      "updated_at": "2021-07-09T06:24:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent API lets you set up custom instrumentation for your Java application. This document shows an example of using custom instrumentation with annotation in an imaginary application. Important For best results when using the API, ensure you have the latest Java agent release. Complete example app using API Below is an example of an imaginary store app's servlet using the Java agent API. Tip If you copy and paste example code, be sure to use appropriate spacing on your command lines. Complete API call example package test; import java.io.IOException; import java.io.PrintWriter; import java.util.Random; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; // Java agent API imports import com.newrelic.api.agent.NewRelic; import com.newrelic.api.agent.Trace; public class TestServlet extends HttpServlet { // instrumentation via annotation @Trace(dispatcher = true) protected void processRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { saveNewRelicInfo(req); doRequestWork(req); writeResponse(resp); } private void saveNewRelicInfo(HttpServletRequest req) { String storeId = req.getParameter(\"storeId\"); if (storeId != null) { // set the name of the Transaction NewRelic.setTransactionName(null, \"/store\"); if (storeId.equals(\"betaStore\")) { // prevent the method from contributing to the Apdex score NewRelic.ignoreApdex(); } } String userId = req.getParameter(\"userId\"); if (userId != null) { // set the user name to associate with the RUM JavaScript footer // for the current web transaction NewRelic.setUserName(userId); // add a key/value pair to the current transaction NewRelic.addCustomParameter(\"userId\", userId); } String promotionId = req.getParameter(\"promotionId\"); if (promotionId != null) { // increment the metric counter for the given name NewRelic.incrementCounter(\"Custom/Promotion\"); } } protected void doRequestWork(HttpServletRequest req) { try { long millisToSleep = new Random().nextInt(5000); Thread.sleep(millisToSleep); // record a response time in milliseconds for the given metric name NewRelic.recordResponseTimeMetric(\"Custom/RandomSleep\", millisToSleep); } catch (InterruptedException e) { // report a handled exception NewRelic.noticeError(e, false); } } protected void writeResponse(HttpServletResponse resp) throws IOException { resp.setContentType(\"text/html;charset=UTF-8\"); PrintWriter out = resp.getWriter(); out.println(\"<html>\"); out.println(\"<head>\"); // get the RUM JavaScript header for the current web transaction out.println(NewRelic.getBrowserTimingHeader()); out.println(\"<title>NewRelic API example servlet</title>\"); out.println(\"</head>\"); out.println(\"<body>\"); out.println(\"<h1>API example</h1>\"); // get the RUM JavaScript footer for the current web transaction out.println(NewRelic.getBrowserTimingFooter()); out.println(\"</body>\"); out.println(\"</html>\"); out.close(); } protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { processRequest(req, resp); } protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { processRequest(req, resp); } } Copy How the example uses the API Here is the same example app divided into sections that describe how the API is used: Import the needed packages This part of the example shows the imports needed for the example application and Java agent API. package test; import java.io.IOException; import java.io.PrintWriter; import java.util.Random; import javax.servlet.ServletException; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; // Java agent API imports import com.newrelic.api.agent.NewRelic; import com.newrelic.api.agent.Trace; Copy Set @Trace for transaction traces This part of the API call provides instructions to instrument this call using New Relic's trace annotation @Trace. Any requests that hit processRequest will now show a segment in APM's Transaction trace call chart. public class TestServlet extends HttpServlet { // instrumentation via annotation @Trace(dispatcher = true) protected void processRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { saveNewRelicInfo(req); doRequestWork(req); writeResponse(resp); } Copy Create custom names for web transactions This part of the API call instructs web transactions containing a storeId value to appear in APM's Transactions page with the custom transaction name you set. A request to any one store will appear under the same, aggregate name. private void saveNewRelicInfo(HttpServletRequest req) { String storeId = req.getParameter(\"storeId\"); if (storeId != null) { // set the name of the Transaction NewRelic.setTransactionName(null, \"/store\"); } } Copy Bypass Apdex when collecting non-public data This part of the API call excludes the non-public beta storeID from affecting the Apdex score. if (storeId.equals(\"betaStore\")) { // prevent the method from contributing to the Apdex score NewRelic.ignoreApdex(); } Copy Record the user ID This part of the API call inserts additional metadata into the page load timing request so that browser traces can be tied with the userId. It also records the userId as a custom parameter on the transaction so that it appears in the parameter details of a transaction trace. (Page load timing sometimes is referred to as real user monitoring or RUM.) String userId = req.getParameter(\"userId\"); if (userId != null) { // set the user name to associate with the RUM JavaScript footer // for the current web transaction NewRelic.setUserName(userId); // add a key/value pair to the current transaction NewRelic.addCustomParameter(\"userId\", userId); } Copy Collect promotion data This part of the API call records the number of times a promotion was viewed so that the metrics can appear on a custom dashboard. Important For metrics you want to graph in custom dashboards, be sure to prepend Custom/ to the metric name; for example, Custom/Promotion. String promotionId = req.getParameter(\"promotionId\"); if (promotionId != null) { // increment the metric counter for the given name NewRelic.incrementCounter(\"Custom/Promotion\"); } Copy Send instructions to the handler This part of the API call sends a set of instructions to the handler for processing requests and handling exceptions. protected void doRequestWork(HttpServletRequest req) { try { long millisToSleep = new Random().nextInt(5000); Thread.sleep(millisToSleep); // record a response time in milliseconds for the given metric name NewRelic.recordResponseTimeMetric(\"Custom/RandomSleep\", millisToSleep); } catch (InterruptedException e) { // report a handled exception NewRelic.noticeError(e, false); } } protected void writeResponse(HttpServletResponse resp) throws IOException { Copy Include page load timing code in the HTTP response This part of the API call defines what to include in the HttpServletResponse. For manual instrumentation of browser monitoring to monitor page load timing (sometimes referred to as real user monitoring or RUM): Set the header after the < head> tag. Set the footer at the end of < body> tag. resp.setContentType(\"text/html;charset=UTF-8\"); PrintWriter out = resp.getWriter(); out.println(\"<html>\"); out.println(\"<head>\"); // get the RUM JavaScript header for the current web transaction out.println(NewRelic.getBrowserTimingHeader()); out.println(\"<title>NewRelic API example servlet</title>\"); out.println(\"</head>\"); out.println(\"<body>\"); out.println(\"<h1>API example</h1>\"); // get the RUM JavaScript footer for the current web transaction out.println(NewRelic.getBrowserTimingFooter()); out.println(\"</body>\"); out.println(\"</html>\"); out.close(); } Copy Complete the HTTP response This part of the API call defines the remaining information to include in the HttpServletResponse response. protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { processRequest(req, resp); } protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { processRequest(req, resp); } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.8904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>API</em>: Custom instrumentation with annotation of an example app",
        "sections": "<em>Java</em> <em>agent</em> <em>API</em>: Custom instrumentation with annotation of an example app",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> <em>API</em> lets you set up custom instrumentation for your <em>Java</em> application. This document shows an example of using custom instrumentation with annotation in an imaginary application. Important For best results when using the <em>API</em>, ensure you have the latest <em>Java</em> <em>agent</em> release"
      },
      "id": "603eb76a64441f48424e886b"
    }
  ],
  "/docs/agents/java-agent/api-guides/java-agent-api-instrumenting-example-app-external-datastore-calls-cat": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.754,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21491,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation <em>guides</em> for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> <em>API</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent API: Instrument using annotation",
        "Important",
        "Configure your agent for annotations",
        "@Trace",
        "Create a new transaction",
        "Add detail to your transactions",
        "Convert a transaction to a web request",
        "Define your own @Trace annotation class",
        "Properties for @Trace",
        "dispatcher",
        "async",
        "metricName",
        "excludeFromTransactionTrace",
        "leaf",
        "@TraceLambda",
        "Properties for @TraceLambda",
        "pattern",
        "includeNonstatic",
        "@TraceByReturnType",
        "Properties for @TraceByReturnType",
        "traceReturnTypes",
        "Performance considerations",
        "Caution",
        "More API functions"
      ],
      "title": "Java agent API: Instrument using annotation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "4a373504c0682b36745d2283fdd902ead43510ec",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/java-agent-api-instrument-using-annotation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-07-15T18:31:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent provides several options for custom instrumentation. One of those options is adding the Java agent API's @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must modify the source code. If you can't or don't want to modify your source code, see Custom instrumentation for other instrumentation options. Configure your agent for annotations By default, the configuration setting enable_custom_tracing is set to true in the Java agent, which is the setting required for @Trace annotations to function. This setting is not included in the newrelic.yml by default. The only time you need to incorporate this setting into your configuration file is if you want to disable @Trace annotations altogether. To do this, set enable_custom_tracing: false (prefaced with two spaces) in the common stanza of your newrelic.yml. Make sure that newrelic-api.jar appears in your classpath as it contains all these annotations. @Trace Annotating a method with @Trace tells the Java agent that measurements should be taken for that method. To add a method call as a custom trace add @Trace annotations to your method. import com.newrelic.api.agent.Trace; ... @Trace public void run() { // background task } Copy Create a new transaction If transactions do not appear and you want to start a new transaction, include dispatcher=true with the @Trace annotation: @Trace (dispatcher=true) public void run() { // background task } Copy Add detail to your transactions If your transaction traces show large blocks of uninstrumented time and you want to include some more methods within the trace, you can use the @Trace annotation without parameters: @Trace protected void methodWithinTransaction() { // work } Copy Convert a transaction to a web request To make a background task report as a web browser transaction with a Java agent API call: In the method annotated with @Trace(dispatcher=true), call: NewRelic.setRequestAndResponse(Request request, Response response) Copy The arguments are implementations of the Request and Response interfaces in newrelic-api.jar. Important Even if your Request and Response objects already are present, you still need to add this API call. Define your own @Trace annotation class If you define your own @Trace annotation class, there is no dependency on the newrelic-api.jar. To define the class: package com.test; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface Trace { public static final String NULL = \"\"; String metricName() default NULL; boolean dispatcher() default false; String tracerFactoryName() default NULL; } Copy Then, configure the agent to use this annotation in the common section of the newrelic.yml: class_transformer: trace_annotation_class_name: com.test.Trace Copy Properties for @Trace The @Trace annotation supports the following properties. dispatcher Type: Boolean Default: false If true, the agent will start a transaction when it reaches a method with this @Trace annotation if a transaction is not already in progress. If a transaction is already in progress, the method with this annotation will be included in the ongoing transaction, rather than starting a new one. If false (default), no metrics will be recorded if the agent has not started a transaction before the @Trace annotation is reached. For example: @Trace(dispatcher=true) Copy async Type: Boolean Default: false If true, this method is marked as asynchronous and the agent will trace this method if it linked to an existing transaction. For example: @Trace(async=true) Copy If false (default), the method is not marked as asynchronous. If other @Trace annotations are present and the method is not executing asynchronously, it will still be traced. metricName Type: String Default: (none) This property affects transaction traces and error reporting. By default, the metric name will include the class name followed by the method name. If you do not want class followed by method, then you can use this property to change the metric name. If you set the metricName, as in @Trace(metricName=\"YourMessageHere\"), then the time spent in this method will appear as YourMessageHere in any transaction trace. If you set the metricName in addition to the dispatcher, as in @Trace(metricName=\"YourMessageHere\", dispatcher=true), then the transaction name will appear as YourMessageHere in the APM Transactions page but the time spent in this method will not appear as YourMessageHere in any transaction trace. Here is an example: @Trace(metricName=\"YourMetricName\") Copy Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. excludeFromTransactionTrace Type: Boolean Default: false If true, the method will be excluded from the transaction trace. The agent will still collect metrics for the method. Here is an example: @Trace(excludeFromTransactionTrace=true) Copy leaf Type: Boolean Default: false A leaf tracer has no child tracers. This is useful when you want all time attributed to the tracer, even if other trace points are encountered the tracer's execution. Database tracers often act as a leaf so that all time is attributed to database activity, even if instrumented external calls are made. Here is an example: @Trace(leaf=true) Copy If a leaf tracer does not participate in transaction traces, the agent can create a tracer with lower overhead. Here is an example: @Trace(excludeFromTransactionTrace=true, leaf=true) Copy @TraceLambda If your transaction traces show large blocks of uninstrumented time and you want to include lambda expressions within the trace, you can use the @TraceLambda annotation without parameters: import com.newrelic.api.agent.TraceLambda; @TraceLambda class ClassContainingLambdaExpressions() { // work } Copy Lambda expressions become static methods of the containing class after compilation. By default, static methods within classes marked with the @TraceLambda annotation matching the annotations pattern will be marked with the @Trace annotation. Properties for @TraceLambda The @TraceLambda annotation supports the following properties. pattern Type: String Default: ^\\$?(lambda\\|anonfun)\\$(?\\<name\\>.*) If you set the pattern, as in @TraceLambda(pattern=\"YourPattern\"), then the marked classes method names will be matched against the regex pattern YourPattern. If matched the related method will be marked with the @Trace annotation. Here is an example: @TraceLambda(pattern=\"YourPattern\") Copy includeNonstatic Type: Boolean Default: false If true, the marked classes nonstatic methods will be eligible for assessment against the pattern for instrumentation. Here is an example: @TraceLambda(includeNonstatic=\"true\") Copy @TraceByReturnType To include methods with a particular return type within the trace, you can use the @TraceByReturnType annotation to mark a class passing the return types as a property. Methods in annotated classes that match one of the specified return types will be marked with the @Trace annotation. @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { // ... } Copy Properties for @TraceByReturnType The @TraceByReturnType annotation supports the following properties. traceReturnTypes Type: List < Class> Default: empty list If you set the traceReturnTypes, as in @TraceByReturnType(traceReturnTypes={String.class}), then the marked classes method return types will be matched against the String.class. All matched methods will be marked with the @Trace annotation. Here is an example: @TraceByReturnType(traceReturnTypes={Integer.class, String.class}) class ClassContainingMethods() { public String doSomething() { // matches // ... } public Long somethingElse() { // does not match // ... } } Copy Performance considerations When the Java agent is present in the JVM, it will inject code on the annotated methods. The performance hit is negligible in heavyweight operations, such as database or webservice calls, but is noticeable in methods that are called frequently, such as an accessor called thousands of times a second. Caution Do not instrument all of your methods, as this can lead to decreased performance and to a metric grouping issue. More API functions For more about the Java agent API and its functionality, see the Java agent API introduction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.63559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "sections": "<em>Java</em> <em>agent</em> <em>API</em>: Instrument using annotation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> provides several options for custom instrumentation. One of those options is adding the <em>Java</em> <em>agent</em> <em>API</em>&#x27;s @Trace, @TraceLambda or @TraceByReturnType annotations to your application code. This document describes how to use annotations. Important To use annotations, you must"
      },
      "id": "603eb64a28ccbc9ca2eba79f"
    }
  ],
  "/docs/agents/java-agent/async-instrumentation/disable-scala-netty-akka-play-2-instrumentation": [
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-10-01T13:40:11Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "If you are having problems using the <em>Java</em> <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    },
    {
      "sections": [
        "Java agent API for asynchronous applications",
        "Async tracking tools: Tokens and segments",
        "Tokens: Connect async threads",
        "1. Start a transaction, then create and expire a token",
        "2. Mark a transaction as async and link to request thread",
        "3. View your async trace in the New Relic UI",
        "Tip",
        "Segments: Time arbitrary async activity",
        "1. Create a transaction and call an external service",
        "2. Start a segment, report externals, and end the segment"
      ],
      "title": "Java agent API for asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7b5f035809040487d96279fb318203b479a61b02",
      "image": "https://docs.newrelic.com/static/06c87505ee5c0d97e598d04258587f52/c1b63/Screen-Shot-2017-03-14-at-4.50.31-PM.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/java-agent-api-asynchronous-applications/",
      "published_at": "2021-10-01T13:39:06Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java (agent version 3.37 or higher) includes an API to instrument asynchronous activity. For supported frameworks, the agent usually instruments async work automatically. However, the async API can still be useful to add detail. This document provides examples of using tokens and segments to instrument your app. For more information about how New Relic instruments and displays async work in the APM UI, see Monitoring considerations for asynchronous applications. For details on the actual classes and methods, see the Javadoc. For general information on the Java agent API, see the Java agent API guide. For troubleshooting common problems, see Troubleshooting Java asynchronous applications. Async tracking tools: Tokens and segments The Java agent API provides two ways to trace asynchronous activity: Tokens: Tokens are passed between threads to link asynchronous units of work to a specific transaction. They do not perform any timing directly. Segments: Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. Segments are typically used to track external calls that are completed by a callback mechanism. Tokens: Connect async threads Use tokens to link arbitrary units of work that are on separate threads. This section describes how to use the token-related calls together to instrument async work. For detailed information on classes and methods, see the Javadoc. To use tokens, you first need to create the token, then link another call to the originating transaction. You should link the token as soon as possible within the other call. If you do not link the token immediately, you risk losing any methods that contain an @Trace below the call you are trying to link. You can also expire the token in the original call. The Java agent will then link the work in the New Relic UI. These examples illustrate how to use the token-related calls together: 1. Start a transaction, then create and expire a token Consider the method parallelStream() in the code snippet below. Because some of the calls to requestItemAsync() will occur on a separate thread, a token is created and passed to link that asynchronous work back to the requesting thread. /** * Example showing multi-threaded implementation of requesting data using a parallel {@link Stream}. */ @RequestMapping(\"parallel_stream\") @Trace(dispatcher = true) // starts a transaction public ResponseEntity<String> parallelStream(@RequestParam(\"ids\") List<Long> ids) { final Token token = NewRelic.getAgent().getTransaction(). getToken() ; List<item> results = ids .parallelStream() .map(id -> requestItemAsync\\(id, token)) // note we're calling a different method than parallelStreamBad .filter(item -> item != null) .collect(Collectors.toList()); token.expire() ; return formattedResponse(\"parallel_stream\", results); } Copy The agent API calls in this sample are: @Trace(dispatcher = true): Tells the agent to start a transaction. For more on this method, see the Javadoc. getToken(): Creates the token which will link the work together. For more on this method, see the Javadoc. token.expire(): Expires the token. This allows the transaction to end. For more on this method, see the Javadoc. 2. Mark a transaction as async and link to request thread The following code example shows requestItemAsync, which might execute on a separate thread from the requesting thread. For this reason, the token that was created in the previous code example is linked to the Transaction in requestItemAsync. Note that requestItemAsync() has the @Trace(async=true) annotation, which tells the agent to trace this method if it's linked to an existing transaction. After parallelStream() collects all results, the token is expired. This is important because it makes sure the transaction doesn't stay open after parallelStream() completes. @Trace(async = true) private Item requestItemAsync(long id, Token token) { token.link() ; return requestItem(id); } Copy The agent API calls in this sample are: @Trace(async = true): Starts a transaction. For more on this method, see the Javadoc. token.link(): Links the work being done in requestItemAsync() (which is executing on a different thread) to the requesting thread. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI Here's an example of a transaction trace in the APM UI for this endpoint: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: All asynchronous method calls linked with a token are indicated with an Async icon. All asynchronous method calls linked with a token are indicated with an Async icon in the Drilldown column. It's not necessary to link methods that are on the same thread, but doing so will have no negative effect. It's often the case that a single token can be shared, like in the parallelStream() example. Tip By default, a transaction can create a maximum of 3000 tokens and each token has a default timeout of 180s. You can change the former limit with the token_limit config option and the latter with the token_timeout config option. Traces for transactions that exceed the token_limit will contain a token_clamp attribute. Increasing either config option may increase agent memory usage. Segments: Time arbitrary async activity Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. This is most commonly used to time connections to external services. Use segments if you want to: Time code that completes via a callback Time an asynchronous call that spans many methods Measure the time between when work is created and when it executed (for example, in a thread pool) 1. Create a transaction and call an external service The method below makes a call to an external service (in this case a database) using the method storeItem(): /** * Example showing single threaded implementation of inserting data into a datasource. */ @RequestMapping(\"insert\") @Trace(dispatcher = true) //starts a transaction public ResponseEntity insert(@RequestParam(\"id\") Long id) { if (id != null) { storeItem(id); return new ResponseEntity<>(\"insert\", HttpStatus.OK); } else { return new ResponseEntity<>(\"insert\", HttpStatus.BAD_REQUEST); } } Copy The goal in this case it to find out how long the Callable in the Lambda statement is waiting in the thread pool before executing, rather than determining how long storeItem() runs. For this reason, a segment is used instead of a token, and @Trace(async = true) is not necessary like it was for a token. The agent API call in this sample is: @Trace(dispatcher = true): Starts a transaction. For more on this method, see the Javadoc. 2. Start a segment, report externals, and end the segment The following code example shows a segment starting in the storeItem method to measure how long the Lambda statement is waiting in the thread pool. To stop timing the segment, you must call either .end() or .ignore(). If you don't want to report the segment as part of its parent transaction, call .ignore(). Otherwise, to report the segment as part of its parent transaction, call .end(). private void storeItem(long id) { Segment segment = NewRelic.getAgent().getTransaction(). startSegment(\"storeItem\") ; segment. reportAsExternal (DatastoreParameters .product(\"H2\") .collection(null) .operation(\"insert\") .instance(\"localhost\", 8080) .databaseName(\"test\") .build()); // fire and forget DB_POOL.submit(() -> { segment.end(); insertData(id); }); } Copy The agent API calls in this sample are: startSegment(...): Begins the segment that will time the code. For more on this method, see the Javadoc. reportAsExternal(DatastoreParameters()): Associates the time with a datastore external call This will show up in APM with datastore data. For more information, see reportAsExternal API. segment.end(): Stops timing this segment. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI When the method completes, APM displays a transaction trace with one external call: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: A single asynchronous segment is called out in the Drilldown column. Tip By default, the agent can track a maximum of 1000 segments during a given transaction. You can change this limit with the segment_timeout config option. Traces of transactions that exceed this limit will contain a segment_clamp attribute. Increasing this limit may increase agent memory usage.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "sections": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic for <em>Java</em> (<em>agent</em> version 3.37 or higher) includes an API to <em>instrument</em> asynchronous activity. For supported frameworks, the <em>agent</em> usually instruments <em>async</em> work automatically. However, the <em>async</em> API can still be useful to add detail. This document provides examples of using tokens"
      },
      "id": "603eb4c9196a67dde5a83db7"
    },
    {
      "sections": [
        "Introduction to Java async instrumentation",
        "Asynchronous operations",
        "Async and thread-switching",
        "Async and response time",
        "Custom instrumentation with the async API"
      ],
      "title": "Introduction to Java async instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "3b0a9e1f2f6b69a8ad101ec59c592ac4a574ae63",
      "image": "https://docs.newrelic.com/static/a38112969f7c8a3001651b65853a803b/39c09/sZ6-I4x5BDSDspRS_G7Hefg.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/introduction-java-async-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java includes a set of API methods for custom instrumentation of asynchronous activity. This is most useful to instrument asynchronous activity in unsupported frameworks, but you can also use the API to add additional instrumentation to supported frameworks. This document explains how asynchronous activity occurs, and how New Relic monitors async work. Asynchronous operations With a synchronous programming model, programming tasks are usually executed in a specific order. One task must complete before the next task begins, and each task blocks the next task from completing. Asynchronous programming uses a non-blocking model, so that tasks can be run in parallel. Tasks executed asynchronously are completely independent of each other in their execution and initialization. Because asynchronous code doesn't execute in a specific order, the server's full processing power can be used more efficiently, and the app's throughput increases. Async and thread-switching For applications that use asynchronous processing, thread-switching is when a program or task switches from one thread to another. Understanding these asynchronous interleavings can help you decide which methods should be instrumented. Here is an example method with a controller that makes external requests in parallel. These requests execute asynchronously, so each request executes independently of each other and getScoreAsync() returns immediately after being called. This allows the requesting thread to continue making requests while getScoreAsync() makes an external call and sends a reply. @ResponseBody @RequestMapping(\"getScores\", method = RequestMethod.Get produces = “text/plain”) public String getCreditScores(@RequestParam(name = \"uids\") uids) { return Arrays.stream(uids.split(\",\")) .parallel() .map(Integer::valueOf) .map(uid -> getScoreAsync(uid)) .collect(Collectors.toList());} Copy Some of these requests will finish before others. Some might even finish after the requesting thread has moved on to other tasks: With New Relic's asynchronous instrumentation, the APM UI flags the work as Async. For example, if the above method were instrumented by New Relic (either automatically or via custom instrumentation), this is what the APM UI would show on the Trace details page: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: When asynchronous activity in a Java application is detected by APM, it is indicated with the Async flag in the Drilldown column. Async and response time Response time is defined as the duration of a transaction from the perspective of the requester. For asynchronous applications, the response time is often less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Because tasks can be deferred, the application can take advantage of its limited resources and process things more quickly. The chart's response time line gives you more insight into the perceived behavior and speed of your application than does the total web transaction time: one.newrelic.com > APM > (select an app) > Summary: On the APM Summary page, asynchronous activity in a Java app can result in the response time (the blue line) being less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Custom instrumentation with the async API To implement custom instrumentation of async work, see the Java agent async API guide. For general information on how to use the Java agent API, see Java agent API guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "sections": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " transaction time. This is because the methods don&#x27;t have to wait for all preceding methods to complete before returning. Custom <em>instrumentation</em> with the <em>async</em> API To implement custom <em>instrumentation</em> of <em>async</em> work, see the <em>Java</em> <em>agent</em> <em>async</em> API guide. For general information on how to use the <em>Java</em> <em>agent</em> API, see <em>Java</em> <em>agent</em> API guide."
      },
      "id": "603eb491e7b9d282bd2a07ca"
    }
  ],
  "/docs/agents/java-agent/async-instrumentation/introduction-java-async-instrumentation": [
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-10-01T13:40:11Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "If you are having problems using the <em>Java</em> <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    },
    {
      "sections": [
        "Java agent API for asynchronous applications",
        "Async tracking tools: Tokens and segments",
        "Tokens: Connect async threads",
        "1. Start a transaction, then create and expire a token",
        "2. Mark a transaction as async and link to request thread",
        "3. View your async trace in the New Relic UI",
        "Tip",
        "Segments: Time arbitrary async activity",
        "1. Create a transaction and call an external service",
        "2. Start a segment, report externals, and end the segment"
      ],
      "title": "Java agent API for asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7b5f035809040487d96279fb318203b479a61b02",
      "image": "https://docs.newrelic.com/static/06c87505ee5c0d97e598d04258587f52/c1b63/Screen-Shot-2017-03-14-at-4.50.31-PM.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/java-agent-api-asynchronous-applications/",
      "published_at": "2021-10-01T13:39:06Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java (agent version 3.37 or higher) includes an API to instrument asynchronous activity. For supported frameworks, the agent usually instruments async work automatically. However, the async API can still be useful to add detail. This document provides examples of using tokens and segments to instrument your app. For more information about how New Relic instruments and displays async work in the APM UI, see Monitoring considerations for asynchronous applications. For details on the actual classes and methods, see the Javadoc. For general information on the Java agent API, see the Java agent API guide. For troubleshooting common problems, see Troubleshooting Java asynchronous applications. Async tracking tools: Tokens and segments The Java agent API provides two ways to trace asynchronous activity: Tokens: Tokens are passed between threads to link asynchronous units of work to a specific transaction. They do not perform any timing directly. Segments: Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. Segments are typically used to track external calls that are completed by a callback mechanism. Tokens: Connect async threads Use tokens to link arbitrary units of work that are on separate threads. This section describes how to use the token-related calls together to instrument async work. For detailed information on classes and methods, see the Javadoc. To use tokens, you first need to create the token, then link another call to the originating transaction. You should link the token as soon as possible within the other call. If you do not link the token immediately, you risk losing any methods that contain an @Trace below the call you are trying to link. You can also expire the token in the original call. The Java agent will then link the work in the New Relic UI. These examples illustrate how to use the token-related calls together: 1. Start a transaction, then create and expire a token Consider the method parallelStream() in the code snippet below. Because some of the calls to requestItemAsync() will occur on a separate thread, a token is created and passed to link that asynchronous work back to the requesting thread. /** * Example showing multi-threaded implementation of requesting data using a parallel {@link Stream}. */ @RequestMapping(\"parallel_stream\") @Trace(dispatcher = true) // starts a transaction public ResponseEntity<String> parallelStream(@RequestParam(\"ids\") List<Long> ids) { final Token token = NewRelic.getAgent().getTransaction(). getToken() ; List<item> results = ids .parallelStream() .map(id -> requestItemAsync\\(id, token)) // note we're calling a different method than parallelStreamBad .filter(item -> item != null) .collect(Collectors.toList()); token.expire() ; return formattedResponse(\"parallel_stream\", results); } Copy The agent API calls in this sample are: @Trace(dispatcher = true): Tells the agent to start a transaction. For more on this method, see the Javadoc. getToken(): Creates the token which will link the work together. For more on this method, see the Javadoc. token.expire(): Expires the token. This allows the transaction to end. For more on this method, see the Javadoc. 2. Mark a transaction as async and link to request thread The following code example shows requestItemAsync, which might execute on a separate thread from the requesting thread. For this reason, the token that was created in the previous code example is linked to the Transaction in requestItemAsync. Note that requestItemAsync() has the @Trace(async=true) annotation, which tells the agent to trace this method if it's linked to an existing transaction. After parallelStream() collects all results, the token is expired. This is important because it makes sure the transaction doesn't stay open after parallelStream() completes. @Trace(async = true) private Item requestItemAsync(long id, Token token) { token.link() ; return requestItem(id); } Copy The agent API calls in this sample are: @Trace(async = true): Starts a transaction. For more on this method, see the Javadoc. token.link(): Links the work being done in requestItemAsync() (which is executing on a different thread) to the requesting thread. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI Here's an example of a transaction trace in the APM UI for this endpoint: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: All asynchronous method calls linked with a token are indicated with an Async icon. All asynchronous method calls linked with a token are indicated with an Async icon in the Drilldown column. It's not necessary to link methods that are on the same thread, but doing so will have no negative effect. It's often the case that a single token can be shared, like in the parallelStream() example. Tip By default, a transaction can create a maximum of 3000 tokens and each token has a default timeout of 180s. You can change the former limit with the token_limit config option and the latter with the token_timeout config option. Traces for transactions that exceed the token_limit will contain a token_clamp attribute. Increasing either config option may increase agent memory usage. Segments: Time arbitrary async activity Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. This is most commonly used to time connections to external services. Use segments if you want to: Time code that completes via a callback Time an asynchronous call that spans many methods Measure the time between when work is created and when it executed (for example, in a thread pool) 1. Create a transaction and call an external service The method below makes a call to an external service (in this case a database) using the method storeItem(): /** * Example showing single threaded implementation of inserting data into a datasource. */ @RequestMapping(\"insert\") @Trace(dispatcher = true) //starts a transaction public ResponseEntity insert(@RequestParam(\"id\") Long id) { if (id != null) { storeItem(id); return new ResponseEntity<>(\"insert\", HttpStatus.OK); } else { return new ResponseEntity<>(\"insert\", HttpStatus.BAD_REQUEST); } } Copy The goal in this case it to find out how long the Callable in the Lambda statement is waiting in the thread pool before executing, rather than determining how long storeItem() runs. For this reason, a segment is used instead of a token, and @Trace(async = true) is not necessary like it was for a token. The agent API call in this sample is: @Trace(dispatcher = true): Starts a transaction. For more on this method, see the Javadoc. 2. Start a segment, report externals, and end the segment The following code example shows a segment starting in the storeItem method to measure how long the Lambda statement is waiting in the thread pool. To stop timing the segment, you must call either .end() or .ignore(). If you don't want to report the segment as part of its parent transaction, call .ignore(). Otherwise, to report the segment as part of its parent transaction, call .end(). private void storeItem(long id) { Segment segment = NewRelic.getAgent().getTransaction(). startSegment(\"storeItem\") ; segment. reportAsExternal (DatastoreParameters .product(\"H2\") .collection(null) .operation(\"insert\") .instance(\"localhost\", 8080) .databaseName(\"test\") .build()); // fire and forget DB_POOL.submit(() -> { segment.end(); insertData(id); }); } Copy The agent API calls in this sample are: startSegment(...): Begins the segment that will time the code. For more on this method, see the Javadoc. reportAsExternal(DatastoreParameters()): Associates the time with a datastore external call This will show up in APM with datastore data. For more information, see reportAsExternal API. segment.end(): Stops timing this segment. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI When the method completes, APM displays a transaction trace with one external call: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: A single asynchronous segment is called out in the Drilldown column. Tip By default, the agent can track a maximum of 1000 segments during a given transaction. You can change this limit with the segment_timeout config option. Traces of transactions that exceed this limit will contain a segment_clamp attribute. Increasing this limit may increase agent memory usage.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "sections": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic for <em>Java</em> (<em>agent</em> version 3.37 or higher) includes an API to <em>instrument</em> asynchronous activity. For supported frameworks, the <em>agent</em> usually instruments <em>async</em> work automatically. However, the <em>async</em> API can still be useful to add detail. This document provides examples of using tokens"
      },
      "id": "603eb4c9196a67dde5a83db7"
    },
    {
      "sections": [
        "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
        "Contents",
        "Java agent versions 3.21 or lower",
        "Java agent versions 3.22 or higher",
        "Check for deprecated configuration settings"
      ],
      "title": "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7a6fa946f9f903c240099279d125807b89665668",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/disable-scala-netty-akka-play-2-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document describes how to disable Java agent instrumentation on these popular async frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this instrumentation if you find that the metrics reported aren't valuable to you, or if the instrumentation incurs more overhead than you would like. If you selectively disable some of the instrumentation, some segments of activity will not be reported and your total time will be understated. Contents Java agent versions 3.21 or lower If you are using Java agent version 3.22 or lower, add the following to the class_transformer section of your newrelic.yml settings: # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings class_transformer: akka_instrumentation: enabled: false netty_instrumenation: enabled: false play2_instrumentation: enabled: false scala_instrumentation: enabled: false Copy Java agent versions 3.22 or higher The older Scala, Netty, Akka, and Play 2 Framework instrumentation configuration names have been deprecated as of Java Agent version 3.22. For those using Java Agent 3.22 or higher, add the following to the class_transformer section of your newrelic.yml settings: common: &default_settings class_transformer: # Disable all Akka instrumentations com.newrelic.instrumentation.akka-2.0: enabled: false com.newrelic.instrumentation.akka-2.1: enabled: false # Disabling 2.2 also disables higher versions com.newrelic.instrumentation.akka-2.2: enabled: false # Disable all Netty instrumentations com.newrelic.instrumentation.netty-3.4: enabled: false com.newrelic.instrumentation.netty-3.8: enabled: false com.newrelic.instrumentation.netty-4.0.0: enabled: false com.newrelic.instrumentation.netty-4.0.8: enabled: false # Disable all Play 2 instrumentations com.newrelic.instrumentation.play-2.1: enabled: false com.newrelic.instrumentation.play-2.2: enabled: false com.newrelic.instrumentation.play-2.3: enabled: false # New in Release 3.22, the Play 2.4 instrumentation does not respect # the older play2_instrumentation configuration setting com.newrelic.instrumentation.play-2.4: enabled: false # Disable all Scala-language instrumentations com.newrelic.instrumentation.scala-2.9.3: enabled: false Copy The pre-3.22 instrumentation names will be respected for a time, but they will be removed in future releases. If disabled by either the old or new instrumentation configuration, the instrumentation will be disabled. Check for deprecated configuration settings Any use of the pre-3.22 instrumentation names will be logged with messages similar to: INFO: Using deprecated configuration setting akka_instrumentation for instrumentation com.newrelic.instrumentation.akka-2.2 Copy OR INFO: The configuration setting akka_instrumentation is deprecated, please update the class_transformer config to use com.newrelic.instrumentation.akka-2.2 instead Copy Using the deprecated settings does not indicate the deprecated instrumentation has been loaded or is being used. These messages are hints to the user that it is time to update your configuration settings. Play 2.4 does not respect the older play2_instrumentation configuration settings, as it is a new instrumentation. In all cases, if you are using Java agent version 3.22 or higher, you should use the new instrumentation names for the Scala, Netty, Akka, and Play 2 framework in their newrelic.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.65371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable Scala, Netty, Akka, and Play 2 <em>Instrumentation</em>",
        "sections": "<em>Java</em> <em>agent</em> versions 3.21 or lower",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "This document describes how to disable <em>Java</em> <em>agent</em> <em>instrumentation</em> on these popular <em>async</em> frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this <em>instrumentation</em> if you find that the metrics reported aren&#x27;t valuable to you, or if the <em>instrumentation</em> incurs more overhead"
      },
      "id": "6043f28428ccbc13812c6062"
    }
  ],
  "/docs/agents/java-agent/async-instrumentation/java-agent-api-asynchronous-applications": [
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-10-01T13:40:11Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74723,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot <em>Java</em> <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "If you are having problems using the <em>Java</em> <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    },
    {
      "sections": [
        "Introduction to Java async instrumentation",
        "Asynchronous operations",
        "Async and thread-switching",
        "Async and response time",
        "Custom instrumentation with the async API"
      ],
      "title": "Introduction to Java async instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "3b0a9e1f2f6b69a8ad101ec59c592ac4a574ae63",
      "image": "https://docs.newrelic.com/static/a38112969f7c8a3001651b65853a803b/39c09/sZ6-I4x5BDSDspRS_G7Hefg.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/introduction-java-async-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java includes a set of API methods for custom instrumentation of asynchronous activity. This is most useful to instrument asynchronous activity in unsupported frameworks, but you can also use the API to add additional instrumentation to supported frameworks. This document explains how asynchronous activity occurs, and how New Relic monitors async work. Asynchronous operations With a synchronous programming model, programming tasks are usually executed in a specific order. One task must complete before the next task begins, and each task blocks the next task from completing. Asynchronous programming uses a non-blocking model, so that tasks can be run in parallel. Tasks executed asynchronously are completely independent of each other in their execution and initialization. Because asynchronous code doesn't execute in a specific order, the server's full processing power can be used more efficiently, and the app's throughput increases. Async and thread-switching For applications that use asynchronous processing, thread-switching is when a program or task switches from one thread to another. Understanding these asynchronous interleavings can help you decide which methods should be instrumented. Here is an example method with a controller that makes external requests in parallel. These requests execute asynchronously, so each request executes independently of each other and getScoreAsync() returns immediately after being called. This allows the requesting thread to continue making requests while getScoreAsync() makes an external call and sends a reply. @ResponseBody @RequestMapping(\"getScores\", method = RequestMethod.Get produces = “text/plain”) public String getCreditScores(@RequestParam(name = \"uids\") uids) { return Arrays.stream(uids.split(\",\")) .parallel() .map(Integer::valueOf) .map(uid -> getScoreAsync(uid)) .collect(Collectors.toList());} Copy Some of these requests will finish before others. Some might even finish after the requesting thread has moved on to other tasks: With New Relic's asynchronous instrumentation, the APM UI flags the work as Async. For example, if the above method were instrumented by New Relic (either automatically or via custom instrumentation), this is what the APM UI would show on the Trace details page: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: When asynchronous activity in a Java application is detected by APM, it is indicated with the Async flag in the Drilldown column. Async and response time Response time is defined as the duration of a transaction from the perspective of the requester. For asynchronous applications, the response time is often less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Because tasks can be deferred, the application can take advantage of its limited resources and process things more quickly. The chart's response time line gives you more insight into the perceived behavior and speed of your application than does the total web transaction time: one.newrelic.com > APM > (select an app) > Summary: On the APM Summary page, asynchronous activity in a Java app can result in the response time (the blue line) being less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Custom instrumentation with the async API To implement custom instrumentation of async work, see the Java agent async API guide. For general information on how to use the Java agent API, see Java agent API guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "sections": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " transaction time. This is because the methods don&#x27;t have to wait for all preceding methods to complete before returning. Custom <em>instrumentation</em> with the <em>async</em> API To implement custom <em>instrumentation</em> of <em>async</em> work, see the <em>Java</em> <em>agent</em> <em>async</em> API guide. For general information on how to use the <em>Java</em> <em>agent</em> API, see <em>Java</em> <em>agent</em> API guide."
      },
      "id": "603eb491e7b9d282bd2a07ca"
    },
    {
      "sections": [
        "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
        "Contents",
        "Java agent versions 3.21 or lower",
        "Java agent versions 3.22 or higher",
        "Check for deprecated configuration settings"
      ],
      "title": "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7a6fa946f9f903c240099279d125807b89665668",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/disable-scala-netty-akka-play-2-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document describes how to disable Java agent instrumentation on these popular async frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this instrumentation if you find that the metrics reported aren't valuable to you, or if the instrumentation incurs more overhead than you would like. If you selectively disable some of the instrumentation, some segments of activity will not be reported and your total time will be understated. Contents Java agent versions 3.21 or lower If you are using Java agent version 3.22 or lower, add the following to the class_transformer section of your newrelic.yml settings: # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings class_transformer: akka_instrumentation: enabled: false netty_instrumenation: enabled: false play2_instrumentation: enabled: false scala_instrumentation: enabled: false Copy Java agent versions 3.22 or higher The older Scala, Netty, Akka, and Play 2 Framework instrumentation configuration names have been deprecated as of Java Agent version 3.22. For those using Java Agent 3.22 or higher, add the following to the class_transformer section of your newrelic.yml settings: common: &default_settings class_transformer: # Disable all Akka instrumentations com.newrelic.instrumentation.akka-2.0: enabled: false com.newrelic.instrumentation.akka-2.1: enabled: false # Disabling 2.2 also disables higher versions com.newrelic.instrumentation.akka-2.2: enabled: false # Disable all Netty instrumentations com.newrelic.instrumentation.netty-3.4: enabled: false com.newrelic.instrumentation.netty-3.8: enabled: false com.newrelic.instrumentation.netty-4.0.0: enabled: false com.newrelic.instrumentation.netty-4.0.8: enabled: false # Disable all Play 2 instrumentations com.newrelic.instrumentation.play-2.1: enabled: false com.newrelic.instrumentation.play-2.2: enabled: false com.newrelic.instrumentation.play-2.3: enabled: false # New in Release 3.22, the Play 2.4 instrumentation does not respect # the older play2_instrumentation configuration setting com.newrelic.instrumentation.play-2.4: enabled: false # Disable all Scala-language instrumentations com.newrelic.instrumentation.scala-2.9.3: enabled: false Copy The pre-3.22 instrumentation names will be respected for a time, but they will be removed in future releases. If disabled by either the old or new instrumentation configuration, the instrumentation will be disabled. Check for deprecated configuration settings Any use of the pre-3.22 instrumentation names will be logged with messages similar to: INFO: Using deprecated configuration setting akka_instrumentation for instrumentation com.newrelic.instrumentation.akka-2.2 Copy OR INFO: The configuration setting akka_instrumentation is deprecated, please update the class_transformer config to use com.newrelic.instrumentation.akka-2.2 instead Copy Using the deprecated settings does not indicate the deprecated instrumentation has been loaded or is being used. These messages are hints to the user that it is time to update your configuration settings. Play 2.4 does not respect the older play2_instrumentation configuration settings, as it is a new instrumentation. In all cases, if you are using Java agent version 3.22 or higher, you should use the new instrumentation names for the Scala, Netty, Akka, and Play 2 framework in their newrelic.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.65371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable Scala, Netty, Akka, and Play 2 <em>Instrumentation</em>",
        "sections": "<em>Java</em> <em>agent</em> versions 3.21 or lower",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "This document describes how to disable <em>Java</em> <em>agent</em> <em>instrumentation</em> on these popular <em>async</em> frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this <em>instrumentation</em> if you find that the metrics reported aren&#x27;t valuable to you, or if the <em>instrumentation</em> incurs more overhead"
      },
      "id": "6043f28428ccbc13812c6062"
    }
  ],
  "/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation": [
    {
      "sections": [
        "Java agent API for asynchronous applications",
        "Async tracking tools: Tokens and segments",
        "Tokens: Connect async threads",
        "1. Start a transaction, then create and expire a token",
        "2. Mark a transaction as async and link to request thread",
        "3. View your async trace in the New Relic UI",
        "Tip",
        "Segments: Time arbitrary async activity",
        "1. Create a transaction and call an external service",
        "2. Start a segment, report externals, and end the segment"
      ],
      "title": "Java agent API for asynchronous applications",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7b5f035809040487d96279fb318203b479a61b02",
      "image": "https://docs.newrelic.com/static/06c87505ee5c0d97e598d04258587f52/c1b63/Screen-Shot-2017-03-14-at-4.50.31-PM.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/java-agent-api-asynchronous-applications/",
      "published_at": "2021-10-01T13:39:06Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java (agent version 3.37 or higher) includes an API to instrument asynchronous activity. For supported frameworks, the agent usually instruments async work automatically. However, the async API can still be useful to add detail. This document provides examples of using tokens and segments to instrument your app. For more information about how New Relic instruments and displays async work in the APM UI, see Monitoring considerations for asynchronous applications. For details on the actual classes and methods, see the Javadoc. For general information on the Java agent API, see the Java agent API guide. For troubleshooting common problems, see Troubleshooting Java asynchronous applications. Async tracking tools: Tokens and segments The Java agent API provides two ways to trace asynchronous activity: Tokens: Tokens are passed between threads to link asynchronous units of work to a specific transaction. They do not perform any timing directly. Segments: Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. Segments are typically used to track external calls that are completed by a callback mechanism. Tokens: Connect async threads Use tokens to link arbitrary units of work that are on separate threads. This section describes how to use the token-related calls together to instrument async work. For detailed information on classes and methods, see the Javadoc. To use tokens, you first need to create the token, then link another call to the originating transaction. You should link the token as soon as possible within the other call. If you do not link the token immediately, you risk losing any methods that contain an @Trace below the call you are trying to link. You can also expire the token in the original call. The Java agent will then link the work in the New Relic UI. These examples illustrate how to use the token-related calls together: 1. Start a transaction, then create and expire a token Consider the method parallelStream() in the code snippet below. Because some of the calls to requestItemAsync() will occur on a separate thread, a token is created and passed to link that asynchronous work back to the requesting thread. /** * Example showing multi-threaded implementation of requesting data using a parallel {@link Stream}. */ @RequestMapping(\"parallel_stream\") @Trace(dispatcher = true) // starts a transaction public ResponseEntity<String> parallelStream(@RequestParam(\"ids\") List<Long> ids) { final Token token = NewRelic.getAgent().getTransaction(). getToken() ; List<item> results = ids .parallelStream() .map(id -> requestItemAsync\\(id, token)) // note we're calling a different method than parallelStreamBad .filter(item -> item != null) .collect(Collectors.toList()); token.expire() ; return formattedResponse(\"parallel_stream\", results); } Copy The agent API calls in this sample are: @Trace(dispatcher = true): Tells the agent to start a transaction. For more on this method, see the Javadoc. getToken(): Creates the token which will link the work together. For more on this method, see the Javadoc. token.expire(): Expires the token. This allows the transaction to end. For more on this method, see the Javadoc. 2. Mark a transaction as async and link to request thread The following code example shows requestItemAsync, which might execute on a separate thread from the requesting thread. For this reason, the token that was created in the previous code example is linked to the Transaction in requestItemAsync. Note that requestItemAsync() has the @Trace(async=true) annotation, which tells the agent to trace this method if it's linked to an existing transaction. After parallelStream() collects all results, the token is expired. This is important because it makes sure the transaction doesn't stay open after parallelStream() completes. @Trace(async = true) private Item requestItemAsync(long id, Token token) { token.link() ; return requestItem(id); } Copy The agent API calls in this sample are: @Trace(async = true): Starts a transaction. For more on this method, see the Javadoc. token.link(): Links the work being done in requestItemAsync() (which is executing on a different thread) to the requesting thread. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI Here's an example of a transaction trace in the APM UI for this endpoint: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: All asynchronous method calls linked with a token are indicated with an Async icon. All asynchronous method calls linked with a token are indicated with an Async icon in the Drilldown column. It's not necessary to link methods that are on the same thread, but doing so will have no negative effect. It's often the case that a single token can be shared, like in the parallelStream() example. Tip By default, a transaction can create a maximum of 3000 tokens and each token has a default timeout of 180s. You can change the former limit with the token_limit config option and the latter with the token_timeout config option. Traces for transactions that exceed the token_limit will contain a token_clamp attribute. Increasing either config option may increase agent memory usage. Segments: Time arbitrary async activity Segments are used to measure an arbitrary piece of asynchronous application code, not necessarily associated with a method or thread. This is most commonly used to time connections to external services. Use segments if you want to: Time code that completes via a callback Time an asynchronous call that spans many methods Measure the time between when work is created and when it executed (for example, in a thread pool) 1. Create a transaction and call an external service The method below makes a call to an external service (in this case a database) using the method storeItem(): /** * Example showing single threaded implementation of inserting data into a datasource. */ @RequestMapping(\"insert\") @Trace(dispatcher = true) //starts a transaction public ResponseEntity insert(@RequestParam(\"id\") Long id) { if (id != null) { storeItem(id); return new ResponseEntity<>(\"insert\", HttpStatus.OK); } else { return new ResponseEntity<>(\"insert\", HttpStatus.BAD_REQUEST); } } Copy The goal in this case it to find out how long the Callable in the Lambda statement is waiting in the thread pool before executing, rather than determining how long storeItem() runs. For this reason, a segment is used instead of a token, and @Trace(async = true) is not necessary like it was for a token. The agent API call in this sample is: @Trace(dispatcher = true): Starts a transaction. For more on this method, see the Javadoc. 2. Start a segment, report externals, and end the segment The following code example shows a segment starting in the storeItem method to measure how long the Lambda statement is waiting in the thread pool. To stop timing the segment, you must call either .end() or .ignore(). If you don't want to report the segment as part of its parent transaction, call .ignore(). Otherwise, to report the segment as part of its parent transaction, call .end(). private void storeItem(long id) { Segment segment = NewRelic.getAgent().getTransaction(). startSegment(\"storeItem\") ; segment. reportAsExternal (DatastoreParameters .product(\"H2\") .collection(null) .operation(\"insert\") .instance(\"localhost\", 8080) .databaseName(\"test\") .build()); // fire and forget DB_POOL.submit(() -> { segment.end(); insertData(id); }); } Copy The agent API calls in this sample are: startSegment(...): Begins the segment that will time the code. For more on this method, see the Javadoc. reportAsExternal(DatastoreParameters()): Associates the time with a datastore external call This will show up in APM with datastore data. For more information, see reportAsExternal API. segment.end(): Stops timing this segment. For more on this method, see the Javadoc. 3. View your async trace in the New Relic UI When the method completes, APM displays a transaction trace with one external call: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: A single asynchronous segment is called out in the Drilldown column. Tip By default, the agent can track a maximum of 1000 segments during a given transaction. You can change this limit with the segment_timeout config option. Traces of transactions that exceed this limit will contain a segment_clamp attribute. Increasing this limit may increase agent memory usage.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "sections": "<em>Java</em> <em>agent</em> API for <em>asynchronous</em> applications",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic for <em>Java</em> (<em>agent</em> version 3.37 or higher) includes an API to <em>instrument</em> asynchronous activity. For supported frameworks, the <em>agent</em> usually instruments <em>async</em> work automatically. However, the <em>async</em> API can still be useful to add detail. This document provides examples of using tokens"
      },
      "id": "603eb4c9196a67dde5a83db7"
    },
    {
      "sections": [
        "Introduction to Java async instrumentation",
        "Asynchronous operations",
        "Async and thread-switching",
        "Async and response time",
        "Custom instrumentation with the async API"
      ],
      "title": "Introduction to Java async instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "3b0a9e1f2f6b69a8ad101ec59c592ac4a574ae63",
      "image": "https://docs.newrelic.com/static/a38112969f7c8a3001651b65853a803b/39c09/sZ6-I4x5BDSDspRS_G7Hefg.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/introduction-java-async-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-16T09:00:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Java includes a set of API methods for custom instrumentation of asynchronous activity. This is most useful to instrument asynchronous activity in unsupported frameworks, but you can also use the API to add additional instrumentation to supported frameworks. This document explains how asynchronous activity occurs, and how New Relic monitors async work. Asynchronous operations With a synchronous programming model, programming tasks are usually executed in a specific order. One task must complete before the next task begins, and each task blocks the next task from completing. Asynchronous programming uses a non-blocking model, so that tasks can be run in parallel. Tasks executed asynchronously are completely independent of each other in their execution and initialization. Because asynchronous code doesn't execute in a specific order, the server's full processing power can be used more efficiently, and the app's throughput increases. Async and thread-switching For applications that use asynchronous processing, thread-switching is when a program or task switches from one thread to another. Understanding these asynchronous interleavings can help you decide which methods should be instrumented. Here is an example method with a controller that makes external requests in parallel. These requests execute asynchronously, so each request executes independently of each other and getScoreAsync() returns immediately after being called. This allows the requesting thread to continue making requests while getScoreAsync() makes an external call and sends a reply. @ResponseBody @RequestMapping(\"getScores\", method = RequestMethod.Get produces = “text/plain”) public String getCreditScores(@RequestParam(name = \"uids\") uids) { return Arrays.stream(uids.split(\",\")) .parallel() .map(Integer::valueOf) .map(uid -> getScoreAsync(uid)) .collect(Collectors.toList());} Copy Some of these requests will finish before others. Some might even finish after the requesting thread has moved on to other tasks: With New Relic's asynchronous instrumentation, the APM UI flags the work as Async. For example, if the above method were instrumented by New Relic (either automatically or via custom instrumentation), this is what the APM UI would show on the Trace details page: one.newrelic.com > APM > (select an app) > Transactions > Transaction trace > Trace details: When asynchronous activity in a Java application is detected by APM, it is indicated with the Async flag in the Drilldown column. Async and response time Response time is defined as the duration of a transaction from the perspective of the requester. For asynchronous applications, the response time is often less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Because tasks can be deferred, the application can take advantage of its limited resources and process things more quickly. The chart's response time line gives you more insight into the perceived behavior and speed of your application than does the total web transaction time: one.newrelic.com > APM > (select an app) > Summary: On the APM Summary page, asynchronous activity in a Java app can result in the response time (the blue line) being less than the total transaction time. This is because the methods don't have to wait for all preceding methods to complete before returning. Custom instrumentation with the async API To implement custom instrumentation of async work, see the Java agent async API guide. For general information on how to use the Java agent API, see Java agent API guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.74717,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "sections": "Introduction to <em>Java</em> <em>async</em> <em>instrumentation</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " transaction time. This is because the methods don&#x27;t have to wait for all preceding methods to complete before returning. Custom <em>instrumentation</em> with the <em>async</em> API To implement custom <em>instrumentation</em> of <em>async</em> work, see the <em>Java</em> <em>agent</em> <em>async</em> API guide. For general information on how to use the <em>Java</em> <em>agent</em> API, see <em>Java</em> <em>agent</em> API guide."
      },
      "id": "603eb491e7b9d282bd2a07ca"
    },
    {
      "sections": [
        "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
        "Contents",
        "Java agent versions 3.21 or lower",
        "Java agent versions 3.22 or higher",
        "Check for deprecated configuration settings"
      ],
      "title": "Disable Scala, Netty, Akka, and Play 2 Instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "7a6fa946f9f903c240099279d125807b89665668",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/disable-scala-netty-akka-play-2-instrumentation/",
      "published_at": "2021-10-01T13:37:55Z",
      "updated_at": "2021-03-13T02:45:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document describes how to disable Java agent instrumentation on these popular async frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this instrumentation if you find that the metrics reported aren't valuable to you, or if the instrumentation incurs more overhead than you would like. If you selectively disable some of the instrumentation, some segments of activity will not be reported and your total time will be understated. Contents Java agent versions 3.21 or lower If you are using Java agent version 3.22 or lower, add the following to the class_transformer section of your newrelic.yml settings: # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings class_transformer: akka_instrumentation: enabled: false netty_instrumenation: enabled: false play2_instrumentation: enabled: false scala_instrumentation: enabled: false Copy Java agent versions 3.22 or higher The older Scala, Netty, Akka, and Play 2 Framework instrumentation configuration names have been deprecated as of Java Agent version 3.22. For those using Java Agent 3.22 or higher, add the following to the class_transformer section of your newrelic.yml settings: common: &default_settings class_transformer: # Disable all Akka instrumentations com.newrelic.instrumentation.akka-2.0: enabled: false com.newrelic.instrumentation.akka-2.1: enabled: false # Disabling 2.2 also disables higher versions com.newrelic.instrumentation.akka-2.2: enabled: false # Disable all Netty instrumentations com.newrelic.instrumentation.netty-3.4: enabled: false com.newrelic.instrumentation.netty-3.8: enabled: false com.newrelic.instrumentation.netty-4.0.0: enabled: false com.newrelic.instrumentation.netty-4.0.8: enabled: false # Disable all Play 2 instrumentations com.newrelic.instrumentation.play-2.1: enabled: false com.newrelic.instrumentation.play-2.2: enabled: false com.newrelic.instrumentation.play-2.3: enabled: false # New in Release 3.22, the Play 2.4 instrumentation does not respect # the older play2_instrumentation configuration setting com.newrelic.instrumentation.play-2.4: enabled: false # Disable all Scala-language instrumentations com.newrelic.instrumentation.scala-2.9.3: enabled: false Copy The pre-3.22 instrumentation names will be respected for a time, but they will be removed in future releases. If disabled by either the old or new instrumentation configuration, the instrumentation will be disabled. Check for deprecated configuration settings Any use of the pre-3.22 instrumentation names will be logged with messages similar to: INFO: Using deprecated configuration setting akka_instrumentation for instrumentation com.newrelic.instrumentation.akka-2.2 Copy OR INFO: The configuration setting akka_instrumentation is deprecated, please update the class_transformer config to use com.newrelic.instrumentation.akka-2.2 instead Copy Using the deprecated settings does not indicate the deprecated instrumentation has been loaded or is being used. These messages are hints to the user that it is time to update your configuration settings. Play 2.4 does not respect the older play2_instrumentation configuration settings, as it is a new instrumentation. In all cases, if you are using Java agent version 3.22 or higher, you should use the new instrumentation names for the Scala, Netty, Akka, and Play 2 framework in their newrelic.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.65371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable Scala, Netty, Akka, and Play 2 <em>Instrumentation</em>",
        "sections": "<em>Java</em> <em>agent</em> versions 3.21 or lower",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "This document describes how to disable <em>Java</em> <em>agent</em> <em>instrumentation</em> on these popular <em>async</em> frameworks: Scala Netty Akka Play 2 You may choose to disable some or all of this <em>instrumentation</em> if you find that the metrics reported aren&#x27;t valuable to you, or if the <em>instrumentation</em> incurs more overhead"
      },
      "id": "6043f28428ccbc13812c6062"
    }
  ],
  "/docs/agents/java-agent/attributes/java-agent-attributes": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.00371,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " server&#x2F;identifier <em>attributes</em> on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the <em>Java</em> <em>agent</em> on a variety of hosting services, including ones"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.253265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.9837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> configuration: Config file",
        "sections": "<em>Java</em> <em>agent</em> configuration: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to <em>Java</em> <em>agent</em> version 7.0.0 or higher. <em>Attributes</em> To set these options, use the <em>attributes</em>"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/java-agent/configuration/automatic-application-naming": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.5364,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.96333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.97826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/configuration/configuring-your-ssl-certificates": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.53635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.9633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.97818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/configuration/hostname-logic-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.53635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.9633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.97818,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/configuration/java-agent-config-file-template": [
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.96328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.9781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Hostname logic in Java",
        "Display names",
        "Tip",
        "Instance names",
        "Hostname logic precedence",
        "Hosts and unique agent identifiers",
        "For more help"
      ],
      "title": "Hostname logic in Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "32a9b875cf20d27be147a4ca29b749f1612d94e2",
      "image": "https://docs.newrelic.com/static/026e7b6f7910842deb3f7c1960cad008/9e32a/upload.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/hostname-logic-java/",
      "published_at": "2021-10-01T13:41:19Z",
      "updated_at": "2021-09-14T09:17:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Java agent automatically assigns a host:port name to your JVMs. If the default name is not useful, you can set a display name to distinguish your JVMs in the New Relic UI. For supported frameworks, the Java agent uses the instance name instead of the display name. The Java agent uniquely identifies running agents by their host, port, and dispatcher, regardless of the environment used. Display names If the default host:port label in the APM UI is not useful, you can decorate that name in the New Relic UI with a display name. Set the display name via configuration, either in an environment variable or in your newrelic.yml config file. The environment variable takes precedence over the config file value. After the JVM is restarted and the Java agent is reporting again , the display name will show in the JVM list as seen in the example below in addition to host:port. To set a display name: Set the NEW_RELIC_PROCESS_HOST_DISPLAY_NAME environment variable. OR Set process_host.display_name in your newrelic.yml. Restart your JVM to see your changes in the New Relic UI. Tip You can also set the display name with a system property. Instance names For WebSphere and WebLogic users, the Java agent also reports the instance name for each active app server instance, which is visible in the APM Settings > Environment page. Generally, this name is provided by the app server. If an instance name is set, it will be used instead of the display name in the New Relic UI. Hostname logic precedence If there are multiple hostname settings (for example, you use WebSphere and also set the display_name property), the agent uses this precedence: display_name overrides the default name, and the WebSphere and WebLogic instance names. WebSphere and WebLogic instance names override the default name. The default (host:port) name has lowest precedence. Hosts and unique agent identifiers The Java agent uses hosts, ports, and dispatchers to uniquely identify multiple JVMs reporting to the same app name. Multiple agents running on the same server are therefore reported separately, as long as their ports or dispatcher names differ. The unique identifier is based on the following values: Host: An identifier for your app's parent server that is derived from the Operating System. This value is not configurable by the Java agent. Port: The port associated with the app server. If the agent can't determine the port number, or your app is not running in an app server, defaults to 0. This value is user-configurable. Dispatcher Name: The name of the app server. For example, Apache Tomcat, Glassfish, or WebLogic. If there is no active app server, defaults to Unknown. For more help Additional documentation resources include: Setting the hostname reported by the Java agent (manually overriding the hostname settings when the link between your APM app and Servers for Linux is broken) Add, rename, and remove hosts (add and remove hosts in APM)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.653786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Hostname logic in <em>Java</em>",
        "sections": "Hostname logic in <em>Java</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " name. The default (host:port) name has lowest precedence. Hosts and unique <em>agent</em> identifiers The <em>Java</em> <em>agent</em> uses hosts, ports, and dispatchers to uniquely identify multiple JVMs reporting to the same app name. Multiple <em>agents</em> running on the same server are therefore reported separately, as long"
      },
      "id": "6043cfbb64441ff20b378f0b"
    }
  ],
  "/docs/agents/java-agent/configuration/java-agent-configuration-config-file": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.53629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.9781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Hostname logic in Java",
        "Display names",
        "Tip",
        "Instance names",
        "Hostname logic precedence",
        "Hosts and unique agent identifiers",
        "For more help"
      ],
      "title": "Hostname logic in Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "32a9b875cf20d27be147a4ca29b749f1612d94e2",
      "image": "https://docs.newrelic.com/static/026e7b6f7910842deb3f7c1960cad008/9e32a/upload.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/hostname-logic-java/",
      "published_at": "2021-10-01T13:41:19Z",
      "updated_at": "2021-09-14T09:17:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Java agent automatically assigns a host:port name to your JVMs. If the default name is not useful, you can set a display name to distinguish your JVMs in the New Relic UI. For supported frameworks, the Java agent uses the instance name instead of the display name. The Java agent uniquely identifies running agents by their host, port, and dispatcher, regardless of the environment used. Display names If the default host:port label in the APM UI is not useful, you can decorate that name in the New Relic UI with a display name. Set the display name via configuration, either in an environment variable or in your newrelic.yml config file. The environment variable takes precedence over the config file value. After the JVM is restarted and the Java agent is reporting again , the display name will show in the JVM list as seen in the example below in addition to host:port. To set a display name: Set the NEW_RELIC_PROCESS_HOST_DISPLAY_NAME environment variable. OR Set process_host.display_name in your newrelic.yml. Restart your JVM to see your changes in the New Relic UI. Tip You can also set the display name with a system property. Instance names For WebSphere and WebLogic users, the Java agent also reports the instance name for each active app server instance, which is visible in the APM Settings > Environment page. Generally, this name is provided by the app server. If an instance name is set, it will be used instead of the display name in the New Relic UI. Hostname logic precedence If there are multiple hostname settings (for example, you use WebSphere and also set the display_name property), the agent uses this precedence: display_name overrides the default name, and the WebSphere and WebLogic instance names. WebSphere and WebLogic instance names override the default name. The default (host:port) name has lowest precedence. Hosts and unique agent identifiers The Java agent uses hosts, ports, and dispatchers to uniquely identify multiple JVMs reporting to the same app name. Multiple agents running on the same server are therefore reported separately, as long as their ports or dispatcher names differ. The unique identifier is based on the following values: Host: An identifier for your app's parent server that is derived from the Operating System. This value is not configurable by the Java agent. Port: The port associated with the app server. If the agent can't determine the port number, or your app is not running in an app server, defaults to 0. This value is user-configurable. Dispatcher Name: The name of the app server. For example, Apache Tomcat, Glassfish, or WebLogic. If there is no active app server, defaults to Unknown. For more help Additional documentation resources include: Setting the hostname reported by the Java agent (manually overriding the hostname settings when the link between your APM app and Servers for Linux is broken) Add, rename, and remove hosts (add and remove hosts in APM)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.653786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Hostname logic in <em>Java</em>",
        "sections": "Hostname logic in <em>Java</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " name. The default (host:port) name has lowest precedence. Hosts and unique <em>agent</em> identifiers The <em>Java</em> <em>agent</em> uses hosts, ports, and dispatchers to uniquely identify multiple JVMs reporting to the same app name. Multiple <em>agents</em> running on the same server are therefore reported separately, as long"
      },
      "id": "6043cfbb64441ff20b378f0b"
    }
  ],
  "/docs/agents/java-agent/configuration/java-agent-error-configuration": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.53629,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.96328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.9781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/configuration/name-your-java-application": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.53622,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>configuration</em>&#x2F;<em>java</em>-<em>agent</em>-<em>configuration</em>-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.96326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "sections": "<em>Java</em> <em>agent</em> <em>configuration</em>: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its <em>configuration</em> from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.978035,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For <em>configuration</em> options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/circuit-breaker-java-custom-instrumentation": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71223,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/custom-instrumentation-editor-instrument-ui": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/custom-jmx-yaml-examples": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/java-agent-custom-jmx-instrumentation-yaml": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/java-custom-instrumentation": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/java-instrumentation-xml": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.96707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    },
    {
      "sections": [
        "Custom JMX YAML examples",
        "Contents",
        "YAML example",
        "Example explanation",
        "Properties",
        "MBeans",
        "Attributes",
        "Type",
        "Metric names",
        "Tip",
        "Finding object and attribute names",
        "For more help"
      ],
      "title": "Custom JMX YAML examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "38e6f21e2a3344f554072dff9919df049db60224",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/custom-jmx-yaml-examples/",
      "published_at": "2021-10-01T13:44:32Z",
      "updated_at": "2021-03-16T13:47:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is an example of a custom JMX YAML file for New Relic's Java agent, including value and definition, MBean, attributes, type, and names for metrics, objects, and attributes. For more information, including a video, see Custom JMX monitoring by YAML. Contents YAML example Here is an example of a custom JMX YAML file. YAML files are space senstive. name: TomcatCustom version: 1.0 enabled: true jmx: - object_name: Catalina:type=Cache,host=localhost,path=/examples metrics: - attributes: accessCount, cacheSize, hitsCount type: simple - object_name: Catalina:type=Connector,port=8009 metrics: - attributes: bufferSize, maxHeaderCount - object_name: java.nio:type=BufferPool,name=* metrics: - attributes: Count type: monotonically_increasing Copy Example explanation Properties Value Definition name A descriptive name identifying your YAML custom instrumentation file, using one space before the property name. In the above example, the name is TomcatCustom. version The version of the extension file. Use a double. If two extensions have the same name, only the extension with the highest version will be used. Use one space before the property version. In the above example, the version is 1.0. enabled If true, the Java agent will read the extension. If false, the Java agent will ignore the extension. Use one space before the property enabled. The above example is enabled. MBeans Each line in the YAML starting with - object_name represents an MBean. For example, the following lines describe the information to be pulled from the first MBean: - object_name: Catalina:type=Cache,host=localhost,path=/examples metrics: - attributes: accessCount, cacheSize, hitsCount type: simple Copy The object_name property itself can match one or more MBeans. For example, the line below only matches one MBean: - object_name: Catalina:type=Cache,host=localhost,path=/examples Copy The following line could match multiple MBeans: - object_name: java.nio:type=BufferPool,name=* Copy The asterisk ( * ) wildcard can only be used with JDK 1.6 and higher. The three MBeans listed in the above example have the following object names: Catalina:type=Cache,host=localhost,path=/examples Catalina:type=Connector,port=8009 java.nio:type=BufferPool,name=* Copy Attributes The JMX example retrieves six different attributes from the three MBeans. New Relic's Java agent pulls these attributes from the first MBean: accessCount cacheSize hitsCount The agent pulls these attributes from the second MBean: bufferSize maxHeaderCount The agent pulls one attribute (Count) from third MBean. Type For type, use simple or monotonically_increasing. When type is not specified in the JMX YAML file, it defaults to monotonically_increasing. Value Definition simple The exact value of the attribute will be reported to New Relic each minute. monotonically_increasing The positive difference will be reported to New Relic each minute. In the example above, the attributes accessCount, cacheSize, and hitsCount will be reported as simple. The attributes bufferSize, maxHeaderCount, and Count will be reported as monotonically_increasing. If the hitsCount attribute value is always 5, then New Relic will report a 5 each minute. If the Count attribute value is always 5, then New Relic will report a 0 for the value each minute. If the Count attribute value changes from 5 to 7, then New Relic will report a 2 for that minute. Metric names When selecting custom dashboard metrics and not using the property root_metric_name, use the following format for all custom JMX metrics: JMX/beginning_of_object_name/type/any_properties_in_object_name/attribute_name Copy Tip Some object names do not include a type. In that case, a null will be present in the metric name. The configuration file does not use root_metric_name, so the following metrics will be created: JMX/Catalina/Cache/localhost/examples/accessCount JMX/Catalina/Cache/localhost/examples/cacheSize JMX/Catalina/Cache/localhost/examples/hitsCount JMX/Catalina/Connector/8009/bufferSize JMX/Catalina/Connector/8009/maxHeaderCount JMX/java.nio/BufferPool/direct/Count JMX/java.nio/BufferPool/mapped/Count Copy If you are using the property root_metric_name, then the metric will be your root metric name prefixed with JMX and followed by the attribute's name. You can use object name values by specifying the object name key in the root_metric_name between brackets {}. For example: Part of a configuration file: - object_name: Catalina:type=Cache,host=localhost,path=/examples root_metric_name: Tomcat/{host} metrics: - attributes: accessCount, cacheSize, hitsCount type: simple - object_name: mbean:type=Sample,host=localhost,path=* root_metric_name: SampleMBean metrics: - attributes: attOne, attTwo type: simple Copy Metric names: JMX/Tomcat/localhost/accessCount JMX/Tomcat/localhost/cacheSize JMX/Tomcat/localhost/hitsCount JMX/SampleMBean/attOne JMX/SampleMBean/attTwo Copy If an attribute does not actually exist on the MBean, then the metric will never appear in New Relic. Finding object and attribute names The easiest way to find available MBeans and its associated attributes is to use the JConsole instructions for JDK 1.6. For more help Additional documentation resources include: Custom instrumentation with the Java agent (method tracers, examples) Custom JMX monitoring by YAML (YAML file structure, value and definition)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.387596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> JMX YAML examples",
        "sections": "<em>Custom</em> JMX YAML examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " associated attributes is to use the JConsole instructions for JDK 1.6. For more help Additional documentation resources include: <em>Custom</em> <em>instrumentation</em> with the <em>Java</em> <em>agent</em> (method tracers, examples) <em>Custom</em> JMX monitoring by YAML (YAML file structure, value and definition)"
      },
      "id": "603eb76a196a67cba6a83db6"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/messaging-framework-instrumentation": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.967064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/custom-instrumentation/troubleshooting-java-custom-instrumentation": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.71198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.967064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Scala instrumentation",
        "Tip",
        "Scala frameworks",
        "Instrument Scala with the Scala API",
        "Important",
        "Use the Scala API",
        "Configure using the project/build.scala file",
        "Configure using the project/build.sbt file",
        "Segments",
        "Transactions",
        "Instrument Scala with the Java agent API",
        "More API functions",
        "Instrument Scala with XML instrumentation",
        "Additional instrumentation"
      ],
      "title": "Scala instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "7affd5ca652f6d59905d8cfc5ea4e6a57ffe793d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/frameworks/scala-installation-java/",
      "published_at": "2021-10-01T13:47:37Z",
      "updated_at": "2021-07-09T00:01:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent is compatible with Scala, and supports New Relic API calls, annotations, and custom instrumentation. All information below is supplemental to New Relic's Java agent installation directions. Tip For Heroku, see Java agent with Scala on Heroku. Scala frameworks If your framework is not natively supported by New Relic, or if you want to set up additional monitoring, custom instrumentation is a great way to dig deeper into your application. Instrument Scala with the Scala API The New Relic Scala agent API lets you control, customize, and extend the functionality of the APM Java agent using idiomatic Scala code. It can be used alongside the New Relic Java API as well as allow users to Create segments for synchronous and asynchronous anonymous functions Create segments for synchronous and asynchronous code blocks Create a transaction if one has not already been started Important For best results when using the API, ensure that you have the latest Java agent release. The New Relic Scala API requires Java agent 7.1.0 or higher. Use the Scala API To access the API class add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing S.V with the Scala version and X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing S.V with the Scala version and X.Y.Z with theJava agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-scala-api_S.V\" % \"X.Y.Z\" Copy Supported Scala versions are 2.10, 2.11, 2.12 and 2.13. Scala 3.0 users can use the 2.13 jar. The jar is deployed to Maven Central and it is also in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The underlying API methods are just stubs; the implementation is added when the Java agent is running. Segments To create segment for a synchronous code block use TraceOps.trace. For example: import com.newrelic.scala.api.TraceOps.trace trace(\"statement segment\") { val i = 1 val j = 2 println(i + j) } // trace can also be used as an expression val x: Int = trace(\"expression segment\") { val i = 1 val j = 2 i + j } println(x) // 2 Copy trace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.trace // implicit execution implicit val ec: ExecutionContext = ??? val x: Option[Int] = for { one <- trace(\"segment one\")(Option(1)) two <- trace(\"segment two\")(Option(one + 1)) three <- trace(\"segment three\")(Option(two + 1)) } yield three println(x) // Some(3) Copy If you want to create segment for an asynchronous code block containing a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the Future to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = asyncTrace(\"segment name\")(Future { Thread.sleep(5000) 1 }) x.foreach(println) // prints 1 on completion of Future Copy asyncTrace can also be used in Scala For comprehensions import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTrace // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three x.foreach(println) // prints 3 on completion of Future Copy If you want to create segment for a synchronous anonymous function use TraceOps.traceFun. For example: import com.newrelic.scala.api.TraceOps.traceFun val x: Option[Int] = Option(1) .map(traceFun(\"statement segment\")(i => i + 1)) println(x) //Some(2) Copy If you want to create segment for an asynchronous function that returns a Scala Future use TraceOps.asyncTrace. This will ensure the timing for the segment includes the time taken for the function to complete. In the example below segment time will be no less than 5 seconds due to the delay created in the wrapped Future. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.asyncTraceFun // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = Future(1) .flatMap(asyncTraceFun(\"statement segment\")(i => Future(i + 1))) x.foreach(println) // prints 2 on completion of Future Copy Transactions Transactions can be created using the TraceOps.txn method. For example: import com.newrelic.scala.api.TraceOps.txn txn { val i = 1 val j = 2 println(i + j) } Copy txn can be used as a statement (as above) or as an expression import com.newrelic.scala.api.TraceOps.txn val i: Int = txn(1 + 2) //transaction created println(i) // 3 Copy txn can be used with any of the TraceOp methods to create segments. The example below create a transaction with 3 segments. import scala.concurrent.{ExecutionContext, Future} import com.newrelic.scala.api.TraceOps.{txn, asyncTrace} // implicit execution implicit val ec: ExecutionContext = ??? val x: Future[Int] = txn( for { one <- asyncTrace(\"segment one\")(Future(1)) two <- asyncTrace(\"segment two\")(Future(one + 1)) three <- asyncTrace(\"segment three\")(Future(two + 1)) } yield three ) x.foreach(println) // prints 3 on completion of Future Copy Instrument Scala with the Java agent API Instrument Scala to use the New Relic API class or annotations. Add the following information to your Scala configuration file: Configure using the project/build.scala file Add the following line (replacing X.Y.Z with the Java agent version you use) to the appDependencies method in your application's project/build.scala file: \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Configure using the project/build.sbt file Add the following line (replacing X.Y.Z with the Java agent version you use) to your application's project/build.sbt file: libraryDependencies += \"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\" Copy Import the NewRelic class and use it in your application: import com.newrelic.api.agent.NewRelic ... NewRelic.setTransactionName(null, \"/myTransaction\"); Copy More API functions For more about the Java agent API and its functionality, see the Java agent API introduction. Instrument Scala with XML instrumentation XML instrumentation is available for any Scala application running with the Java agent. It allows instrumentation to be added without any changes to the code. For more information, see Java instrumentation by XML. Additional instrumentation If you use Kamon, take a look at the New Relic Kamon reporter.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.962456,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Scala <em>instrumentation</em>",
        "sections": "<em>Instrument</em> Scala with the <em>Java</em> <em>agent</em> API",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> is compatible with Scala, and supports New Relic API calls, annotations, and <em>custom</em> <em>instrumentation</em>. All information below is supplemental to New Relic&#x27;s <em>Java</em> <em>agent</em> installation directions. Tip For Heroku, see <em>Java</em> <em>agent</em> with Scala on Heroku. Scala frameworks If your"
      },
      "id": "6043b8bb196a671be4960f24"
    }
  ],
  "/docs/agents/java-agent/features/jvms-page-java-view-app-server-metrics-jmx": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.27032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ", including: <em>Java</em>, Scala, Kotlin, and Clojure. For instrumentation support for language-specific <em>features</em>, see the Automatically instrumented frameworks and libraries section below. <em>Java</em> version Compatible <em>agent</em> versions <em>Java</em> 5 <em>Agent</em> v1.3.0 to v2.21.7 <em>Java</em> 6 <em>Agent</em> v3.0.0 to v4.3.0 <em>Java</em> 7 <em>Agent</em> v3.0.0"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.4058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Real-time profiling for Java using JFR metrics",
        "Find performance bottlenecks",
        "JFR daemon",
        "Supported Java versions",
        "Requirements and Usage Instructions",
        "Important",
        "View your data",
        "Understand JVM cluster behavior over time",
        "JVM details",
        "Identify resource intensive code paths using flamegraphs"
      ],
      "title": "Real-time profiling for Java using JFR metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "e37ad20639884cbd94e3032b5b51788eb6d79618",
      "image": "https://docs.newrelic.com/static/d995a7d337779024851a421fcc95ad79/e5166/new-relic-one-java-flight-record-ui.jpg",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics/",
      "published_at": "2021-10-01T13:46:37Z",
      "updated_at": "2021-07-22T06:52:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's real-time profiling for Java using Java Flight Recorder (JFR) metrics, you can run continuous, always-on profiling of your Java code in production environments. The accompanying JVM cluster timeline view provides a fast and intuitive way to diagnose cluster-wide performance problems. For example, you can quickly see how an application’s deployment affects the overall health of the cluster. Find performance bottlenecks Troubleshooting performance bottlenecks in your Java application or service can help you better understand the following: Where you’re wasting resources When an incident occurs What happened during an incident What performance issues led up to an incident To make troubleshooting faster and easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. JFR daemon The JFR daemon is an exporter for JFR events which allows you to harness the power of the New Relic One platform for visualizing your JVM's behavior. Using the New Relic Java telemetry SDK as the underlying implementation, the JFR daemon converts JFR events into New Relic telemetry types and reports them to New Relic's metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic Java agent JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic Java agent. No additional setup is needed, simply install the Java agent, make sure that the JFR service is enabled, and JFR data will flow into the same APM application as the Java agent. Requires New Relic Java agent version 7.0.0+. Standalone process - Run the jfr-daemon as a standalone process and configure it to monitor an existing Java process using remote JMX. Standalone Java agent - Attach the jfr-daemon to your Java process as a Java agent. A lightweight alternative to the New Relic Java agent. Supported Java versions While the JFR daemon supports any version of Java 11 and above, we don't recommend using any non-LTS version of Java in production environments. Some vendors have backported JFR to their Java 8 binaries. For instance, OpenJDK backported JFR on version 8u262. The JFR daemon is compatible with those Java versions. Requirements and Usage Instructions Requirements and instructions vary for each usage scenario. For full details please see the links for your specific usage scenario: New Relic Java agent JFR service - Requirements, configuration, and usage instructions Standalone process - Requirements, configuration, and usage instructions Standalone Java agent - Requirements, configuration, and usage instructions Important Apps running with the JFR daemon should expect the JFR subsystem to use additional memory. View your data To view your data, go to one.newrelic.com > Explorer > (select service) > More Views > Realtime Profiling Java. Understand JVM cluster behavior over time The JVM cluster timeline view shows the JVM behavior across your entire cluster. This timeline enables quicker troubleshooting and issue detection; for example, at a glance you can see: How a recent deployment affected the rest of the JVM cluster When a JVM restarted How an individual instance was affected by its noisy neighbor To make troubleshooting easier, you need to see the high fidelity runtime characteristics of your code running on the JVM, and you need that data in real time. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java: The JVM cluster timeline view shows the JVM behavior across the cluster. Each row of the timeline represents a specific JVM over time. Inside each row, a box represents a 5-minute period of that JVM’s life. From least severe to most severe, yellow, orange, and red traffic lights indicate anomalous behavior for a JVM, so you can drill down into that instance and the right time period when investigating errors or other performance issues. Select How is JVM health determined? for a detailed breakdown of how JVM health is calculated. JVM details The details panel for each JVM provides several critical views: How resources are allocated within a process How garbage collection affects performance How to track garbage collection with logs How CPU is used one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM. Identify resource intensive code paths using flamegraphs Important The flamegraph feature is only compatible with the New Relic Java agent JFR service usage scenario. Use flamegraphs to identify the Java classes and methods that are most frequently executed in your application code. By using flamegraphs to optimize the hot spots in your code you can reduce resource consumption and increase your application’s overall performance. one.newrelic.com > Explorer > (select service) > Realtime Profiling Java > (select JVM): You can see details for each JVM, including flamegraphs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.40737,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Real-time profiling for <em>Java</em> using JFR metrics",
        "sections": "Real-time profiling for <em>Java</em> using JFR metrics",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "&#x27;s metric and event ingest APIs. There are three different usage scenarios for the JFR daemon: New Relic <em>Java</em> <em>agent</em> JFR service (RECOMMENDED) - JFR monitoring built into the flagship New Relic <em>Java</em> <em>agent</em>. No additional setup is needed, simply install the <em>Java</em> <em>agent</em>, make sure that the JFR service"
      },
      "id": "603e9db2e7b9d2a5432a07f5"
    }
  ],
  "/docs/agents/java-agent/features/real-time-profiling-java-using-jfr-metrics": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.27024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ", including: <em>Java</em>, Scala, Kotlin, and Clojure. For instrumentation support for language-specific <em>features</em>, see the Automatically instrumented frameworks and libraries section below. <em>Java</em> version Compatible <em>agent</em> versions <em>Java</em> 5 <em>Agent</em> v1.3.0 to v2.21.7 <em>Java</em> 6 <em>Agent</em> v3.0.0 to v4.3.0 <em>Java</em> 7 <em>Agent</em> v3.0.0"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.40576,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "JVMs page (Java): View app server metrics from JMX",
        "View JVM metrics",
        "Tabs available by app server",
        "Metrics available by tab",
        "Data source metrics by app server",
        "Enable for Spring Boot 2.2 and higher with Tomcat",
        "Enable WebSphere PMI metrics",
        "Enable all statistic sets (recommended)",
        "Enable custom statistic sets (advanced)",
        "Collected WebSphere PMI metrics",
        "stats.ActiveCount",
        "maximumSize",
        "stats.CommittedCount",
        "stats.RolledbackCount",
        "stats.GlobalTimeoutCount",
        "stats.LiveCount",
        "WebLogic JMX metrics",
        "Tip",
        "ThreadCount",
        "TotalStartedThreadCount",
        "LoadedClassCount",
        "UnloadedClassCount",
        "HoggingThreadCount",
        "ExecuteThreadIdleCount",
        "StandbyThreadCount",
        "TransactionTotalCount",
        "TransactionCommittedTotalCount",
        "TransactionRolledBackTotalCount",
        "TransactionAbandonedTotalCount",
        "NumAvailable",
        "CurrCapacity",
        "ConnectionsTotalCount",
        "ActiveConnectionsCurrentCount",
        "LeakedConnectionCount",
        "PrepStmtCacheCurrentSize",
        "WaitingForConnectionCurrentCount",
        "WaitingForConnectionTotal",
        "WaitingForConnectionSuccessTotal",
        "WaitingForConnectionFailureTotal",
        "AccessTotalCount - MissTotalCount",
        "MissTotalCount",
        "WaiterCurrentCount",
        "DestroyedTotalCount",
        "BeansInUseCurrentCount",
        "PooledBeansCurrentCount",
        "TransactionsCommittedTotalCount +TransactionsRolledBackTotalCount +TransactionsTimedOutTotalCount",
        "TransactionsCommittedTotalCount",
        "TransactionsRolledBackTotalCount",
        "TransactionsTimedOutTotalCount"
      ],
      "title": "JVMs page (Java): View app server metrics from JMX",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Features"
      ],
      "external_id": "da87ac2a630aa7d23dcfcd29838c92a0ec1b3ec3",
      "image": "https://docs.newrelic.com/static/9fc8aafbabec1473134b718135fdef74/c1b63/apm_jvm.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/features/jvms-page-java-view-app-server-metrics-jmx/",
      "published_at": "2021-10-01T13:47:38Z",
      "updated_at": "2021-03-16T04:31:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use New Relic's Java agent to collect and view additional metrics provided by the most common application servers via JMX. The collected metrics vary by app server and include measurements of thread pools, HTTP sessions, and transactions. View JVM metrics Application servers collect and report different metrics, which appear on APM's JVMs page. (For applications using New Relic via Heroku, the JVMs page is named Instances.) At a minimum, each app server collects and reports metric data on memory. For instructions on enabling JMX metrics, refer to your app server's documentation. To view JVM metrics: Go to one.newrelic.com > APM > (select an app) > Monitoring > JVMs > (select a JVM). From the selected JVM's Memory page, use any of New Relic's standard user interface functions to drill down into detailed information. To view other metrics, select any available tab. Optional: To use the thread profiler to look for bottlenecks in data on executing threads, select Profile this JVM. one.newrelic.com > APM > (select an app) > Monitoring > JVMs: Depending on the metrics your app server is reporting, one or more tabs appear on your JVM page. Tabs available by app server This table lists which tabs appear on the JVM page for app servers. If your app server does not report a particular type of metric data, the tab does not appear on your JVM page. App server Memory Thread pools HTTP sessions App server transactions Data sources Glassfish JBoss 5AS JBoss 6AS JBoss 6EAP JBoss 7AS Jetty Resin 3 Resin 4 Tomcat TomEE WebLogic Websphere Liberty Websphere Traditional WildFly Metrics available by tab Here is a summary of the metrics available from the JVM page. If the app server does not support a particular metric, that tab does not appear on your JVM page. JMX Metric charts Memory Heap memory usage: Each chart shows the used and committed heap space in MB for a given heap. Non-heap memory pool usage for the JVM: The used code cache and used CMS Perm Gen in MB. Garbage collection: The garbage collection CPU time. Class count: The loaded and unloaded class count for the JVM. Threads Thread count: The current number of active threads in the JVM. Thread pool: The active and idle thread count for the pool. On supported app servers, a chart shows each thread pool present in the app server, as well as the ratio of active to maximum thread count for each thread pool. HTTP sessions Session: The active, invalidated by timeout, and invalidated HTTP session counts for the application. On supported app servers, a chart shows each application present in the app server. App server transactions Active transaction: The number of active transactions within the app server's transaction manager. Created transaction: The change in the total number of created transactions per app server. Some app servers separate top level transactions and nested transactions. Finished transaction: The change in the total number of finished transactions per app server. Some app servers separate them by aborted and committed completed transactions. Data sources The metrics for the data source tab vary by app server. For more details, see Data source metrics by app server. For details on WebLogic's data source metrics, see WebLogic JMX metrics. Data source metrics by app server For supported app servers, the agent collects JMX data source metrics. You can view these metrics at one.newrelic.com > APM > (select an app) > Monitoring > JVMs > Data sources. To see these metrics, ensure that your data source has been properly configured for JMX monitoring for your app server. App server Metrics Tomcat Max connections: The maximum connections available for a data source. This is generally a configurable parameter. Active connections: The current number of active connections in a data source. Idle connections: The current number of idle connections in a data source. WebSphere Liberty Max connections: The maximum connections available for a data source. This is generally a configurable parameter. Active connections: The current number of active connections in a data source. Idle connections: The current number of idle connections in a data source. Wait time: The average amount of time a connections needs to wait before being handled. Destroyed connections: The number of destroyed connections. Resin Max connections: The maximum connections available for a data source. This is generally a configurable parameter. Active connections: The current number of active connections in a data source. Idle connections: The current number of idle connections in a data source. Created connections: The number of created connections. Enable for Spring Boot 2.2 and higher with Tomcat To enable New Relic to access Tomcat JMX metrics when running with Spring Boot 2.2 and higher, the system property server.tomcat.mbeanregistry.enabled must be set to true. See the Spring Boot 2.2 release notes. Enable WebSphere PMI metrics To enable New Relic to access WebSphere PMI metrics, you will need to configure WebSphere to monitor the necessary statistic sets. Enable all statistic sets (recommended) The simplest approach is to enable the collection of all statistic sets: If you are using Java 2 Security, ensure you have granted New Relic proper permissions. From the WebSphere admin console, select Monitoring and Tuning > Performance Monitoring Infrastructure (PMI) > (your server name). Select the Enable Performance Monitoring Infrastructure (PMI) checkbox. In the Currently monitored statistic set section, select All, then save your changes. Enable custom statistic sets (advanced) You can also collect only the PMI metrics that New Relic monitors by default. To collect only some PMI metrics: If you are using Java 2 Security, ensure you have granted New Relic proper permissions. From the WebSphere admin console, select Monitoring and Tuning > Performance Monitoring Infrastructure (PMI) > (selected app server). Select the Enable Performance Monitoring Infrastructure (PMI) checkbox. Select Custom. From the custom statistic set list, enable the following metrics: In the ThreadPool category, select the ActiveCount and PoolSize checkboxes. In the Servlet Session Manager category, select the ActiveCount and LiveCount checkboxes. In the Transaction Manager category, select the CommittedCount, RolledbackCount, and GlobalTimeoutCount checkboxes. From the Messages panel, select Save directly to the master configuration. Collected WebSphere PMI metrics When enabled, New Relic collects the following WebSphere PMI metrics. If you want other PMI metrics besides these to be collected and displayed in New Relic custom dashboards, use JMX instrumentation. stats.ActiveCount WebSphere PMI metrics Details Attribute stats.ActiveCount Object name pattern WebSphere:type=ThreadPool,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/ThreadPool/WebContainer/Active Copy Type Simple maximumSize WebSphere PMI metrics Details Attribute maximumSize Object name pattern WebSphere:type=ThreadPool,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/ThreadPool/WebContainer/Max Copy Type Simple stats.CommittedCount WebSphere PMI metrics Details Attribute stats.CommittedCount Object name pattern WebSphere:j2eeType=JTAResource,type=TransactionService,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/JTA/TransactionService/Committed Copy Type Simple stats.RolledbackCount WebSphere PMI metrics Details Attribute stats.RolledbackCount Object name pattern WebSphere:j2eeType=JTAResource,type=TransactionService,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/JTA/TransactionService/Rolled Back Copy Type Simple stats.GlobalTimeoutCount WebSphere PMI metrics Details Attribute stats.GlobalTimeoutCount Object name pattern WebSphere:j2eeType=JTAResource,type=TransactionService,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/JTA/TransactionService/Timed Out Copy Type Simple stats.LiveCount WebSphere PMI metrics Details Attribute stats.GlobalTimeoutCount Object name pattern WebSphere:type=SessionManager,name=*,process=*,platform=*,node=*,* Copy New Relic metric JmxBuiltIn/Session/DefaultApplication#DefaultWebApplication.war/Active Copy Type Simple WebLogic JMX metrics In WebLogic, JMX is enabled by default. New Relic collects the following mbeans metrics. Tip To collect additional JMX metrics, use a custom YAML file. ThreadCount WebLogic JMX metrics Details Attribute ThreadCount Object name pattern java.lang:type=Threading Copy New Relic metric JmxBuiltIn/Threads/Thread Count Copy Type Simple TotalStartedThreadCount WebLogic JMX metrics Details Attribute TotalStartedThreadCount Object name pattern java.lang:type=Threading Copy New Relic metric JmxBuiltIn/Threads/TotalStartedCount Copy Type Simple LoadedClassCount WebLogic JMX metrics Details Attribute LoadedClassCount Object name pattern java.lang:type=ClassLoading Copy New Relic metric JmxBuiltIn/Classes/Loaded Copy Type Simple UnloadedClassCount WebLogic JMX metrics Details Attribute UnloadedClassCount Object name pattern java.lang:type=ClassLoading Copy New Relic metric JmxBuiltIn/Classes/Unloaded Copy Type Simple HoggingThreadCount WebLogic JMX metrics Details Attribute HoggingThreadCount Object name pattern com.bea:ServerRuntime=*,Name=ThreadPoolRuntime,Type=ThreadPoolRuntime Copy New Relic metric JmxBuiltIn/ThreadPool/{Name}/Active Copy Type Simple ExecuteThreadIdleCount WebLogic JMX metrics Details Attribute ExecuteThreadIdleCount Object name pattern com.bea:ServerRuntime=*,Name=ThreadPoolRuntime,Type=ThreadPoolRuntime Copy New Relic metric JmxBuiltIn/ThreadPool/{Name}/Idle Copy Type Simple StandbyThreadCount WebLogic JMX metrics Details Attribute StandbyThreadCount Object name pattern com.bea:ServerRuntime=*,Name=ThreadPoolRuntime,Type=ThreadPoolRuntime Copy New Relic metric JmxBuiltIn/ThreadPool/{Name}/Standby Copy Type Simple TransactionTotalCount WebLogic JMX metrics Details Attribute TransactionTotalCount Object name pattern com.bea:ServerRuntime=*,Name=JTARuntime,Type=JTARuntime Copy New Relic metric JmxBuiltIn/JTA/{Name}/Count Copy Type Monotonic TransactionCommittedTotalCount WebLogic JMX metrics Details Attribute TransactionCommittedTotalCount Object name pattern com.bea:ServerRuntime=*,Name=JTARuntime,Type=JTARuntime Copy New Relic metric JmxBuiltIn/JTA/{Name}/Committed Copy Type Monotonic TransactionRolledBackTotalCount WebLogic JMX metrics Details Attribute TransactionRolledBackTotalCount Object name pattern com.bea:ServerRuntime=*,Name=JTARuntime,Type=JTARuntime Copy New Relic metric JmxBuiltIn/JTA/{Name}/Rolled Back Copy Type Monotonic TransactionAbandonedTotalCount WebLogic JMX metrics Details Attribute TransactionAbandonedTotalCount Object name pattern com.bea:ServerRuntime=*,Name=JTARuntime,Type=JTARuntime Copy New Relic metric JmxBuiltIn/JTA/{Name}/Abandoned Copy Type Monotonic NumAvailable WebLogic JMX metrics Details Attribute NumAvailable Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Connections/Available Copy Type Simple CurrCapacity WebLogic JMX metrics Details Attribute CurrCapacity Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Connections/PoolSize Copy Type Simple ConnectionsTotalCount WebLogic JMX metrics Details Attribute ConnectionsTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Connections/Created Copy Type Monotonic ActiveConnectionsCurrentCount WebLogic JMX metrics Details Attribute ActiveConnectionsCurrentCount Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Connections/Active Copy Type Simple LeakedConnectionCount WebLogic JMX metrics Details Attribute LeakedConnectionCount Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Connections/Leaked Copy Type Monotonic PrepStmtCacheCurrentSize WebLogic JMX metrics Details Attribute PrepStmtCacheCurrentSize Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Statement Cache/Size Copy Type Simple WaitingForConnectionCurrentCount WebLogic JMX metrics Details Attribute WaitingForConnectionCurrentCount Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Requests/Currently Waiting Copy Type Simple WaitingForConnectionTotal WebLogic JMX metrics Details Attribute WaitingForConnectionTotal Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Requests/Count Copy Type Monotonic WaitingForConnectionSuccessTotal WebLogic JMX metrics Details Attribute WaitingForConnectionSuccessTotal Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Requests/Successful Copy Type Monotonic WaitingForConnectionFailureTotal WebLogic JMX metrics Details Attribute WaitingForConnectionFailureTotal Object name pattern com.bea:ServerRuntime=*,Name=*,Type=JDBCDataSourceRuntime Copy New Relic metric JmxBuiltIn/DataSources/{Name}/Requests/Failed Copy Type Monotonic AccessTotalCount - MissTotalCount WebLogic JMX metrics Details Attribute AccessTotalCount - MissTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Attempts/Successful Copy Type Monotonic MissTotalCount WebLogic JMX metrics Details Attribute MissTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Attempts/Failed Copy Type Monotonic WaiterCurrentCount WebLogic JMX metrics Details Attribute WaiterCurrentCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,*> Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Threads/Waiting Copy Type Simple DestroyedTotalCount WebLogic JMX metrics Details Attribute DestroyedTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Beans/Destroyed Copy Type Monotonic BeansInUseCurrentCount WebLogic JMX metrics Details Attribute BeansInUseCurrentCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Beans/Active Copy Type Simple PooledBeansCurrentCount WebLogic JMX metrics Details Attribute PooledBeansCurrentCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBPoolRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Pool/Bean/{ApplicationRuntime}/{EJBComponentRuntime}/{Name}/Beans/Available Copy Type Simple TransactionsCommittedTotalCount +TransactionsRolledBackTotalCount +TransactionsTimedOutTotalCount WebLogic JMX metrics Details Attribute TransactionsCommittedTotalCount +TransactionsRolledBackTotalCount +TransactionsTimedOutTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBTransactionRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Transactions/Application/{ApplicationRuntime}/Count Copy Type Monotonic TransactionsCommittedTotalCount WebLogic JMX metrics Details Attribute TransactionsCommittedTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBTransactionRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Transactions/Application/{ApplicationRuntime}/Committed Copy Type Monotonic TransactionsRolledBackTotalCount WebLogic JMX metrics Details Attribute TransactionsRolledBackTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBTransactionRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Transactions/Application/{ApplicationRuntime}/Rolled Back Copy Type Monotonic TransactionsTimedOutTotalCount WebLogic JMX metrics Details Attribute TransactionsTimedOutTotalCount Object name pattern com.bea:ServerRuntime=*,Name=*,ApplicationRuntime=*,Type=EJBTransactionRuntime,EJBComponentRuntime=*,* Copy New Relic metric JmxBuiltIn/EJB/Transactions/Application/{ApplicationRuntime}/Timed Out Copy Type Monotonic",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.50322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JVMs page (<em>Java</em>): View app server metrics from JMX",
        "sections": "JVMs page (<em>Java</em>): View app server metrics from JMX",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "You can use New Relic&#x27;s <em>Java</em> <em>agent</em> to collect and view additional metrics provided by the most common application servers via JMX. The collected metrics vary by app server and include measurements of thread pools, HTTP sessions, and transactions. View JVM metrics Application servers collect"
      },
      "id": "603eb1c3e7b9d2d4182a07dc"
    }
  ],
  "/docs/agents/java-agent/frameworks/scala-installation-java": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.7119,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>Java</em> <em>agent</em> includes built-in <em>instrumentation</em> of the most popular parts of the <em>Java</em> ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the <em>agent</em> with <em>Java</em> <em>custom</em>"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java XML instrumentation examples",
        "Edit XML file in UI",
        "XML file format",
        "Caution",
        "Root node: extension",
        "Instrumentation (child of extension)",
        "Pointcut (child of instrumentation)",
        "Child nodes for pointcut",
        "Child nodes for method",
        "Example",
        "Sample class",
        "Sample XML instrumentation file and explanation"
      ],
      "title": "Java XML instrumentation examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "e34a060717cb5620eec03de5dcf19f1be0b82fcf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/java-xml-instrumentation-examples/",
      "published_at": "2021-10-01T13:45:35Z",
      "updated_at": "2021-07-09T00:54:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For your New Relic-monitored Java application, one custom instrumentation method is to use an XML file that lists the methods and classes you want to instrument. This documentation shows an example XML instrumentation file. For more information, see Java instrumentation by XML. Edit XML file in UI To edit your XML file directly from the New Relic UI: Go to one.newrelic.com > APM > (select an app) > Settings > Instrumentation. From here you can: Download a sample XML file. Select an edit existing XML file. Search the instrumentation history. XML file format The XML file format includes root and child nodes. Caution Do not instrument all of your methods, as this can lead to a metric grouping issue. Root node: extension The root node of an XML file is extension. It can have three different attributes: Value Definition name A unique but descriptive name identifying your XML extension. enabled Identifies whether the extension will be read by the Java agent. Default is true. If false, New Relic will ignore the extension. version The version of the extension. If two extensions have the same name, only the extension with the highest version will be used. Instrumentation (child of extension) The instrumentation node is a child of extension. It can have one attribute: metricPrefix. This is the prefix used for the metric names when the nameTransaction node is not specified. Default is CUSTOM. Pointcut (child of instrumentation) The pointcut is a child node of instrumentation and can have several attributes. Also, a pointcut can have several different child nodes. Value Definition transactionStartPoint If a transaction is not already in progress when this pointcut is reached, then a transaction will be started. If a transaction is already in progress, then that transaction will continue. A new transaction will not be created. metricNameFormat The name format to use for a metric. If not present, then this will default to the class name followed by the method name. You can only set the metricNameFormat on pointcuts where transactionStartPoint is set to false. excludeFromTransactionTrace When true the transaction trace will not be provided if this pointcut initiates the transaction. If the pointcut is reached in the middle of a transaction, then the transaction trace will still be present, but this method will be excluded from the call graph. ignoreTransaction When true the entire transaction will be ignored. transactionType Sets the type of the transaction. Possible values are background (default, reported as a non-web transaction) and web (reported as a web transaction). Child nodes for pointcut A pointcut can have several different child nodes: Value Definition nameTransaction If this element is present, the agent will name the transaction using the class name and method(s) instrumented by this pointcut. methodAnnotation The case sensitive full name of an annotation class including the package name. All methods that are marked with this annotation will be matched. className The case sensitive name of the class to match, including the package name. Pair this node with the method node. If this node is present on a pointcut, then the interfaceName node cannot be present on the same pointcut node. The className node has the attribute includeSubclasses. If true the methods on the class with the matching name will be instrumented along with the matching methods on any child class of this class. If false (default), only methods on the exact class specified will be instrumented. The className must follow these rules: Inner classes can be instrumented. The full package structure with dots between packages must be used. To match subclasses of the specified class, set the attribute includeSubclasses to true. interfaceName The case sensitive name of an interface, including the package name, whose implementation classes will be matched. Pair this node with the method node. If this node is present on a pointcut, then the className node cannot be present on the same pointcut node. The interfaceName must follow this rule: The full package structure with dots between packages must be used. method A method on the class to instrument. Pair this node with a className node. Also, the method node can have children. traceByReturnType The class name, including package, in the format used in bytecode, e.g. Ljava/lang/String;. All methods that return an object of that class will be matched. traceLambda A boolean indicating whether to match lambdas. The traceLambda node has the attributes: includeNonstatic - a boolean indicating whether to match non static methods (defaults to false); pattern - a string with the pattern to search for the lambda methods. Child nodes for method The method node can have several children. For more information and examples, see Troubleshooting Java custom instrumentation. Value Definition name The exact case sensitive name of the method to match. A method name node must follow these rules: Public, protected, private, and package methods can all be instrumented. Static and instance methods can be instrumented. Constructors cannot be instrumented. parameters The parameter types of the method specified in order. If the parameters element is not present, then all methods matching the name will be matched. This includes private and protected declarations. A method parameters node contains a list of the method's parameters, specified by type elements. Here are the major rules for the type elements: Primitives are specified using their normal name: int, float, double, long, byte, short, boolean, char. Objects require a full package structure. For example, do not use String in the XML; instead, use java.lang.String. Do not use generics with collection objects. For example, write java.util.List instead of java.util.List<String>. Include brackets for arrays. For example, an array of integers will be int[ ] and an array of strings will be java.lang.String[ ]. Include two sets of brackets for an array of arrays. For example, an array of arrays of longs would be long[ ][ ]. To send the parameter as an analytic event to New Relic One, add an XML attribute to the type element called attributeName. To use a method with no parameters, the parameters node needs to be present to match a \"no arguments\" method. returnType The case sensitive name of a class indicating a return type to match. All methods that return this class type will be matched. Example Here is a sample class and an XML file that could be used to instrument that class. Sample class package test; import java.util.HashMap; import java.util.Map; import java.util.concurrent.Executors; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; public class SampleTester { private String configName; private Map<String, Long> maxSampleTimes; public SampleTester(String pConfigName) { configName = pConfigName; maxSampleTimes = new HashMap<>(); } public void checkSample(String name, long[] times) { if (times != null) { maxSampleTimes.put(name, getFirst(times)); } else { maxSampleTimes.put(name, (long) getFirst()); } } private Long getFirst(long[] times) { return times[0]; } private int getFirst() { return 0; } public void printMaxRepeat(final long max) throws Exception { Runnable myRunnable = new Runnable() { public void run() { try { printMax(max); } catch (Exception e) { e.printStackTrace(); } } }; ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(1); scheduledExecutor.scheduleWithFixedDelay(myRunnable, 0, 10000, TimeUnit.MILLISECONDS); } private void printMax(long max) { System.out.println(\"max is \" + max); } } Copy Sample XML instrumentation file and explanation <?xml version=\"1.0\" encoding=\"UTF-8\"?> <extension xmlns=\"https://newrelic.com/docs/java/xsd/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"newrelic-extension extension.xsd \" name=\"customExtension\" version=\"1.0\"> <instrumentation metricPrefix=\"EXAMPLE\"> <pointcut transactionStartPoint=\"true\"> <!--class name is preceded by package name--> <className>test.SampleTester</className> <method> <name>checkSample</name> <parameters> <type attributeName=\"sampleName\">java.lang.String</type> <type>long[]</type> </parameters> </method> <!--two methods with the same name but different signatures can share one node--> <method> <name>getFirst</name> </method> <method> <name>run</name> </method> </pointcut> <pointcut transactionStartPoint=\"false\" ignoreTransaction=\"false\" excludeFromTransactionTrace=\"false\" metricNameFormat=\"SampleTester/methods\"> <className>test.SampleTester</className> <method> <name>printMaxRepeat</name> </method> <method> <name>printMax</name> </method> </pointcut> </instrumentation> </extension> Copy The first block of the XML file specifies the name and version of the extension. As the XML extension is default enabled, that attribute is not specified. The second block specifies the methods in SampleClass that should be instrumented. A transaction is started at the beginning of the block. It is worth noting that in the example class, there are two methods that share a name (getFirst) but have different signatures. These are instrumented with a single method node. By removing the parameters node, all methods with the same name can be matched under one method node. In the third block, the specified methods do not have a transaction started on them. This is because the transaction has already been started in run. The transaction will not be ignored, and will be included in the transaction trace.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.967064,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> XML <em>instrumentation</em> examples",
        "sections": "<em>Java</em> XML <em>instrumentation</em> examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "For your New Relic-monitored <em>Java</em> application, one <em>custom</em> <em>instrumentation</em> method is to use an XML file that lists the methods and classes you want to <em>instrument</em>. This documentation shows an example XML <em>instrumentation</em> file. For more information, see <em>Java</em> <em>instrumentation</em> by XML. Edit XML file in UI"
      },
      "id": "6043e05128ccbc04a22f94bd"
    },
    {
      "sections": [
        "Custom JMX YAML examples",
        "Contents",
        "YAML example",
        "Example explanation",
        "Properties",
        "MBeans",
        "Attributes",
        "Type",
        "Metric names",
        "Tip",
        "Finding object and attribute names",
        "For more help"
      ],
      "title": "Custom JMX YAML examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Custom instrumentation"
      ],
      "external_id": "38e6f21e2a3344f554072dff9919df049db60224",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/custom-instrumentation/custom-jmx-yaml-examples/",
      "published_at": "2021-10-01T13:44:32Z",
      "updated_at": "2021-03-16T13:47:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This is an example of a custom JMX YAML file for New Relic's Java agent, including value and definition, MBean, attributes, type, and names for metrics, objects, and attributes. For more information, including a video, see Custom JMX monitoring by YAML. Contents YAML example Here is an example of a custom JMX YAML file. YAML files are space senstive. name: TomcatCustom version: 1.0 enabled: true jmx: - object_name: Catalina:type=Cache,host=localhost,path=/examples metrics: - attributes: accessCount, cacheSize, hitsCount type: simple - object_name: Catalina:type=Connector,port=8009 metrics: - attributes: bufferSize, maxHeaderCount - object_name: java.nio:type=BufferPool,name=* metrics: - attributes: Count type: monotonically_increasing Copy Example explanation Properties Value Definition name A descriptive name identifying your YAML custom instrumentation file, using one space before the property name. In the above example, the name is TomcatCustom. version The version of the extension file. Use a double. If two extensions have the same name, only the extension with the highest version will be used. Use one space before the property version. In the above example, the version is 1.0. enabled If true, the Java agent will read the extension. If false, the Java agent will ignore the extension. Use one space before the property enabled. The above example is enabled. MBeans Each line in the YAML starting with - object_name represents an MBean. For example, the following lines describe the information to be pulled from the first MBean: - object_name: Catalina:type=Cache,host=localhost,path=/examples metrics: - attributes: accessCount, cacheSize, hitsCount type: simple Copy The object_name property itself can match one or more MBeans. For example, the line below only matches one MBean: - object_name: Catalina:type=Cache,host=localhost,path=/examples Copy The following line could match multiple MBeans: - object_name: java.nio:type=BufferPool,name=* Copy The asterisk ( * ) wildcard can only be used with JDK 1.6 and higher. The three MBeans listed in the above example have the following object names: Catalina:type=Cache,host=localhost,path=/examples Catalina:type=Connector,port=8009 java.nio:type=BufferPool,name=* Copy Attributes The JMX example retrieves six different attributes from the three MBeans. New Relic's Java agent pulls these attributes from the first MBean: accessCount cacheSize hitsCount The agent pulls these attributes from the second MBean: bufferSize maxHeaderCount The agent pulls one attribute (Count) from third MBean. Type For type, use simple or monotonically_increasing. When type is not specified in the JMX YAML file, it defaults to monotonically_increasing. Value Definition simple The exact value of the attribute will be reported to New Relic each minute. monotonically_increasing The positive difference will be reported to New Relic each minute. In the example above, the attributes accessCount, cacheSize, and hitsCount will be reported as simple. The attributes bufferSize, maxHeaderCount, and Count will be reported as monotonically_increasing. If the hitsCount attribute value is always 5, then New Relic will report a 5 each minute. If the Count attribute value is always 5, then New Relic will report a 0 for the value each minute. If the Count attribute value changes from 5 to 7, then New Relic will report a 2 for that minute. Metric names When selecting custom dashboard metrics and not using the property root_metric_name, use the following format for all custom JMX metrics: JMX/beginning_of_object_name/type/any_properties_in_object_name/attribute_name Copy Tip Some object names do not include a type. In that case, a null will be present in the metric name. The configuration file does not use root_metric_name, so the following metrics will be created: JMX/Catalina/Cache/localhost/examples/accessCount JMX/Catalina/Cache/localhost/examples/cacheSize JMX/Catalina/Cache/localhost/examples/hitsCount JMX/Catalina/Connector/8009/bufferSize JMX/Catalina/Connector/8009/maxHeaderCount JMX/java.nio/BufferPool/direct/Count JMX/java.nio/BufferPool/mapped/Count Copy If you are using the property root_metric_name, then the metric will be your root metric name prefixed with JMX and followed by the attribute's name. You can use object name values by specifying the object name key in the root_metric_name between brackets {}. For example: Part of a configuration file: - object_name: Catalina:type=Cache,host=localhost,path=/examples root_metric_name: Tomcat/{host} metrics: - attributes: accessCount, cacheSize, hitsCount type: simple - object_name: mbean:type=Sample,host=localhost,path=* root_metric_name: SampleMBean metrics: - attributes: attOne, attTwo type: simple Copy Metric names: JMX/Tomcat/localhost/accessCount JMX/Tomcat/localhost/cacheSize JMX/Tomcat/localhost/hitsCount JMX/SampleMBean/attOne JMX/SampleMBean/attTwo Copy If an attribute does not actually exist on the MBean, then the metric will never appear in New Relic. Finding object and attribute names The easiest way to find available MBeans and its associated attributes is to use the JConsole instructions for JDK 1.6. For more help Additional documentation resources include: Custom instrumentation with the Java agent (method tracers, examples) Custom JMX monitoring by YAML (YAML file structure, value and definition)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.387596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> JMX YAML examples",
        "sections": "<em>Custom</em> JMX YAML examples",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " associated attributes is to use the JConsole instructions for JDK 1.6. For more help Additional documentation resources include: <em>Custom</em> <em>instrumentation</em> with the <em>Java</em> <em>agent</em> (method tracers, examples) <em>Custom</em> JMX monitoring by YAML (YAML file structure, value and definition)"
      },
      "id": "603eb76a196a67cba6a83db6"
    }
  ],
  "/docs/agents/java-agent/getting-started/apm-agent-security-java": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.51324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The <em>Java</em> <em>agent</em> reports the database name and database"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.91434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ", substituting X.Y.Z with the latest <em>agent</em> version: web: target&#x2F;universal&#x2F;stage&#x2F;bin&#x2F;play-<em>getting</em>-<em>started</em> -Dhttp.port=${PORT} -J-javaagent:&#x2F;app&#x2F;target&#x2F;universal&#x2F;stage&#x2F;lib&#x2F;com.newrelic.<em>agent.java</em>.newrelic-<em>agent</em>-X.Y.Z.jar -J-Dnewrelic.config.file=conf&#x2F;newrelic.yml Copy OR Identify the path to newrelic.jar"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.33725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent": [
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.91434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ", substituting X.Y.Z with the latest <em>agent</em> version: web: target&#x2F;universal&#x2F;stage&#x2F;bin&#x2F;play-<em>getting</em>-<em>started</em> -Dhttp.port=${PORT} -J-javaagent:&#x2F;app&#x2F;target&#x2F;universal&#x2F;stage&#x2F;lib&#x2F;com.newrelic.<em>agent.java</em>.newrelic-<em>agent</em>-X.Y.Z.jar -J-Dnewrelic.config.file=conf&#x2F;newrelic.yml Copy OR Identify the path to newrelic.jar"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.33725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-09-30T19:31:47Z",
      "updated_at": "2021-09-30T19:31:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent can add the benefits of browser monitoring when you enable auto-instrumentation. After enabling browser monitoring injection, simply follow our guide to installing browser monitoring with the Node.js agent. Once you've completed these steps, you can view your browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.802216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) <em>start</em> date Initial release date of Node.js <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    }
  ],
  "/docs/agents/java-agent/getting-started/introduction-new-relic-java": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.51324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)&#x2F;li&gt; Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the <em>get</em>Bulk() API method. The <em>Java</em> <em>agent</em> reports the database name and database"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.91434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ", substituting X.Y.Z with the latest <em>agent</em> version: web: target&#x2F;universal&#x2F;stage&#x2F;bin&#x2F;play-<em>getting</em>-<em>started</em> -Dhttp.port=${PORT} -J-javaagent:&#x2F;app&#x2F;target&#x2F;universal&#x2F;stage&#x2F;lib&#x2F;com.newrelic.<em>agent.java</em>.newrelic-<em>agent</em>-X.Y.Z.jar -J-Dnewrelic.config.file=conf&#x2F;newrelic.yml Copy OR Identify the path to newrelic.jar"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.33725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/heroku/java-agent-heroku": [
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.55383,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on <em>Heroku</em>",
        "sections": "<em>Java</em> <em>agent</em> with Scala on <em>Heroku</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "<em>Heroku</em> is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including Scala. With New Relic, you can extend <em>Heroku</em> with metrics from APM and browser monitoring. Tip For non-Scala installations, see <em>Java</em> <em>agent</em> and <em>Heroku</em>. Compatibility and requirements"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.29551,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment <em>Heroku</em> Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> API"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "No data appears with Heroku (Java)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears with Heroku (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "b08d6638b319ee5716e462566e8a8ad54a63fec5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/no-data-appears-heroku-java/",
      "published_at": "2021-10-01T13:50:56Z",
      "updated_at": "2021-03-11T03:21:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem After waiting a few minutes, data is not appearing in your Heroku app's APM Summary page. Solution Check the Heroku logs for errors with this Heroku toolbelt command: heroku logs --tail Copy Check that the files in your Heroku dyno match the file modifications from the Java on Heroku or Java with Scala on Heroku installation procedures. Use this Heroku toolbelt command: heroku run bash Copy Try the steps in No data appears (Java).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.40893,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears with <em>Heroku</em> (<em>Java</em>)",
        "sections": "No data appears with <em>Heroku</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem After waiting a few minutes, data is not appearing in your <em>Heroku</em> app&#x27;s APM Summary page. Solution Check the <em>Heroku</em> logs for errors with this <em>Heroku</em> toolbelt command: <em>heroku</em> logs --tail Copy Check that the files in your <em>Heroku</em> dyno match the file modifications from the <em>Java</em> on <em>Heroku</em> or <em>Java</em> with Scala on <em>Heroku</em> installation procedures. Use this <em>Heroku</em> toolbelt command: <em>heroku</em> run bash Copy Try the steps in No data appears (<em>Java</em>)."
      },
      "id": "6043b7c9e7b9d29b015799da"
    }
  ],
  "/docs/agents/java-agent/heroku/java-agent-scala-heroku": [
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.72554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and <em>Heroku</em>",
        "sections": "<em>Java</em> <em>agent</em> and <em>Heroku</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "<em>Heroku</em> is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend <em>Heroku</em> with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for <em>Heroku</em>. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.29551,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment <em>Heroku</em> Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> API"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "No data appears with Heroku (Java)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears with Heroku (Java)",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "b08d6638b319ee5716e462566e8a8ad54a63fec5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/no-data-appears-heroku-java/",
      "published_at": "2021-10-01T13:50:56Z",
      "updated_at": "2021-03-11T03:21:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem After waiting a few minutes, data is not appearing in your Heroku app's APM Summary page. Solution Check the Heroku logs for errors with this Heroku toolbelt command: heroku logs --tail Copy Check that the files in your Heroku dyno match the file modifications from the Java on Heroku or Java with Scala on Heroku installation procedures. Use this Heroku toolbelt command: heroku run bash Copy Try the steps in No data appears (Java).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.40893,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears with <em>Heroku</em> (<em>Java</em>)",
        "sections": "No data appears with <em>Heroku</em> (<em>Java</em>)",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Problem After waiting a few minutes, data is not appearing in your <em>Heroku</em> app&#x27;s APM Summary page. Solution Check the <em>Heroku</em> logs for errors with this <em>Heroku</em> toolbelt command: <em>heroku</em> logs --tail Copy Check that the files in your <em>Heroku</em> dyno match the file modifications from the <em>Java</em> on <em>Heroku</em> or <em>Java</em> with Scala on <em>Heroku</em> installation procedures. Use this <em>Heroku</em> toolbelt command: <em>heroku</em> run bash Copy Try the steps in No data appears (<em>Java</em>)."
      },
      "id": "6043b7c9e7b9d29b015799da"
    }
  ],
  "/docs/agents/java-agent/heroku/no-data-appears-heroku-java": [
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.72552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and <em>Heroku</em>",
        "sections": "<em>Java</em> <em>agent</em> and <em>Heroku</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "<em>Heroku</em> is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend <em>Heroku</em> with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for <em>Heroku</em>. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.5538,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on <em>Heroku</em>",
        "sections": "<em>Java</em> <em>agent</em> with Scala on <em>Heroku</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "<em>Heroku</em> is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including Scala. With New Relic, you can extend <em>Heroku</em> with metrics from APM and browser monitoring. Tip For non-Scala installations, see <em>Java</em> <em>agent</em> and <em>Heroku</em>. Compatibility and requirements"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.29544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment <em>Heroku</em> Asynchronous instrumentation For supported frameworks, the <em>Java</em> <em>agent</em> usually instruments async work automatically. However, you can use the <em>Java</em> <em>agent</em> API"
      },
      "id": "6043b8f6196a6771a9960f87"
    }
  ],
  "/docs/agents/java-agent/index": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21417,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.460304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.05138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> configuration: Config file",
        "sections": "<em>Java</em> <em>agent</em> configuration: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "The New Relic <em>Java</em> <em>agent</em> reads its configuration from the newrelic.yml file. By default the <em>agent</em> looks for this file in the directory that contains newrelic.jar. You can override the config file&#x27;s location by setting the newrelic.config.file system property to a fully qualified file name"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/java-agent/installation/include-java-agent-jvm-argument": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.41933,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of <em>installation</em>. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the <em>Java</em> <em>agent</em> API. The <em>agent</em> automatically instruments these frameworks"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.93002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (<em>Java</em>). For more help Additional documentation resources include: <em>Java</em> <em>agent</em> and Heroku (for non-Scala <em>installation</em> on Heroku) No data appears with Heroku (troubleshotoing steps after <em>installation</em>) Scala <em>installation</em> for <em>Java</em> (Scala <em>installation</em> if you don&#x27;t use Heroku)"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.460304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/installation/install-java-agent-java-2-security": [
    {
      "sections": [
        "Install New Relic Java agent for Docker",
        "Get the Java agent",
        "Download using curl",
        "Download using Invoke-WebRequest (PowerShell)",
        "Download from the New Relic UI",
        "Set up the installation directory",
        "Modify startup scripts",
        "Set agent configurations",
        "Application name",
        "Tip",
        "License key",
        "Logs",
        "Environment (optional)",
        "Important",
        "Enabled (optional)",
        "Additional Tomcat Dockerfile examples",
        "Tomcat with environment and Java system properties",
        "How to start an application with the Java agent",
        "Next steps"
      ],
      "title": "Install New Relic Java agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "4de0ccd173c9851b045cfa036089e2f703b4a0f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-docker/",
      "published_at": "2021-10-01T13:34:37Z",
      "updated_at": "2021-08-27T14:01:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains a basic installation of the APM agent for Java applications in a Docker container. We discuss required configurations and also explore some optional configurations, including: How to use identical New Relic configuration files for each container, regardless of the environment where the containers are used How to use the Docker layer when every agent in every environment needs slightly different configuration data How to disable the New Relic agent in some environments and enable it in others Although we don't discuss advanced options here, you can install the Java agent in Docker volumes and use your Docker container image in other software such as Swarm, ECS, AKS, EKS, OpenShift, and Kubernetes. Our Docker examples refer to Tomcat, so if you are using another application server, refer to your vendor’s documentation. Get the Java agent Download newrelic-java.zip using curl, Invoke-WebRequest (PowerShell), or the New Relic UI: Download using curl Complete the following: Start a command-line session. Change to a temporary directory where you can download the zip file. Execute this curl command: curl -O https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip Copy Unzip newrelic-java.zip Download using Invoke-WebRequest (PowerShell) Complete the following: Start a PowerShell session. Change to a temporary directory where you can download the zip file. Execute this PowerShell command: Invoke-WebRequest -Uri https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip -OutFile newrelic-java.zip Copy Unzip newrelic-java.zip: Expand-Archive -Path newrelic-java.zip -DestinationPath DESTINATION_PATH Copy Download from the New Relic UI From one.newrelic.com, click Add more data and then search for \"Java\". Select the Java app monitoring option and complete the process. Set up the installation directory You can unzip the newrelic-java.zip file wherever it is convenient for you. In the subsequent sections we assume you extracted it in the current working directory, which puts the files we need in ./newrelic. Modify startup scripts The startup script that contains the command to start your application server must include Java’s built-in argument -javaagent. We recommend that you set this argument with the JAVA_OPTS environment variable. The value of that argument must contain the location where you ADD the Java APM agent’s jar file to the image. For example, with Tomcat, use commands like these in the Dockerfile: RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/newrelic.jar ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" Copy Set agent configurations By default, agent behavior is controlled by configuration entries in newrelic.yml, which is typically located in the same directory as the agent. This section explains how to override these newrelic.yml configurations by using environment variables or Java system properties in the Dockerfile. Before we look at some specific configurations, here’s how to load newrelic.yml using the Dockerfile: ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/newrelic.yml Copy For a basic Docker installation, complete these configurations: Application name License key Logs Environment (optional) Enabled (optional) Application name The application name is a configuration you set to identify your application in New Relic. Tip You can reuse an application name for multiple apps serving the same role so that all the data from those apps rolls up into the same logical application in New Relic. For more detail about additional grouping options, see Use multiple names for an app. Replace MY_APP_NAME with your application name in one of these Dockerfile commands: Option Command Environment variable ENV NEW_RELIC_APP_NAME=\"MY_APP_NAME\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='MY_APP_NAME'\" Copy After you boot the container, your application name appears in New Relic. License key This configuration is required for you to report data to your New Relic account. To copy your license key: Go to the API keys UI and get a license key. In one of these Dockerfile commands, replace MY_LICENSE_KEY with your license key: Option Command Environment variable ENV NEW_RELIC_LICENSE_KEY=\"MY_LICENSE_KEY\" Copy Java system property ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.license_key='MY_LICENSE_KEY'\" Copy Logs By default, logs are written into the logs directory relative to the location of newrelic.jar. Make sure that the user account that starts your application server also has the right to perform tasks such as: Creating the logs directory. Creating and appending to the log files in that directory. Here’s a Dockerfile example where tomcat is the user who starts Tomcat: RUN mkdir -p /usr/local/tomcat/newrelic/logs RUN chown -R tomcat:tomcat /usr/local/tomcat/newrelic/logs Copy You can also send the logs to STDOUT by adding one of the following to the Dockerfile: Option Command Environment Variable ENV NEW_RELIC_LOG_FILE_NAME=STDOUT Copy Java system property ENV JAVA_OPTS=-Dnewrelic.config.log_file_name=STDOUT Copy Environment (optional) You can pass either a Java property or an environment variable to determine which of the environment-specific stanzas the agent uses in newrelic.yml. Use this approach if you prefer to have the newrelic.yml file control environment-specific configurations instead of passing all the configurations via Docker. Here’s a Dockerfile example of passing the newrelic.environment Java system property via Docker to use the custom value dev in the environment stanza of newrelic.yml: Using the shell form of the CMD instruction, include a reference to a new environment variable you choose (for example, ENV): CMD java -Dnewrelic.environment=$ENV -jar myjar.jar Copy In your docker run command line, include an argument to set the environment variable in the container: docker run -it -e \"ENV=dev\" myDockerImage Copy Important If you don’t specify a value for newrelic.environment, the agent assumes it is running in your production environment and uses the values from the main body of the configuration file. Enabled (optional) This configuration controls whether the agent is enabled. Let’s say you want the same Docker image for every installation. However, you don’t want to run the New Relic agent every time an engineer spins up a test app because you don’t want to run up your instance count. This problem can be solved using the newrelic.environment Java system property. In the main body of newrelic.yml, disable the Java agent by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific agents by specifying the environment at runtime. Additional Tomcat Dockerfile examples Tomcat with environment and Java system properties FROM tomcat:9 # Add the newrelic.jar and -javaagent parameters RUN mkdir -p /usr/local/tomcat/newrelic ADD ./newrelic/newrelic.jar /usr/local/tomcat/newrelic/ ENV JAVA_OPTS=\"$JAVA_OPTS -javaagent:/usr/local/tomcat/newrelic/newrelic.jar\" # Add the configuration file ADD ./newrelic/newrelic.yml /usr/local/tomcat/newrelic/ # An example of setting a system property config ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.app_name='My Application'\" # An example of setting an Environment variable config ENV NEW_RELIC_LICENSE_KEY=\"license_key\" # Config to include the agent logs in Docker's stdout logging ENV JAVA_OPTS=\"$JAVA_OPTS -Dnewrelic.config.log_file_name=STDOUT\" EXPOSE 8080 CMD [\"catalina.sh\", \"run\"] Copy How to start an application with the Java agent FROM openjdk:8 ADD my-application.jar /app ADD newrelic.jar /app ADD newrelic.yml /app ENV NEW_RELIC_APP_NAME=\"My Application\" ENV NEW_RELIC_LICENSE_KEY=\"license_key\" ENV NEW_RELIC_LOG_FILE_NAME=\"STDOUT\" ENTRYPOINT [\"java\",\"-javaagent:/app/newrelic.jar\",\"-jar\",\"/app/my-application.jar\"] Copy Next steps Now that you have a basic agent installation in Docker, here are some additional steps to consider: Review other configurations for the agent. Read a detailed Explorers Hub post about Docker and New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.03613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "sections": "<em>Install</em> New Relic <em>Java</em> <em>agent</em> for Docker",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " property. In the main body of newrelic.yml, disable the <em>Java</em> <em>agent</em> by setting enabled: false. In specific environment stanzas of newrelic.yml, set enabled: true. Then, you can run specific <em>agents</em> by specifying the environment at runtime. <em>Additional</em> Tomcat Dockerfile examples Tomcat with environment"
      },
      "id": "603ea3dc28ccbc8889eba765"
    },
    {
      "sections": [
        "Install Java agent using Maven",
        "Install agent package using Maven",
        "Install complete agent package",
        "Zip example",
        "Install individual components",
        "Individual components example"
      ],
      "title": "Install Java agent using Maven",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "950370b0bcc14b07fe7609be457f3ace862af0c8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-java-agent-using-maven/",
      "published_at": "2021-10-01T13:33:28Z",
      "updated_at": "2021-07-27T10:41:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the Java agent using Maven. For information on manually installing the Java agent, see Install the Java agent and Java agent configuration: Config file. Install agent package using Maven Install the New Relic Java agent, using either of these options: Install complete agent package This section explains how to configure Maven to download and unzip the newrelic-java.zip file, which contains all New Relic Java agent components. newrelic.yml (agent configuration file) newrelic.jar (Java agent jar) newrelic-api.jar (Java agent API jar) README To do this: Configure your pom.xml to download newrelic-java.zip. For example: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> <type>zip</type> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Unzip newrelic-java.zip by configuring maven-dependency-plugin in your pom.xml. For example: <!-- Unzip New Relic Java agent into target/ --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <!-- you can optionally exclude files --> <!-- <excludes>**/newrelic.yml</excludes> --> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> Copy This will unzip all the files into the newly created newrelic/ within project.build.directory Zip example Here is an example pom.xml that downloads and extracts newrelic-java.zip. <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>3.47.1</version> <scope>provided</scope> <type>zip</type> </dependency> </dependencies> <!-- boilerplate code so Maven can generate a .war archive without requiring a web.xml file --> <build> <finalName>my-example-app</finalName> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-war-plugin</artifactId> <version>3.2.2</version> <configuration> <failOnMissingWebXml>false</failOnMissingWebXml> </configuration> </plugin> <!-- Unzip New Relic Java agent into project.build.directory --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.1.1</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.build.directory}</outputDirectory> </configuration> </execution> </executions> </plugin> </plugins> </build> </project> Copy Install individual components This section explains how to configure Maven to download individual components of the Java agent, specifically the newrelic.jar and the newrelic-api.jar. Configure your pom.xml to download either newrelic.jar or newrelic-api.jar. Here's an example for downloading newrelic.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>provided</scope> </dependency> Copy Here's an example for downloading newrelic-api.jar: <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>JAVA_AGENT_VERSION</version> <scope>compile</scope> </dependency> Copy Replace JAVA_AGENT_VERSION with the latest Java agent version. Locate the newrelic.yml file you received when creating your New Relic account, or download one for the version of the agent that you are using. Individual components example Here is an example pom.xml for working with the individual components (Java agent and API jars). <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"> <modelVersion>4.0.0</modelVersion> <groupId>com.example.application</groupId> <artifactId>my-example-app</artifactId> <packaging>war</packaging> <version>1.0</version> <name>My Example Application</name> <url>http://example.com</url> <dependencies> <!-- The newrelic.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-agent</artifactId> <version>3.47.1</version> <scope>provided</scope> </dependency> <!-- The newrelic-api.jar dependency. --> <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-api</artifactId> <version>3.47.1</version> <scope>compile</scope> </dependency> </project> Copy Place newrelic.yml in the same folder as newrelic.jar, unless you specify otherwise in the JVM arg -Dnewrelic.config.file. Configure the newrelic.yml file (or JVM system properties) with your license_key and app_name. Pass -javaagent:/path/to/newrelic.jar to the JVM running your application server. Optional: If using the New Relic Java agent API, make the API jar available at compile time by adding it to your application class path. Generate some traffic for your app, then wait a few minutes for data to appear in the APM Summary page. If nothing appears, follow the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.353355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "sections": "<em>Install</em> <em>Java</em> <em>agent</em> using Maven",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": "This document explains how to install the <em>Java</em> <em>agent</em> using Maven. For information on manually installing the <em>Java</em> <em>agent</em>, see Install the <em>Java</em> <em>agent</em> and <em>Java</em> <em>agent</em> configuration: Config file. Install <em>agent</em> package using Maven Install the New Relic <em>Java</em> <em>agent</em>, using either of these options: Install"
      },
      "id": "6043b9c764441f130a378f20"
    },
    {
      "sections": [
        "WildFly installation for Java",
        "Install WildFly versions earlier than 11",
        "Install WildFly version 11 or higher"
      ],
      "title": "WildFly installation for Java",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "7f9259f3b77efb78cd4861a9d7b519fe44191e3c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/wildfly-installation-java/",
      "published_at": "2021-10-01T13:35:43Z",
      "updated_at": "2021-07-15T18:10:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Java agent, make sure your WildFly version is supported. Depending on which WildFly version your application uses, additional configuration steps may be required. Install WildFly versions earlier than 11 If your supported WildFly version is earlier than v11, follow standard Java installation procedures. You do not need to do any additional configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic's Java agent requires additional configuration after you install it. Install the Java agent. If you already have it installed, update to the latest Java agent version. Versions 5.0.0 and higher include fixes for later WildFly versions 11 and higher. Open the standalone configuration file appropriate for your operating system and add the -javaagent property to JAVA_OPTS. For example, if you use Linux, edit the /bin/standalone.conf file or /bin/standalone.conf.bat for Windows. Make sure the agent jar is visible to all JBoss modules by adding com.newrelic to the JBoss modules system packages using either of these options in the standalone script: Recommended: Option 1 (same as adding -javaagent property): JAVA_OPTS=\"$JAVA_OPTS -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS,com.newrelic\" Copy Option 2: if [ \"x$JBOSS_MODULES_SYSTEM_PKGS\" = \"x\" ]; then JBOSS_MODULES_SYSTEM_PKGS=\"org.jboss.byteman,com.newrelic\" fi Copy Restart your application server.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.3046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "WildFly <em>installation</em> for <em>Java</em>",
        "sections": "WildFly <em>installation</em> for <em>Java</em>",
        "tags": "<em>Additional</em> <em>installation</em>",
        "body": " standard <em>Java</em> <em>installation</em> procedures. You do not need to do any <em>additional</em> configuration. Install WildFly version 11 or higher If you use WildFly version 11 or higher, New Relic&#x27;s <em>Java</em> <em>agent</em> requires <em>additional</em> configuration after you install it. Install the <em>Java</em> <em>agent</em>. If you already have"
      },
      "id": "603e791764441f18724e88ab"
    }
  ],
  "/docs/agents/java-agent/installation/install-java-agent": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.41925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of <em>installation</em>. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the <em>Java</em> <em>agent</em> API. The <em>agent</em> automatically instruments these frameworks"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.930016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (<em>Java</em>). For more help Additional documentation resources include: <em>Java</em> <em>agent</em> and Heroku (for non-Scala <em>installation</em> on Heroku) No data appears with Heroku (troubleshotoing steps after <em>installation</em>) Scala <em>installation</em> for <em>Java</em> (Scala <em>installation</em> if you don&#x27;t use Heroku)"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.460266,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/installation/uninstall-java-agent": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.41925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of <em>installation</em>. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the <em>Java</em> <em>agent</em> API. The <em>agent</em> automatically instruments these frameworks"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.930016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (<em>Java</em>). For more help Additional documentation resources include: <em>Java</em> <em>agent</em> and Heroku (for non-Scala <em>installation</em> on Heroku) No data appears with Heroku (troubleshotoing steps after <em>installation</em>) Scala <em>installation</em> for <em>Java</em> (Scala <em>installation</em> if you don&#x27;t use Heroku)"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.460266,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/installation/update-java-agent": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.419174,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of <em>installation</em>. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the <em>Java</em> <em>agent</em> API. The <em>agent</em> automatically instruments these frameworks"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent with Scala on Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic add-on",
        "Caution",
        "2. Configure your Heroku environment for New Relic",
        "Custom build.sbt",
        "How to download a custom newrelic.yml",
        "3. Push your changes and open the app",
        "Troubleshooting your installation",
        "For more help"
      ],
      "title": "Java agent with Scala on Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "3e132d7c22df97d5cd8e189047cec608d77f06fd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-scala-heroku/",
      "published_at": "2021-10-01T13:49:51Z",
      "updated_at": "2021-09-14T04:41:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Scala. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Tip For non-Scala installations, see Java agent and Heroku. Compatibility and requirements Java 7 or higher Latest New Relic Java agent version 1. Enable the New Relic add-on After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Configure your Heroku environment for New Relic After you complete the requirements and enable the New Relic add-on, configure your Scala Heroku environment for New Relic: Edit your Procfile to point to the agent jar in your app's root folder. Replace the contents of the file, substituting X.Y.Z with the latest agent version: web: target/universal/stage/bin/play-getting-started -Dhttp.port=${PORT} -J-javaagent:/app/target/universal/stage/lib/com.newrelic.agent.java.newrelic-agent-X.Y.Z.jar -J-Dnewrelic.config.file=conf/newrelic.yml Copy OR Identify the path to newrelic.jar with the JAVA_OPTS environment variable. Edit your build.sbt. Call the agent, substituting X.Y.Z with the latest Java agent version: Custom build.sbt name := \"\"\"play-getting-started\"\"\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayScala) scalaVersion := \"2.11.7\" libraryDependencies ++= Seq( jdbc, cache, \"org.postgresql\" % \"postgresql\" % \"9.4-1201-jdbc41\", ws ) libraryDependencies <+= scalaVersion(\"org.scala-lang\" % \"scala-compiler\" % _ ) libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-agent\" % \"X.Y.Z\") libraryDependencies ++= Seq(\"com.newrelic.agent.java\" % \"newrelic-api\" % \"X.Y.Z\") Copy Download a customized newrelic.yml file from your APM account settings: How to download a custom newrelic.yml Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the downloaded file. Copy newrelic.yml to the scala-getting-started/conf directory: Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 3. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshooting your installation If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (Java). For more help Additional documentation resources include: Java agent and Heroku (for non-Scala installation on Heroku) No data appears with Heroku (troubleshotoing steps after installation) Scala installation for Java (Scala installation if you don't use Heroku)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.93,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "sections": "<em>Java</em> <em>agent</em> with Scala on Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " you generate traffic, go to Heroku, select Find more add ons, and add the APM add-on. If no data appears after waiting a few minutes, see No data appears with Heroku (<em>Java</em>). For more help Additional documentation resources include: <em>Java</em> <em>agent</em> and Heroku (for non-Scala <em>installation</em> on Heroku) No data appears with Heroku (troubleshotoing steps after <em>installation</em>) Scala <em>installation</em> for <em>Java</em> (Scala <em>installation</em> if you don&#x27;t use Heroku)"
      },
      "id": "6043b879196a670bb4960f4b"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.460236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    }
  ],
  "/docs/agents/java-agent/instrumentation/extension-additional-instrumentation-modules": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.5134,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.496185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.25012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/instrumentation/ignore-transactions-using-api": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.5134,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.496185,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.25012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/instrumentation/instrument-browser-monitoring-java-agent-api": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.5133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.49614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.250114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.5133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.49614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent configuration: Config file",
        "Configuration file structure",
        "Tip",
        "Configuration settings precedence",
        "Configuring the Java extensions directory",
        "Create an extensions directory",
        "Specify an existing extensions directory",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (REQUIRED)",
        "agent_enabled",
        "apdex_t (DEPRECATED)",
        "appserver_port",
        "Important",
        "audit_mode",
        "ca_bundle_path",
        "use_private_ssl",
        "enable_auto_app_naming",
        "enable_auto_transaction_naming",
        "Caution",
        "enable_custom_tracing",
        "event_ingest_uri",
        "extensions.dir",
        "high_security",
        "insert_api_key",
        "labels",
        "max_stack_trace_lines",
        "metric_ingest_uri",
        "proxy_host",
        "proxy_password",
        "proxy_port",
        "proxy_user",
        "proxy_scheme",
        "reactor-netty.errors.enabled",
        "send_data_on_exit",
        "send_data_on_exit_threshold",
        "send_environment_info",
        "send_jvm_props",
        "ssl (DEPRECATED)",
        "sync_startup",
        "scala_futures_as_segments",
        "Logging configuration",
        "log_daily",
        "log_file_count",
        "log_file_name",
        "log_file_path",
        "log_level",
        "log_limit_in_kbytes",
        "JMX",
        "enabled",
        "linkingMetadataMBean",
        "JFR (Real-time profiling)",
        "audit_logging",
        "Attributes",
        "include",
        "exclude",
        "Transaction tracer",
        "explain_enabled",
        "explain_threshold",
        "insert_sql_max_length",
        "log_sql",
        "record_sql",
        "stack_based_naming (Play 2.x+ only)",
        "stack_trace_threshold",
        "top_n",
        "transaction_threshold",
        "slow_query_whitelist (DEPRECATED)",
        "collect_slow_queries_from",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "token_limit",
        "segment_limit",
        "Transaction segments",
        "Browser monitoring",
        "auto_instrument",
        "disabled_auto_pages",
        "External tracer",
        "exclude_request_uri",
        "Cross application tracer",
        "Error collector",
        "ignore_classes",
        "ignore_messages",
        "ignore_status_codes",
        "expected_classes",
        "expected_messages",
        "expected_status_codes",
        "ignoreErrorPriority",
        "ignore_errors (DEPRECATED)",
        "Strip exceptions",
        "whitelist (DEPRECATED)",
        "allowed_classes",
        "Thread profiler",
        "Transaction events",
        "max_samples_stored",
        "custom_request_headers",
        "Custom events",
        "Hostname configuration",
        "display_name",
        "ipv_preference",
        "Custom instrumentation",
        "trace_annotation_class_name",
        "com.newrelic.instrumentation.servlet-user",
        "System properties",
        "newrelic.config.process_host.display_name",
        "newrelic.config.file",
        "newrelic.debug",
        "newrelic.environment",
        "newrelic.home",
        "newrelic.logfile",
        "Environment variables",
        "NEW_RELIC_APP_NAME (REQUIRED)",
        "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
        "NEW_RELIC_PROCESS_HOST_DISPLAY_NAME",
        "NEW_RELIC_LICENSE_KEY (REQUIRED)",
        "NEW_RELIC_LOG",
        "Cloud platform utilization",
        "detect_aws",
        "detect_docker",
        "Async instrumentation",
        "token_timeout",
        "segment_timeout",
        "Circuit breaker",
        "memory_threshold",
        "gc_cpu_threshold",
        "Message tracer",
        "segment_parameters.enabled",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Infinite Tracing",
        "trace_observer.host",
        "Span events",
        "Jar collector",
        "skip_temp_jars",
        "jars_per_second"
      ],
      "title": "Java agent configuration: Config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "1d61f848fa192438225eae269421b8d384915c8b",
      "image": "https://docs.newrelic.com/static/60ca967eab99ca225186310913ae2de6/8c557/java-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file/",
      "published_at": "2021-10-01T03:07:12Z",
      "updated_at": "2021-09-20T19:27:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent reads its configuration from the newrelic.yml file. By default the agent looks for this file in the directory that contains newrelic.jar. You can override the config file's location by setting the newrelic.config.file system property to a fully qualified file name. Configuration file structure The newrelic.yml file is split into stanzas corresponding to different environments: Test Development Staging Production (default) New Relic applies settings in the common stanza to each of these environments. You can select other environments as the default by setting the newrelic.environment system property to the environment name. Tip A newrelic.yml template is available. If you edit newrelic.yml, be careful to conform to the YAML format. Use a YAML validator to ensure the syntax is accurate before using the file with New Relic's Java agent, and follow these rules: Java agent newrelic.yml Requirements Format YML files are case sensitive. Indentations All indentations must be in increments of two characters. Other indentations will result in an Unable to parse configuration file error upon agent startup. Use the same level of indentation for data in the same stanza of the file. Indent any sub-stanzas by an additional two spaces. Changes to file You must restart your JVM host process for changes to take effect. Exception: Property changes to log_level and audit_mode do not require a restart. Property changes under circuit breaker don't require a restart. Configuration settings precedence To override any setting in the config file, use a system property override. In certain environments, environment variables can also be used to override both the config file and the system properties. The environment variables primarily exist to support Heroku. When used, server-side configuration overrides all other configuration settings. With the Java agent, server-side configuration overrides all other settings. Environment variables override Java system properties. Java properties override user configuration settings in your newrelic.yml file. User settings override the newrelic.yml default settings. Configuring the Java extensions directory The Java agent reads the configuration files on process startup. To identify the directory where the files are located, either create a new or specify an existing extensions directory: Create an extensions directory To create the extensions directory: Navigate to the directory where newrelic.jar and newrelic.yml are located. Create a directory named extensions. In newrelic.yml, check that the property extensions.dir is not set. Specify an existing extensions directory To use an existing Java extensions directory: In your newrelic.yml file, locate the common section. Use the property extensions.dir to specify the location of the file. General configuration settings Set these options in the common stanza. To override any of these options, use a newrelic.config prefixed system property. license_key (REQUIRED) Type String Default (none) This setting is required. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. app_name (REQUIRED) Type String Default (none) This setting is required. Defines the application name used to report data to New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon. For example, to report data to My Application and My Application 2 use this: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. agent_enabled Type Boolean Default true Flag to enable the agent. Use this setting to force the agent to run or not run. apdex_t (DEPRECATED) Type Float Default 1.0 The apdex_t threshold in seconds for the application's Apdex score. For Java agent versions 1.2.008 or higher, the apdex_t value is set in the UI and the value in newrelic.yml is ignored. appserver_port Type Integer Default (none) Number to differentiate JVMs for the same app on the same machine. New Relic uses host/port for uniqueness, so you can distinguish the JVMs by putting a switch like this into the startup arguments for each JVM: -Dnewrelic.config.appserver_port=8081 Copy Once you have used appserver_port to name the JVMs and restart them, you should be able to see them individually in the dropdown and in the profiling interface. Important This is only a change for New Relic; it doesn't actually affect the port on which the host communicates in any way. audit_mode Type Boolean Default false Enables plain text logging of all data sent to New Relic to the agent logfile. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. ca_bundle_path Type String Value Format /path/to/ca/cert/bundle.pem Specifies a path to a custom SSL certificate bundle that will be used by the agent to establish a secure connection to New Relic. If your custom SSL certificate bundle doesn't include certificates that are sufficient to connect to New Relic then you'll need to merge the required certs into your custom certificate bundle. use_private_ssl Type Boolean Default false The following SSL certificates are bundled into the agent jar: META-INF/certs/eu-newrelic-com.pem META-INF/certs/eu01-nr-data-net.pem META-INF/certs/newrelic-com.pem Copy By default (use_private_ssl: false) the agent will use the SSL certificates bundled into the JDK to establish a secure connection to New Relic or the custom SSL certificates bundle specified by ca_bundle_path. If you want to use the SSL certificates bundled with the agent, set use_private_ssl: true. Note: use_private_ssl will be ignored if ca_bundle_path is set. enable_auto_app_naming Type Boolean Default false Enables the reporting of data separately for each web app. Set to true to enable support for auto app naming. The name of each web app is detected automatically and the agent reports data separately for each one. This provides a finer-grained performance breakdown for web apps in New Relic. For more information, see Automatic application naming. For more methods of naming your application, see Name your Java application. enable_auto_transaction_naming Type Boolean Default true Enables component-based transaction naming. Set to true to enable component-based transaction naming. Set to false to use the URI of a web request as the name of the transaction. For more information, see Naming web transactions. Caution Unless you implement API calls to name your transactions, disabling auto-transaction naming is very likely to cause Metric grouping issues. enable_custom_tracing Type Boolean Default true Enables all instrumentation using an @Trace annotation. Disabling this causes @Trace annotations to be ignored. event_ingest_uri Type String Default https://insights-collector.newrelic.com/v1/accounts/events Event ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send events to other ingest endpoints (for example, EU production: https://insights-collector.eu01.nr-data.net/v1/accounts/events). extensions.dir Type String Default (none) Defines the location of the optional extensions directory. If this property is not set, the agent will look for a subdirectory named extensions in the same directory as newrelic.jar and newrelic.yml. high_security Type Boolean Default false In order for high security to be enabled, this property must be set to true and the high security property in the New Relic user interface must be enabled. Enabling high security means SSL is turned on, request and message queue parameters are not collected, and queries cannot be sent to New Relic in their raw form. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. insert_api_key Type String Default (none) A valid Insert API Key for your account. This is not currently used by the agent. labels Type String Default \"\" Attach tags to this app. Note that this option now enables tags, which replaced the label feature. You can still query your historical labels. max_stack_trace_lines Type Integer Default 30 Limits the number of lines the agent collects from each stack trace. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. metric_ingest_uri Type String Default https://metric-api.newrelic.com/metric/v1 Metric ingest URI used by some agent features. Defaults to the US production ingest endpoint. Can be manually configured to send metrics to other ingest endpoints (for example EU production: https://metric-api.eu.newrelic.com/metric/v1). proxy_host Type String Default (none) The proxy host through which to connect to the New Relic collector. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_password Type String Default (none) The password for proxy authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. Important The Java agent supports Basic (clear text) authentication. proxy_port Type String Default 8080 The proxy host port number. If a proxy is used, the host setting is required. Other proxy settings are optional. proxy_user Type String Default (none) The username for proxy authentication, such as Basic (clear text) authentication. If a proxy is used, the host setting is required. Other proxy settings are optional. The username and password settings will be used to authenticate to Basic Auth challenges from a proxy server. proxy_scheme Type String Default (none) The proxy scheme used. Setting proxy_scheme: \"https\" will allow the agent to connect through proxies using the HTTPS scheme. reactor-netty.errors.enabled Type Boolean Default false Whether errors are reported for Reactor Netty. Default is false. If set to true, Reactor Netty errors will be reported. Important Only available in Java agent 6.3.0 and above. Notice, default was changed to false as of Java agent 6.5.0. send_data_on_exit Type Boolean Default false Enable delayed JVM shutdown to give the agent a chance to send latest metric data to New Relic before JVM shutdown. send_data_on_exit_threshold Type Integer Default 60 The number of seconds after which the agent will use the send_data_on_exit setting. send_environment_info Type Boolean Default true Enable reporting of JVM settings to New Relic. send_jvm_props Type Boolean Default true When set to true, JVM properties will be sent to New Relic. ssl (DEPRECATED) Type Boolean Default true Requires connections to the New Relic collector to go over SSL. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. This work is done asynchronously to the threads that process your application code, so response times will not be directly affected by this change. Important As of Java agent 3.48.0, SSL is enabled by default and the config option to disable it has been deprecated. As of Java agent 4.0.0, the ability to disable SSL has been removed. sync_startup Type Boolean Default false Enable the agent to connect the New Relic collector immediately upon app startup. scala_futures_as_segments Important This applies to Java agent version 3.44.0 or higher. Type Boolean Default false For more concise transaction trace details, the agent does not report Scala Futures as transaction segments, and those Futures do not contribute to the transaction’s total time. Enabling scala_futures_as_segments increases your overhead. If you want Scala Futures to report as transaction segments so you can view them in a transaction trace, you can enable it: scala_futures_as_segments: enabled: true Copy Logging configuration These are part of the general configuration variables. They are broken out here because they are frequently tweaked for debugging. Some of the logging configuration variables are dynamic and do not need a host restart for them to take effect. For instance, if log files are growing too quickly, log_level can be set to a less verbose setting to reduce the reporting rate. Here is the order of precedence for configuration variables affecting log rotation. If log_daily is true, other log rotation settings are ignored. If log_file_count is 1 or 0, the size limit is ignored. Finally, the agent applies log_limit_in_kbytes. Depending on the growth rate, it is possible for the log file size to exceed the configured value by a small amount. log_daily Type Boolean Default false Set to true to roll the logs daily. Overrides the other configuration variables that affect log rotation. log_file_count Type Integer Default 1 The maximum number of log files to keep when using log rotation. log_file_name Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. log_file_path Type String Default logs subdirectory where newrelic.jar is located The log file path. Tip If log_file_path is specified, the directory must already exist. If the default value is used, the agent will attempt to create the directory. log_level Type String Default info The log verbosity level. The agent uses its own log file to keep its logging separate from that of your application. Valid options, in order of verboseness, are: off severe warning info fine finer finest This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. log_limit_in_kbytes Type Integer Default 0 The log file size in kilobytes at which log files are rotated. Set to 0 for no limit. JMX To set these options, use the jmx stanza. To override them, use a newrelic.config.jmx prefixed system property. The Java agent uses JMX to collect JVM data. Additionally the agent can expose linking metadata over JMX that can be used by other tracing systems. enabled Type Boolean Default true This setting can be used to turn on or off all JMX functionality. linkingMetadataMBean Type Boolean Default false This setting can be enabled to allow the Java agent to expose linking metadata over remote JMX. Important This applies to Java agent version 6.1.0 or higher. JFR (Real-time profiling) The Java agent uses Java Flight Recorder (JFR) to collect high fidelity JVM data for Real-time profiling. Real-time profiling can be configured in the jfr stanza in the agent yaml, with system properties prefixed by newrelic.config.jfr., or with environment variables prefixed with NEW_RELIC_JFR_. enabled Type Boolean Default false Set to true to enable Real-time profiling with JFR. Important Real-time profiling with JFR is on by default in Java agent version 7.1.0. If you are on any other agent version 7.0.0 or higher, you can turn on JFR by changing the value to true. audit_logging Type Boolean Default false Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. Audit logging is extremely verbose and should only be used for troubleshooting purposes. Important This applies to Java agent version 7.0.0 or higher. Attributes To set these options, use the attributes stanza. To override them, use a newrelic.config.attributes prefixed system property. Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. There is also an attribute stanza under each destination. For more information, see Java agent attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom Instrumentation Editor is set to false by default. include Type List of Strings Default (none) If attributes are enabled, attribute keys found in this list will be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic. Separate the keys in the list with a comma; for example: key1, key2, key3 Copy Also refer to the agent attribute rules. Transaction tracer These options are set in the transaction_tracer stanza and can be overridden by using a newrelic.config.transaction_tracer prefixed system property. Transaction tracing captures deep information about slow transactions and sends this to the New Relic service. The transaction includes the exact call sequence of the transactions, including any query statements issued. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true The transaction tracer is enabled by default. Set this to false to turn it off. explain_enabled Type Boolean Default true Determines whether the agent will capture the EXPLAIN plan for slow queries. Only supported for MySQL and PostgreSQL. explain_threshold Type Float Default 0.5 Threshold in seconds for query execution time below which the slow query and the EXPLAIN plan (if supported) will not be captured. Relevant to slow queries only when record_sql is set to raw or obfuscated. Relevant to EXPLAIN plans only when explain_enabled is set to true. insert_sql_max_length Type Integer Default 2000 The character limit for the SQL query string. If you have many slow SQL queries with large chunks of information, this could negatively affect performance or how quickly you see your data in New Relic. Increase the value gradually until you find the right balance of information and performance. log_sql Type Boolean Default false Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode. record_sql Type String Default obfuscated When the transaction tracer is on, query statements can optionally be recorded. The recorder has three modes: off: Send no queries. raw: Send the query statement in its original form. obfuscated: Strips out numeric and string literals. stack_based_naming (Play 2.x+ only) Type Boolean Default False Defaulted to true until Java agent version 3.12.1, when it was changed to false. This option is for Play 2.x+ only. Play/Scala instrumentation can use Thread.getStackTrace() to improve tracer naming, but at the cost of increased overhead. stack_trace_threshold Type Integer Default 0.5 Defines a threshold (in seconds) for collecting stack traces from an SQL call. When SQL statements exceed this threshold, the agent will capture the current stack trace. This is useful for pinpointing where long SQL calls originate from. top_n Type Integer Default 20 Use this setting to control the variety of your transaction traces. top_n is an integer that represents the number of unique, slow transactions that traces will be created for. If you want transaction traces to more accurately reflect the actual slowest transactions in your app, make this value lower. If you want to sample a more diverse array of transactions, make the value higher. A value of 0 would mean that only the slowest transaction is always traced. This is considered not to be optimal, though, because you may have one or two transactions that are always the slowest, and repeatedly seeing those same transaction traces will probably not give you much value. If the same transaction is often the slowest, the top_n setting allows the Java agent (over time) to sample the slowest n transactions. This gives you greater variety and more insight into your application. transaction_threshold Type String (float) Default apdex_f The time threshold used to determine when a transaction is eligible to be traced. When the transaction's response time exceeds this threshold, a transaction trace will be recorded and sent to New Relic. The default is apdex_f (default), which sets the threshold to be the \"Frustrated\" Apdex level (four times the apdex_t value). You can also set a specific time threshold by entering a float value that represents a number of seconds. slow_query_whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use collect_slow_queries_from. By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: slow_query_whitelist: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy collect_slow_queries_from Type String Default (none) By default, high security mode does not allow the agent to collect slow queries. Enable this option to collect Cassandra queries from the DataStax driver, even with high security enabled. If you don't use high security, the agent collects slow queries automatically. For DataStax driver 2.1.2, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-2.1.2' Copy For DataStax driver 3.0.0, add this rule to your allow list: transaction_tracer: collect_slow_queries_from: 'com.newrelic.instrumentation.cassandra-datastax-3.0.0' Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this property (transaction_tracer.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to New Relic in transaction traces. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction traces. For more information, see the agent attribute rules. token_limit Type Integer Default 3000 Limits the number of Tokens that can be created per Transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. segment_limit Type Integer Default 3000 Limits the number of segments that can be created per transaction. Increasing this value may impact performance, because it increases the amount of memory the agent uses and the amount of data sent to New Relic. Transaction segments These options are set in the transaction_segments stanza and can be overridden by using a newrelic.config.transaction_segments prefixed system property. Transaction segments represent discrete pieces of work (generally method calls) and are displayed within transaction traces. Important Transaction segment attribute filtering requires Java agent version 4.10.0 or higher. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction segments. If attributes.enabled at the root level is false, no attributes will be sent to transaction segments regardless on how this property (transaction_segments.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for transaction segments, all attribute keys found in this list will be sent to New Relic in transaction segments. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction segments. For more information, see the agent attribute rules. Browser monitoring These options are set in the browser_monitoring stanza and can be overridden by using a newrelic.config.browser_monitoring prefixed system property. Browser monitoring gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. auto_instrument Type Boolean Default true By default the agent automatically inserts API calls in compiled JSPs to inject the monitoring JavaScript into web pages. Set this attribute to false to turn off this behavior. disabled_auto_pages Type Comma-separated list of strings Default (none) When auto_instrument is true, by default all pages are instrumented. List all pages that you want the auto instrumentation to skip here. You can still use manual instrumentation on these pages. For example: browser_monitoring: disabled_auto_pages: /WEB-INF/jsp/testpage_1.jsp, /WEB-INF/jsp/testpage_2.jsp Copy attributes.enabled Type Boolean Default false This setting can be used to turn on or off all attributes for browser monitoring. This is the data you can query. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how this property under browser_monitoring is set. attributes.include Type List of Strings Default (none) If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent to New Relic in page views. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in page views. For more information, see the agent attribute rules. External tracer The external tracing options are set in the external_tracer stanza and can be overridden by using a newrelic.config.external_tracer prefixed system property. exclude_request_uri Type Boolean Default false This setting can be used to control the collection of outgoing request URIs for errors and transaction traces. Set this to true to disable collecting this information. Cross application tracer The cross application tracing options are set in the cross_application_tracer stanza and can be overridden by using a newrelic.config.cross_application_tracer prefixed system property. Cross application tracing adds request and response headers to external calls using the Apache HttpClient libraries. This provides better performance data when calling applications monitored by other New Relic Agents. enabled Type Boolean Default true Cross application tracing is enabled by default. Set this to false to turn it off. Error collector These options are set in the error_collector stanza and unless noted otherwise can be overridden by using a newrelic.config.error_collector prefixed system property. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. Tip For how to configure errors for the Java agent, including how to configure errors via the UI, see Java agent error configuration. enabled Type Boolean Default true Enable error collection. ignore_classes Type Stanza containing a list of fully qualified class_name strings Default (none) Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list exception class names you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy ignore_messages Type Stanza containing a fully qualified class_name and a list of messages per error class Default (none) Specify exception class names the agent should ignore. Ignored messages will not affect error rate or Apdex score, or be reported to APM. Contains yaml pairs consisting of: A fully qualified exception class name that should not be reported to APM AND A list of exception messages to match against (at least one is required) If the exception class name matches an error but the message does not, then that error will not be ignored. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_messages: com.example.MyException: - \"Some error message to ignore\" - \"Some other error message to ignore\" com.example.DifferentException: - \"Some different error message to ignore\" Copy An environment variable can be used to list exception class names and messages you want to be ignored: NEW_RELIC_ERROR_COLLECTOR_IGNORE_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy ignore_status_codes Type Comma-separated list of strings and ranges Default 404 A comma-separated list comprised of individual and dashed ranges of HTTP status codes that should not be treated as errors. If this property is commented out in the newrelic.yml configuration file, then the 404 status code will automatically be ignored. When using server-side configuration, the status code 404 must be specified in order for it to be ignored. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: ignore_status_codes: 404,507-511 Copy expected_classes Type Stanza containing a List of fully qualified class_name strings Default (none) Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_classes: - \"com.example.MyException\" - \"com.example.DifferentException\" Copy An environment variable can be used to list expected exception class names: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_CLASSES=\"[\\\"com.example.MyException\\\", \\\"com.example.DifferentException\\\"]\" Copy expected_messages Type Stanza containing a fully qualified class_name and a List of messages per error class Default (none) Contains yaml pairs consisting of a fully qualified exception class name that should be marked as expected and thus prevented from affecting error rate or Apdex score and a List of exception messages to match against, the latter of which at least one is required. If the exception class name matches an error but the message does not, then that error will not be marked as expected and therefore will affect error rate and Apdex score. Message strings use contains for matching. A message cannot be provided on its own and must always be paired with a fully qualified class name. Cannot be specified by system property. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_messages: com.example.MyException: - \"Some expected error message\" - \"Some other expected error message\" com.example.DifferentException: - \"Some different expected error message\" Copy An environment variable can be used to list expected exception class names and messages: NEW_RELIC_ERROR_COLLECTOR_EXPECTED_MESSAGES=\"{\\\"com.example.MyException\\\": [\\\"Some error message to ignore\\\", \\\"Some other error message to ignore\\\"], \\\"com.example.DifferentException\\\": [\\\"Some different error message to ignore\\\"]}\" Copy expected_status_codes Type Comma-separated list of strings and ranges Default (none) A comma-separated list comprised of individual and dashed ranges of HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score. This setting is dynamic, so running agents will notice changes to newrelic.yml without a JVM restart. For example: error_collector: expected_status_codes: 415,500-506 Copy attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless of how this property is set under error_collector. attributes.include Type List of strings Default (none) If attributes are enabled for traced errors, all attribute keys found in this list will be sent to New Relic in traced errors. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) Attribute keys found in this list will not be sent to New Relic in traced errors. For more information, see the agent attribute rules. ignoreErrorPriority Type Boolean Default true When multiple errors are noticed in a transaction, only the last error will be reported by default. Setting this property to false will instead report only the first error that is noticed. For more information, see the noticeError API. For example: error_collector: ignoreErrorPriority: false Copy ignore_errors (DEPRECATED) Type Comma-separated list of Strings Default (none) All specified exception class names specified will not be treated as errors. Deprecated as of Java agent 3.40.0 and replaced by ignore_classes. For example: error_collector: ignore_errors: some.other.MyException Copy Strip exceptions These options are set in the strip_exception_messages stanza and unless noted otherwise can be overridden by using a newrelic.config.strip_exception_messages​prefixed system property. This configuration can be enabled to control whether Java exception messages are reported to New Relic. enabled Type Boolean Default false By default, this is set to false, which means that the agent sends messages from all exceptions to the New Relic collector. If you set this to true, the agent strips the messages from exceptions in order to prevent it from inadvertently capturing sensitive information. If you enable high security mode, this is automatically set to true. If you set enabled to true but you want the agent to capture messages from specific exceptions, add the exceptions to your allow list. whitelist (DEPRECATED) Type String Default (none) Important This config has been deprecated as of agent version 5.10.0 and will be removed in a future agent version. Instead use allowed_classes. If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to the whitelist, separated by a comma. allowed_classes Type String Default (none) If you set enabled to true but you want the agent to capture messages for specific exceptions, add each exception to allowed_classes, separated by a comma. Thread profiler These options are set in the thread_profiler stanza and can be overridden by using a newrelic.config.thread_profiler prefixed system property. Thread profiler measures wall clock time, CPU time, and method call counts in your application's threads as they run. enabled Type Boolean Default true Enable the thread profiler. Transaction events These options are set in the transaction_events stanza and can be overridden by using a newrelic.config.transaction_events prefixed system property. Transaction events provide the data for displaying histograms and percentiles in the UI. Important Previously this stanza was called analytics_events. If your configuration file still uses analytics_events, update your agent to use transaction_events. enabled Type Boolean Default true Enable the transaction events service. max_samples_stored Type Integer Default 2000 Max 10000 The maximum number of sampled transaction events reported every 60 seconds. custom_request_headers Type List of maps Default None Important Unlike other settings, custom_request_headers have to be paired together and must be set in the newrelic.yml file. They can't be overwritten by Java virtual machine arguments (system property) or environment variables. A list of maps with the paired keys header_name and the optional header_alias. Choose one or more custom HTTP request headers to add as transaction attributes. You can list multiple header configurations: transaction_events: custom_request_headers: - header_name: \"X-Custom-Header-1\" - header_name: \"X-Custom-Header-2\" header_alias: \"CustomHeader2alias\" Copy In the first map set, X-Custom-Header-1 is captured and reported by the agent as the header name for a corresponding value from the request object. The header_name will also be the name of the attribute sent to New Relic. In the second map set, the request header is X-Custom-Header-2, but the CustomHeader2alias is the name sent to New Relic. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless of how this property is set under transaction_events. attributes.include Type List of Strings Default (none) If attributes are enabled for transaction events, all attribute keys found in this list will be sent to New Relic in transaction events. For more information, see the agent attribute rules. attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to New Relic in transaction events. For more information, see the agent attribute rules. Custom events Custom events are set in the custom_insights_events stanza and can be overridden by using a newrelic.config.custom_insights_events prefixed system property. APM lets you record custom event data via the New Relic language agent APIs, which you can then query. Important For Java agent versions prior to 4.1.0, the following YAML configuration is recognized: custom_insights_events.enabled: true custom_insights_events.max_samples_stored: 5000 Copy For agent versions 4.1.0 and above, the YAML configuration uses the nested stanza formatting: custom_insights_events: enabled: false max_samples_stored: 5000 Copy enabled Type Boolean Default true This enables the custom event service. max_samples_stored Type Integer Default/Max 10000 The maximum number of sampled custom events reported every 60 seconds. Hostname configuration These options are set in the process_host stanza and can be overridden by using a newrelic.config.process_host prefixed system property. These properties are used for configuring the hostname displayed in the UI: display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. ipv_preference Type String Default 4 If the hostname cannot be determined, then the IP address of the host will be used. This property determines whether the IPv4 or IPv6 address should be used. The default is IPv4. Custom instrumentation These options set in the class_transformer stanza and can be overridden by using a newrelic.config.class_transformer prefixed system property. trace_annotation_class_name Type String Default (none) String containing the full class name of the annotation class the agent uses to determine which user-specified methods to instrument. For more information about custom annotations, see Java custom metric collection. com.newrelic.instrumentation.servlet-user Type Boolean Default false Enable this option to capture the userPrincipal name. This name is included as a transaction trace attribute, and can be queried. System properties You can override any setting in the newrelic.yml file by setting a system property. The system property corresponding to a given setting in the config file is the setting name prefixed by newrelic.config. For example, the system property for the log_level setting is newrelic.config.log_level. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the system property for the enabled setting in the transaction_tracer stanza is newrelic.config.transaction_tracer.enabled. In addition to overriding configuration settings, the following system properties are recognized by the agent: newrelic.config.process_host.display_name Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. Requires Java agent 3.17 or higher. newrelic.config.file Type String Default (none) String containing a fully qualified path to the newrelic configuration file. If empty, the agent assumes newrelic.yml is in the same directory as newrelic.jar. newrelic.debug Type Boolean Default (none) Enable debug logging. newrelic.environment Type String Default (none) String containing the environment configuration for the agent to use. newrelic.home Type String Default (none) String containing the home directory of agent. This defaults to the same directory as the agent jarfile. newrelic.logfile Type String Default newrelic_agent.log String containing the name of the agent log file. Environment variables Environment variables take the highest precedence and override the system properties and yml config settings. To set environment variables, use the export VARNAME=value command. To permanently set environment variables, add the export line to a file such as ~/.bashrc or ~/.bash_profile. You can override any setting from a system property or in the newrelic.yml by setting an environment variable. The environment variable corresponding to a given setting in the config file is the setting name prefixed by NEW_RELIC with all dots (.) and dashes (-) replaced by underscores (_). For example, the environment variable for the log_level setting is NEW_RELIC_LOG_LEVEL. For settings nested in stanzas, prepend the stanza name to the setting name. For example, the environment variable for the enabled setting in the transaction_tracer stanza is NEW_RELIC_TRANSACTION_TRACER_ENABLED. Important Agent configuration via environment variables requires Java agent version 4.10.0 or higher. For agent versions older than 4.10.0 the following environment variables are available: NEW_RELIC_APP_NAME (REQUIRED) Type String Default (none) This setting is required. Contains the application name under which to report data to New Relic. Set the name of your application as you want it to appear in New Relic. If enable_auto_app_naming is false, the agent reports all data to this application. Otherwise, the agent reports only background tasks (transactions for non-web applications) to this application. To report data to more than one application, separate the application names with a semicolon ;. For example, to report data to My Application and My Application 2: app_name: My Application;My Application 2 Copy For more methods of naming your application, see Name your Java application. NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Type String Default false Enables distributed tracing. Case sensitive: use true or false. For more information, see the distributed tracing section. NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Type String Default (none) Set a display name to decorate the \"host:port\" label in the New Relic UI. NEW_RELIC_LICENSE_KEY (REQUIRED) Type String Default (none) This setting is required. Contains your New Relic account license. You must specify the license key associated with your New Relic account. This key binds your agent's data to your account in the New Relic service. NEW_RELIC_LOG Type String Default newrelic_agent.log The unqualified log file name or the string STDOUT which will log to standard out. Cloud platform utilization These options are set in the utilization stanza and can be overridden by using a newrelic.config.utilization prefixed system property. The agent collects utilization information and sends it to the New Relic service. The agent can collect information from Amazon Web Services (AWS) EC2 instances and Docker containers. detect_aws Type Boolean Default true Determines whether the agent polls AWS metadata API. detect_docker Type Boolean Default true Determines whether the agent reads Docker information from the file system. Async instrumentation These options are set directly in the common stanza and can be overridden by using a prefixed system property. token_timeout Type Integer Default (seconds) 180 The number of seconds after which the agent will automatically expire an async token that has not been explicitly expired with token.expire(). For usage instructions, see Tokens: Connect async threads. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to unexpired tokens. segment_timeout Type Integer Default (seconds) 600 The number of seconds after which the agent will automatically end a segment that has not been explicitly ended with segment.end() or segment.ignore(). For usage instructions, see Segments: Time arbitrary async activity. Important Increasing this value may impact performance, because it increases the amount of memory the agent uses and prevents transactions from being reported due to un-ended segments. Circuit breaker These settings customize the behavior of the Java circuit breaker. These settings are not included in newrelic.yml by default. You do not need to restart your JVM after changing them. If you want to customize the circuit breaker, add the stanza under the common stanza: common: &default_settings​ ​ OTHER_CONFIG_SETTINGS circuitbreaker: enabled: true memory_threshold: 20 gc_cpu_threshold: 10 Copy enabled Type Boolean Default true If your application is behaving as expected, you may want to disable the circuit breaker. memory_threshold Type Integer (0 to 100) Default 20 Customize the precentage of free heap memory below which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. gc_cpu_threshold Type Integer (0 to 100) Default 10 Customize the precentage of garbage collection CPU time above which the circuit breaker should trip. When the percentage of free heap memory is less than memory_threshold, and the CPU time spent doing garbage collection is greater than gc_cpu_threshold, the circuit breaker trips. In order to make the circuit breaker less likely to trip, decrease memory_threshold and/or increase gc_cpu_threshold. Adjust these values as needed, based on your application's operating performance and behavior. Message tracer These options are set in the message_tracer stanza and can be overridden by using a newrelic.config.message_tracer prefixed system property. segment_parameters.enabled Type Boolean Default true Adds message properties to tracer attributes. Set this to false to turn it off. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has other effects on APM features. Before enabling, read the transition guide. Requires Java agent version 4.3.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. In the config file, it can be set in the distributed_tracing stanza. It can be overridden using a newrelic.config.distributed_tracing prefixed system property. enabled Type Boolean Default false Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: enabled: true Copy To enable this using a system property, you would use: -Dnewrelic.config.distributed_tracing.enabled=true Copy exclude_newrelic_header Type Boolean Default false By default, supported versions of the agent utilize both the newrelic header and W3C Trace Context headers for distributed tracing. The newrelic distributed tracing header allows interoperability with older agents that don't support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over newrelic headers for distributed tracing. If you do not want to utilize the newrelic header, setting this to true will result in the agent excluding the newrelic header and only using W3C Trace Context headers for distributed tracing. For example, to exclude newrelic headers in the config file, you would use: distributed_tracing: exclude_newrelic_header: true Copy To exclude newrelic headers using a system property, you would use: -Dnewrelic.config.distributed_tracing.exclude_newrelic_header=true Copy Infinite Tracing Important Requirements: Java Agent 5.12.1 or higher. Infinite Tracing does not work if enable_auto_app_naming is enabled. To turn on Infinite Tracing, enable distributed tracing and add the additional setting below. For an example, see Language Agents: Configure Distributed Tracing. trace_observer.host Type String Default None For help getting a valid Infinite Tracing trace observer host entry, see find or create a Trace Observer. You can configure this via YAML: infinite_tracing: trace_observer: host: YOUR_TRACE_OBSERVER_HOST Copy You can also use the system property newrelic.config.infinite_tracing.trace_observer.host or the environment variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST. Span events Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. Span configuration is set in the span_events stanza and can be overridden by using a newrelic.config.span_events prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable span event reporting. attributes.enabled Type Boolean Default true This setting can be used to turn on or off all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this property (span_events.attributes.enabled) is set. attributes.include Type List of strings Default (none) If attributes are enabled for span events, all attribute keys found in this list will be sent to New Relic in span_events. For more information, see the agent attribute rules. attributes.exclude Type List of strings Default (none) All attribute keys found in this list will not be sent to New Relic in span events. For more information, see the agent attribute rules. Important Span event attribute filtering requires Java agent version 4.10.0 or higher. Jar collector The Java agent collects and information about jars and their versions on the application classpath. Jar collection configuration is set in the jar_collector stanza and can be overridden by using a newrelic.config.jar_collector prefixed system property. Options include: enabled Type Boolean Default true Used to enable/disable jar collection and reporting. skip_temp_jars Type Boolean Default true Used to enable/disable collection of temporary jars. Temporary jars are those residing in the directory specified by the system property java.io.tmpdir. jars_per_second Type Integer Default 10 The maximum number of jars to process per second. Must be positive.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.23607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> configuration: Config file",
        "sections": "<em>Java</em> <em>agent</em> configuration: Config file",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " information, see <em>Java</em> <em>agent</em> attributes, Enabling and disabling attributes and Attribute examples. enabled Type Boolean Default true This setting can be used to turn on or off all attributes. Important For security reasons, capturing custom attributes using the Custom <em>Instrumentation</em> Editor is set to false"
      },
      "id": "603eb739e7b9d2a2432a07e0"
    }
  ],
  "/docs/agents/java-agent/instrumentation/monitor-deployments-java-agent": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.5133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.49614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.250114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/instrumentation/transaction-naming-protocol": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.51321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.49609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.25011,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/instrumentation/use-rabbitmq-or-jms-message-queues": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.51321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual <em>instrumentation</em>, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.49609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ": # By default the <em>agent</em> automatically inserts API calls in compiled JSPs to # inject the monitoring <em>Java</em>Script into web pages. Not all rendering engines are supported. # See https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;<em>instrumentation</em>&#x2F;new-relic-browser-<em>java</em>-<em>agent</em>#manual_<em>instrumentation</em>"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Java agent: Instrument Kafka message queues",
        "Tip",
        "View Kafka metrics",
        "Enable Kafka event collection",
        "Important",
        "Enable Kafka distributed traces",
        "1. Enable distributed tracing in the config file",
        "2. Instrument the Kafka producer",
        "3. Instrument the Kafka consumer"
      ],
      "title": "Java agent: Instrument Kafka message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Instrumentation"
      ],
      "external_id": "05644cd866713698034d5419961a40af31d06b90",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/instrumentation/java-agent-instrument-kafka-message-queues/",
      "published_at": "2021-10-01T13:54:24Z",
      "updated_at": "2021-08-21T03:31:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent automatically collects data from Kafka's Java clients library. Because Kafka is a high-performance messaging system that generates a lot of data, you can customize the agent for your app's specific throughput and use cases. This document explains how to collect and view three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka instrumentation is available in Java agent versions 4.12.0 or higher. For supported Kafka client versions, see Java compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View Kafka metrics After installation, the agent automatically reports rich Kafka metrics with information about messaging rates, latency, lag, and more. The Java agent collects all Kafka consumer and producer metrics (but not connect or stream metrics). To view these metrics, create a custom dashboard: Go to the New Relic metric explorer. Use the metric explorer to locate your metrics. You can find Kafka metrics in this metric folder: MessageBroker/Kafka/Internal/KafkaMetricName Copy For example, the request-rate metric is located at: MessageBroker/Kafka/Internal/consumer-metrics/request-rate Copy Tip For a full list of Kafka consumer and producer metrics, see the Kafka documentation. Add the metrics you want to monitor to a dashboard by clicking Add to dashboard. Enable Kafka event collection You can configure the agent to collect event data instead of metric timeslice data (for the difference between metric timeslice and event data, see data collection). This allows you to use NRQL to filter and facet the default Kafka metrics. When enabled, the agent collects one Kafka event every 30 seconds. This event contains all of the the data from Kafka consumer and produce metrics captured since the previous event. Important The agent records up to 2000 events per harvest cycle, though you can change this value with max_samples_stored. Kafka event data is included in this pool. If you use the recordCustomEvent() API call to send custom events to New Relic and you send more than 2000 events, the agent will discard some Kafka or custom events. To enable Kafka event collection: Add the kafka.metrics.as_events.enabled element to your newrelic.yml config file: kafka.metrics.as_events.enabled: true Copy Restart your JVM. Use the event explorer to view your Kafka events, located in the KafkaMetrics event type. Or, use NRQL to query your events directly. For example: SELECT average('producer-metrics.record-send-rate') from KafkaMetrics SINCE 30 minutes ago timeseries Copy Enable Kafka distributed traces The Java agent can also collect distributed traces from Kafka clients. Enabling traces doesn't affect the agent's normal operations: it will still report metric or event data from Kafka. Impacts and requirements to consider before enabling: The instrumentation adds a 150 to 200 byte payload to message headers. If your Kafka messages are very small, traces can add significant processing and storage overhead. This additional payload size could cause Kafka to drop messages if they exceed your Kafka messaging size limit. For this reason, we recommend testing out Kafka distributed traces in a dev environment before enabling them in production. Distributed tracing is only available for Kafka client versions 0.11.0.0 or higher. If you have not enabled distributed tracing for your app before, read the Transition guide before enabling. To propagate W3C trace context via Kafka message headers, see the distributed tracing API usage guide for details on APIs that were released in Java agent 6.4.0. Note that adding additional headers to Kafka messages will further increase the payload size. To see these APIs in action, see Using Java agent trace APIs with Kafka. The complete process of enabling this is below but at a high level it involves these basic steps: 1) enable tracing via the agent config, and 2) calling the Java agent API to instrument transactions on both the producer and consumer side. To collect distributed traces from Kafka: 1. Enable distributed tracing in the config file If you have not enabled distributed tracing for your app before, read the distributed tracing transition guide before you enable it. To enable Kafka distributed tracings, enable two settings in your newrelic.yml config file: Set the distributed_tracing element to true: distributed_tracing: enabled: true Copy Enable the Kafka-specific distributed tracing features by adding the following to your config file: class_transformer: com.newrelic.instrumentation.kafka-clients-spans-0.11.0.0: enabled: true Copy 2. Instrument the Kafka producer To instrument your Kafka producer, you'll need to start a transaction before any calls to Producer.send(ProducerRecord<K, V> record). To do this, add the Java agent @Trace(dispatcher = true) annotation to the method. For example: @Trace(dispatcher = true) public static void createAndSend(KafkaProducer<String, String> producer){ ProducerRecord<String, String> data = new ProducerRecord<String, String>(\"topic\", \"key\", \"value\"); producer.send(data); } Copy 3. Instrument the Kafka consumer To instrument your Kafka consumer, you'll need to start a transaction when the message is being processed. The agent stores the distributed tracing payload header under the newrelic key or under the W3C's traceparent and tracestate keys. Retrieve the header, then call the New Relic transaction API to accept the payload. For example: @Trace(dispatcher = true) private static void processMessage(ConsumerRecord<String, String> rec) { // create a distributed trace headers map Headers dtHeaders = ConcurrentHashMapHeaders.build(HeaderType.MESSAGE); // Iterate through each record header and insert the trace headers into the dtHeaders map for (Header header : rec.headers()) { String headerValue = new String(header.value(), StandardCharsets.UTF_8); // using the newrelic key if (header.key().equals(\"newrelic\")) { dtHeaders.addHeader(\"newrelic\", headerValue); } // or using the W3C keys if (header.key().equals(\"traceparent\")) { dtHeaders.addHeader(\"traceparent\", headerValue); } if (header.key().equals(\"tracestate\")) { dtHeaders.addHeader(\"tracestate\", headerValue); } } // Accept distributed tracing headers to link this request to the originating request NewRelic.getAgent().getTransaction().acceptDistributedTraceHeaders(TransportType.Kafka, dtHeaders); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.25011,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "sections": "<em>Java</em> <em>agent</em>: <em>Instrument</em> Kafka message queues",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " three types of Kafka data: Kafka metrics Kafka events Kafka distributed traces Kafka <em>instrumentation</em> is available in <em>Java</em> <em>agent</em> versions 4.12.0 or higher. For supported Kafka client versions, see <em>Java</em> compatibility and requirements. Tip For our Kafka integration, see Kafka monitoring integration. View"
      },
      "id": "603ebc2464441f7ce84e8885"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/all-hosts-appear-localhost": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42436,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21393,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94034,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/application-server-jmx-setup": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/determine-permissions-requirements-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/error-bootstrapping-new-relic-java-agent": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94033,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/errors-starting-java-app-server": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940315,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/firewall-or-traffic-connectivity-failures": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940315,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/gather-troubleshooting-information-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940315,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/generate-debug-logs-troubleshooting-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42424,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94031,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/host-links-missing-java-apps-apm-summary": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42424,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94031,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/java-solr-data-does-not-appear": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42421,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/large-number-false-positive-security-vulnerabilities": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42421,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/no-browser-data-appears-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42421,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/no-data-appears-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/no-log-file-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/no-stack-traces-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424164,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.940285,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/nullpointerexception-issues-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94027,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/resolve-metric-grouping-issues-java-apps": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94027,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/ssl-or-connection-errors-java": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.424126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.213554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94027,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/java-agent/troubleshooting/update-java-config-legacy-agent-versions": [
    {
      "sections": [
        "Java agent config file template"
      ],
      "title": "Java agent config file template",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Configuration"
      ],
      "external_id": "cab129eda0df59e172b299574d8e44fbb3c04617",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-config-file-template/",
      "published_at": "2021-10-01T13:42:27Z",
      "updated_at": "2021-09-27T15:21:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains a templated version of the newrelic.yml file that the Java agent reads for configuration. The config file format is YAML. While no knowledge of YAML is necessary to edit the file, be careful to maintain the proper indentation. Learn more about YAML on Wikipedia. When making changes to the newrelic.yml file, use a YAML validator to ensure the syntax is accurate and follow these rules: YML files are case sensitive. All indentations are in increments of two characters. Data in the same stanza of the file must use the same level of indentation, and sub-stanzas should be indented by an additional two spaces. For more information about structure, directories, and settings, see Java agent configuration. # This file configures the New Relic Agent. New Relic monitors # Java applications with deep visibility and low overhead. For more details and additional # configuration options visit https://docs.newrelic.com/docs/agents/java-agent/configuration/java-agent-configuration-config-file. # # <%= generated_for_user %> # # This section is for settings common to all environments. # Do not add anything above this next line. common: &default_settings # ============================== LICENSE KEY =============================== # You must specify the license key associated with your New Relic # account. For example, if your license key is 12345 use this: # license_key: '12345' # The key binds your Agent's data to your account in the New Relic service. license_key: '<%= license_key %>' # Agent Enabled # Use this setting to disable the agent instead of removing it from the startup command. # Default is true. agent_enabled: true # Set the name of your application as you'd like it show up in New Relic. # If enable_auto_app_naming is false, the agent reports all data to this application. # Otherwise, the agent reports only background tasks (transactions for non-web applications) # to this application. To report data to more than one application # (useful for rollup reporting), separate the application names with \";\". # For example, to report data to \"My Application\" and \"My Application 2\" use this: # app_name: My Application;My Application 2 # This setting is required. Up to 3 different application names can be specified. # The first application name must be unique. app_name: My Application # To enable high security, set this property to true. When in high # security mode, the agent will use SSL and obfuscated SQL. Additionally, # request parameters and message parameters will not be sent to New Relic. high_security: false # Set to true to enable support for auto app naming. # The name of each web app is detected automatically # and the agent reports data separately for each one. # This provides a finer-grained performance breakdown for # web apps in New Relic. # Default is false. enable_auto_app_naming: false # Set to true to enable component-based transaction naming. # Set to false to use the URI of a web request as the name of the transaction. # Default is true. enable_auto_transaction_naming: true # The agent uses its own log file to keep its logging # separate from that of your application. Specify the log level here. # This setting is dynamic, so changes do not require restarting your application. # The levels in increasing order of verboseness are: # off, severe, warning, info, fine, finer, finest # Default is info. log_level: info # Log all data sent to and from New Relic in plain text. # This setting is dynamic, so changes do not require restarting your application. # Default is false. audit_mode: false # The number of backup log files to save. # Default is 1. log_file_count: 1 # The maximum number of kbytes to write to any one log file. # The log_file_count must be set greater than 1. # Default is 0 (no limit). log_limit_in_kbytes: 0 # Override other log rolling configuration and roll the logs daily. # Default is false. log_daily: false # The name of the log file. # Default is newrelic_agent.log. log_file_name: newrelic_agent.log # The log file directory. # Default is the logs directory in the newrelic.jar parent directory. #log_file_path: # Proxy settings for connecting to the New Relic server: # If a proxy is used, the host setting is required. Other settings # are optional. Default port is 8080. The username and password # settings will be used to authenticate to Basic Auth challenges # from a proxy server. Proxy scheme will allow the agent to # connect through proxies using the HTTPS scheme. #proxy_host: hostname #proxy_port: 8080 #proxy_user: username #proxy_password: password #proxy_scheme: https # Limits the number of lines to capture for each stack trace. # Default is 30 max_stack_trace_lines: 30 # Provides the ability to configure the attributes sent to New Relic. These # attributes can be found in transaction traces, traced errors, Insight's # transaction events, and Insight's page views. attributes: # When true, attributes will be sent to New Relic. The default is true. enabled: true #A comma separated list of attribute keys whose values should # be sent to New Relic. #include: # A comma separated list of attribute keys whose values should # not be sent to New Relic. #exclude: # Transaction tracer captures deep information about slow # transactions and sends this to the New Relic service once a # minute. Included in the transaction is the exact call sequence of # the transactions including any SQL statements issued. transaction_tracer: # Transaction tracer is enabled by default. Set this to false to turn it off. # This feature is not available to Lite accounts and is automatically disabled. # Default is true. enabled: true # Threshold in seconds for when to collect a transaction # trace. When the response time of a controller action exceeds # this threshold, a transaction trace will be recorded and sent to # New Relic. Valid values are any float value, or (default) \"apdex_f\", # which will use the threshold for the \"Frustrated\" Apdex level # (greater than four times the apdex_t value). # Default is apdex_f. transaction_threshold: apdex_f # When transaction tracer is on, SQL statements can optionally be # recorded. The recorder has three modes, \"off\" which sends no # SQL, \"raw\" which sends the SQL statement in its original form, # and \"obfuscated\", which strips out numeric and string literals. # Default is obfuscated. record_sql: obfuscated # Set this to true to log SQL statements instead of recording them. # SQL is logged using the record_sql mode. # Default is false. log_sql: false # Threshold in seconds for when to collect stack trace for a SQL # call. In other words, when SQL statements exceed this threshold, # then capture and send to New Relic the current stack trace. This is # helpful for pinpointing where long SQL calls originate from. # Default is 0.5 seconds. stack_trace_threshold: 0.5 # Determines whether the agent will capture query plans for slow # SQL queries. Only supported for MySQL and PostgreSQL. # Default is true. explain_enabled: true # Threshold for query execution time below which query plans will not # not be captured. Relevant only when `explain_enabled` is true. # Default is 0.5 seconds. explain_threshold: 0.5 # Use this setting to control the variety of transaction traces. # The higher the setting, the greater the variety. # Set this to 0 to always report the slowest transaction trace. # Default is 20. top_n: 20 # Error collector captures information about uncaught exceptions and # sends them to New Relic for viewing. error_collector: # This property enables the collection of errors. If the property is not # set or the property is set to false, then errors will not be collected. # Default is true. enabled: true # Use this property to exclude specific exceptions from being reported as errors # by providing a comma separated list of full class names. # The default is to exclude akka.actor.ActorKilledException. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_errors: akka.actor.ActorKilledException # Use this property to exclude specific http status codes from being reported as errors # by providing a comma separated list of status codes. # The default is to exclude 404s. If you want to override # this, you must provide any new value as an empty list is ignored. ignore_status_codes: 404 # Transaction Events are used for Histograms and Percentiles. Unaggregated data is collected # for each web transaction and sent to the server on harvest. transaction_events: # Set to false to disable transaction events. # Default is true. enabled: true # Events are collected up to the configured amount. Afterwards, events are sampled to # maintain an even distribution across the harvest cycle. # Default is 2000. Setting to 0 will disable. max_samples_stored: 2000 # Distributed tracing lets you see the path that a request takes through your distributed system. # Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition # guide before you enable this feature: https://docs.newrelic.com/docs/apm/distributed-tracing/getting-started/transition-guide-distributed-tracing # Default is false. distributed_tracing: enabled: false # Cross Application Tracing adds request and response headers to # external calls using supported HTTP libraries to provide better # performance data when calling applications monitored by other New Relic Agents. cross_application_tracer: # Set to false to disable cross application tracing. # Default is true. enabled: true # Thread profiler measures wall clock time, CPU time, and method call counts # in your application's threads as they run. # This feature is not available to Lite accounts and is automatically disabled. thread_profiler: # Set to false to disable the thread profiler. # Default is true. enabled: true # New Relic Real User Monitoring gives you insight into the performance real users are # experiencing with your website. This is accomplished by measuring the time it takes for # your users' browsers to download and render your web pages by injecting a small amount # of JavaScript code into the header and footer of each page. browser_monitoring: # By default the agent automatically inserts API calls in compiled JSPs to # inject the monitoring JavaScript into web pages. Not all rendering engines are supported. # See https://docs.newrelic.com/docs/agents/java-agent/instrumentation/new-relic-browser-java-agent#manual_instrumentation # for instructions to add these manually to your pages. # Set this attribute to false to turn off this behavior. auto_instrument: true class_transformer: # This instrumentation reports the name of the user principal returned from # HttpServletRequest.getUserPrincipal() when servlets and filters are invoked. com.newrelic.instrumentation.servlet-user: enabled: false com.newrelic.instrumentation.spring-aop-2: enabled: false # This instrumentation reports metrics for resultset operations. com.newrelic.instrumentation.jdbc-resultset: enabled: false # Classes loaded by classloaders in this list will not be instrumented. # This is a useful optimization for runtimes which use classloaders to # load dynamic classes which the agent would not instrument. classloader_excludes: groovy.lang.GroovyClassLoader$InnerLoader, org.codehaus.groovy.runtime.callsite.CallSiteClassLoader, com.collaxa.cube.engine.deployment.BPELClassLoader, org.springframework.data.convert.ClassGeneratingEntityInstantiator$ObjectInstantiatorClassGenerator, org.mvel2.optimizers.impl.asm.ASMAccessorOptimizer$ContextClassLoader, gw.internal.gosu.compiler.SingleServingGosuClassLoader, # Real-time profiling using Java Flight Recorder (JFR). # This feature reports dimensional metrics to the ingest endpoint configured by # metric_ingest_uri and events to the ingest endpoint configured by event_ingest_uri. # Both ingest endpoints default to US production but they will be automatically set to EU # production when using an EU license key. Other ingest endpoints can be configured manually. # Requires a JVM that provides the JFR library. jfr: # Set to true to enable Real-time profiling with JFR. # Default is false. enabled: false # Set to true to enable audit logging which will display all JFR metrics and events in each harvest batch. # Audit logging is extremely verbose and should only be used for troubleshooting purposes. # Default is false. audit_logging: false # User-configurable custom labels for this agent. Labels are name-value pairs. # There is a maximum of 64 labels per agent. Names and values are limited to 255 characters. # Names and values may not contain colons (:) or semicolons (;). labels: # An example label #label_name: label_value # Application Environments # ------------------------------------------ # Environment specific settings are in this section. # You can use the environment to override the default settings. # For example, to change the app_name setting. # Use -Dnewrelic.environment=<environment> on the Java startup command line # to set the environment. # The default environment is production. # NOTE if your application has other named environments, you should # provide configuration settings for these environments here. development: <<: *default_settings app_name: My Application (Development) test: <<: *default_settings app_name: My Application (Test) production: <<: *default_settings staging: <<: *default_settings app_name: My Application (Staging) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.42409,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> config file template",
        "sections": "<em>Java</em> <em>agent</em> config file template",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": " options visit https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>agents</em>&#x2F;<em>java</em>-<em>agent</em>&#x2F;configuration&#x2F;<em>java</em>-<em>agent</em>-configuration-config-file. # # &lt;%= generated_for_user %&gt; # # This section is for settings common to all environments. # Do not add anything above this next line. common: &amp;default_settings"
      },
      "id": "603eb738e7b9d242542a0815"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-10-01T13:48:45Z",
      "updated_at": "2021-10-01T13:48:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Java 16 Agent v7.3.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.21349,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Java</em> <em>agent</em>",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": ". For configuration options and manual instrumentation, see Browser monitoring and the <em>Java</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Java agent and Heroku",
        "Tip",
        "Compatibility and requirements",
        "1. Enable the New Relic agent add-on in Heroku",
        "Caution",
        "2. Provide the path to the jar file",
        "Deploy to Heroku",
        "Deploy locally",
        "3. Configure your Heroku environment for New Relic",
        "Maven configuration",
        "Manual configuration",
        "4. Push your changes and open the app",
        "Troubleshoot",
        "For more help"
      ],
      "title": "Java agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Heroku"
      ],
      "external_id": "24069e33fc3bf337ebce684631a398f68eeb4d3b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/heroku/java-agent-heroku/",
      "published_at": "2021-10-01T13:49:49Z",
      "updated_at": "2021-09-14T07:18:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Java. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see Java agent Scala procedures for Heroku. Compatibility and requirements Java 7 or higher Maven 3 or higher (if you are using Maven) Latest New Relic Java agent version 1. Enable the New Relic agent add-on in Heroku After you ensure that you meet the requirements, enable the New Relic agent add-on in Heroku. Caution You must deploy your Java app to Heroku, following the Heroku instructions at least through the Deploy the app step, before you can enable the New Relic agent add-on. Log in to your Heroku account. From the APM Add-On Page, select a subscription plan. Select Install APM, and then select your target app from the dropdown. Installing the add-on automatically creates a New Relic account and configures access for Heroku servers. 2. Provide the path to the jar file After you enable the New Relic agent add-on, pass the javaagent flag to the java process and provide the path to the jar file by editing your Procfile. Deploy to Heroku If you deploy to Heroku, the location of the jar file for both Maven and manual configuration is in the app's root folder in a directory called newrelic. Example: web: java -javaagent:/app/newrelic/newrelic.jar -jar target/HELLOWORLD.jar Copy Deploy locally If you deploy locally, your jar file might be in a different directory. If it is, replace PATH/TO/NEWRELIC.JAR with the path to the jar file in your local directory. Example: web: java -javaagent:PATH/TO/NEWRELIC.JAR -jar target/HELLOWORLD.jar Copy 3. Configure your Heroku environment for New Relic After you provide the path to the jar file, configure your Heroku environment for New Relic, depending on your platform: Maven configuration Give your app a meaningful name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME=\"APP_NAME\" Copy Add your New Relic license key: heroku config:set NEW_RELIC_LICENSE_KEY=\"LICENSE_KEY\" Copy In your pom.xml, add the newrelic-agent dependency, substituting X.Y.Z with the latest Java agent version. Recommended: To ensure proper formatting is applied and contents do not contain sensitive information, format the syntax using http://codebeautify.org/xmlviewer. <dependency> <groupId>com.newrelic.agent.java</groupId> <artifactId>newrelic-java</artifactId> <version>X.Y.Z</version> <scope>provided</scope> <type>zip</type> </dependency> Copy In the <build> element of pom.xml, customize the build so it downloads the agent: <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>3.0.2</version> <executions> <execution> <id>unpack-newrelic</id> <phase>package</phase> <goals> <goal>unpack-dependencies</goal> </goals> <configuration> <includeGroupIds>com.newrelic.agent.java</includeGroupIds> <includeArtifactIds>newrelic-java</includeArtifactIds> <overWriteReleases>false</overWriteReleases> <overWriteSnapshots>false</overWriteSnapshots> <overWriteIfNewer>true</overWriteIfNewer> <outputDirectory>${project.basedir}</outputDirectory> <destFileName>newrelic</destFileName> </configuration> </execution> </executions> </plugin> Copy Manual configuration Log in to dashboard.heroku.com. Select your app. Select Add-ons > APM. Get the New Relic Java agent. Unzip the file into your app root. Edit newrelic.yml to customize the app_name setting with a descriptive app name. Also in newrelic.yml, add your license key to the license_key setting. 4. Push your changes and open the app After you configure your Heroku environment for New Relic, push your changes and open the app to monitor it with New Relic. Push your changes to the dyno with this Heroku toolbelt command: git add . git commit -m 'YOUR COMMIT MESSAGE' git push heroku master Copy Open your app in your browser with this Heroku toolbelt command: heroku open Copy Generate some traffic to your app and wait a few minutes. Check your app's performance in Heroku by selecting your app and then selecting the New Relic add-on. If no data appears or if you have problems, follow the troubleshooting tips. Troubleshoot Here are some tips to help you troubleshoot: If you don't see the New Relic add-on after you generate traffic, go to Heroku, select Find More Add Ons, and add the APM add-on. If no data appears after waiting a few minutes, follow the troubleshooting procedures for Heroku (Java). For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.94026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Java</em> <em>agent</em> and Heroku",
        "sections": "<em>Java</em> <em>agent</em> and Heroku",
        "tags": "<em>Java</em> <em>agent</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various <em>agent</em> languages, including <em>Java</em>. With New Relic, you can extend Heroku with metrics from APM or browser monitoring. Tip If you use Scala, see <em>Java</em> <em>agent</em> Scala procedures for Heroku. Compatibility"
      },
      "id": "6043ba0f64441f731e378ee0"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/agent-attributes": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.37595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.28018,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " transaction collects both metric timeslice and event <em>data</em>. Custom instrumentation for already instrumented transactions collects only metric timeslice <em>data</em>. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ebd20f78d5084c48b1669ae33569da3f829fec6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-08-20T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.4016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "6043f7d6196a67c1d4960f72"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/collect-custom-metrics": [
    {
      "image": "https://docs.newrelic.com/static/c8a95ab42842c39be72d4b0c914a3595/c1b63/edit_retention_settings.png",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/manage-data/manage-data-retention/",
      "sections": [
        "Manage data retention",
        "Important",
        "Retention periods",
        "Adjust retention values",
        "User roles and retention",
        "Reduce retention values",
        "Copy retention values",
        "Data deletion",
        "Manage retention via API",
        "List customizable retention event namespaces",
        "List active rules on an account",
        "Show active rule on an account/namespace pair",
        "Create a new rule",
        "Delete an existing rule",
        "Copy existing child account rules to others",
        "Metric data rollup",
        "Key metrics reported by APM, browser, and mobile",
        "Raw metric data",
        "Account inheritance",
        "Original pricing plan differences"
      ],
      "published_at": "2021-10-01T15:14:03Z",
      "title": "Manage data retention",
      "updated_at": "2021-09-27T16:03:43Z",
      "type": "docs",
      "external_id": "0810fd221bf5161139bc472c29888adc424e2761",
      "document_type": "page",
      "popularity": 1,
      "body": "Using the Data retention page, review and manage how long your data will be stored in the New Relic database (NRDB). Keep data for shorter periods to protect sensitive information or for longer periods to notice trends over time. At a glance, get the sources of data that you’re storing, when they were last updated, and the length the data is stored. Retention settings range from 8 to 395 days depending on the data's source and namespace classifications in New Relic. From the Data retention page, which shows the source of data, you can click Edit settings to adjust the data retention for each source. Important This doc applies to organizations on our New Relic One pricing plan. If you're on our original product-based pricing plan, you have different data retention rules. See Original data retention. Not sure which plan you're on? See Overview of pricing and user model. Retention periods The following table shows the default retention settings for our New Relic One pricing plan. To adjust retention settings, you must be on a Pro or Enterprise tier. Source Event namespace Days retained APM APM 8 APM APM errors 8 Browser Browser 8 Browser Browser events 8 Browser Browser JS errors 8 Browser Browser page view timing 8 Custom events Custom events 30 Serverless Lambda 8 Serverless Lambda custom 8 Serverless Lambda spans 8 Logs Log 30 Infrastructure Infrastructure processes 8 Infrastructure Infrastructure integrations 395 (13 months) Mobile Mobile crash event trails (breadcrumb) 8 Mobile Mobile exception 8 Mobile Mobile general 8 Mobile Mobile error 8 Mobile Mobile crash 90 Mobile Mobile session 90 Synthetics Synthetics data 395 (13 months) Traces Traces 8 Adjust retention values You can adjust your retention periods to better support your data needs. For example, you might reduce your contracted retention values to optimize query performance. Conversely, you might increase retention for some data types to support more granular analysis over longer periods of time, or to meet data compliance requirements. The ability to edit data retention periods requires a specific edition of New Relic. Original pricing plan users must have Insights Pro. New Relic One pricing plan users have these edition considerations: Standard edition: your data retention is fixed, and falls between 8 and 395 days (about 13 months) of retention, depending on which capabilities of the New Relic platform you’re using. The prescribed retention levels ensure that you can explore your data and experience the value of New Relic. If you need to raise some of the retention limits for your particular business needs, you can purchase additional retention. Pro or Enterprise: If after you finalize your contracted retention you realize you need to make changes, you can adjust your telemetry data retention settings yourself. User roles and retention In order to edit retention, users need these roles: Users on New Relic One user model: the Billing user role Users on the original user model: the Owner or Data retention manager add-on role Reduce retention values When you reduce the number of days that specific data sources are retained, existing data of that source type won't immediately disappear. That data might be visible and returned in queries for up to several weeks. We have safeguards in place to ensure you don't accidentally delete data, but this also means that reducing retention values isn't a good strategy for quickly removing data. That said, your change is registered in the system within 12 hours and new data of the adjusted source type will be retained for the new duration. Note that reducing data retention below your contracted retention values will not reduce New Relic’s data ingest charges. Conversely, increasing retention for targeted telemetry data types is likely to trigger a conversation with New Relic about adjusting your data ingest charges. Copy retention values If you have permission to edit retention settings, you can also copy retention values from one child account to other child accounts under the same parent account. To do this, from within a child account, select the Copy settings to other accounts link, and then select the child accounts you want to apply the retention values to. Select the child accounts you want to copy retention values to. Data deletion Once telemetry data (events, metrics, logs, traces) is reported to New Relic and available for querying, that data cannot be edited or deleted. This is a purposeful design decision that optimizes New Relic's speed and performance. Data will expire after its data retention period ends. If you need to delete data, contact your New Relic representative. Manage retention via API You can change your retention settings with NerdGraph as well as the UI. For the following examples, provide any necessary information, and run the code in the NerdGraph GraphiQL explorer. Your retention changes take effect within 24 hours after updating. List customizable retention event namespaces To list the customizable retention event names spaces for your account: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { customizableRetention { eventNamespaces { namespace } } } } } } Copy List active rules on an account To list active rules on an account: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRules { id deletedAt deletedById createdAt createdById retentionInDays namespace } } } } } Copy Show active rule on an account/namespace pair To show the active rule on a specific account/namespace pair: query { actor { account(id: YOUR_ACCOUNT_ID) { dataManagement { eventRetentionRule(namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } } } } Copy Create a new rule To create a new rule: mutation { dataManagementCreateEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\", retentionInDays: 8) { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Delete an existing rule If you delete a rule applied to a child account, that child account will adopt the current retention value of its parent account for the given namespace. If you delete a rule applied to a parent account, the default retention value will re-apply for the given namespace. To delete an existing rule: mutation { dataManagementDeleteEventRetentionRule(accountId: YOUR_ACCOUNT_ID, namespace: \"APM\") { id deletedById deletedAt createdById createdAt retentionInDays namespace } } Copy Copy existing child account rules to others You can specify a child account to be the template or source account, and have other destination child accounts adopt the same namespace retention values of the source child account. Note: all child accounts must be within the same parent account. To copy an existing set of retentions: mutation { dataManagementCopyRetentions( sourceAccountId: SOURCE_ACCOUNT_ID, destinationAccountIds: [DESTINATION_ACCOUNT_ID_1, DESTINATION_ACCOUNT_ID_2, DESTINATION_ACCOUNT_ID_3]) { success failure } } Copy Success and failure will return lists of destination account IDs that were successful (or failed) in copying rules from the source account. Metric data rollup Metric timeslice data is generated by APM (both custom metrics and default metrics), mobile, and browser agents. A metric timeslice consists of three parts: a metric name, the segment of time the metric represents (the \"timeslice\"), and a numeric value (the measurement). APM, browser, and mobile agents can collect thousands of metric timeslices per minute for a variety of performance metrics, such as error rate, bandwidth usage, and garbage collection time. Metric timeslice data is aggregated like this: first to 1-minute rollups that are stored for 8 days the 1-minute rollups are also added to 1-hour roll-ups that are retained for 90 days Key metric data is stored indefinitely. We meter on the size of the initial 1-minute rollup, and not on any of the subsequent rollups. Read on to learn the key metrics by product. Key metrics reported by APM, browser, and mobile Here are the key metrics that are stored indefinitely. Product Key metrics APM Apdex, for app server Throughput and page views Response time, plus breakdown into tiers or categories on your app's main Overview chart Page load time, plus breakdown into segments Error rate CPU usage Memory usage Browser Apdex, for browser Browser page load time Throughput total. After 90 days, there is no breakout by browser type, and only the combined average value is available for the time range requested. Mobile Crash rate: For iOS and for Android Network throughput Network response time Network error rates Interaction traces Raw metric data Raw metric data is handled a little differently when it comes from APM, Prometheus remote-write API, metrics functionality of the Telemetry SDK, and integrations built on the Telemetry SDK. Raw sub-minute metric data is stored for 30 days. Beyond 30 days, 1-minute resolution roll-up events are created and retained for 13 months. Like with metric timeslice data, we meter and bill on the size of the raw ingest, not the subsequent rollups. Metric retention periods are not editable. Account inheritance The data retention settings of a parent account are inherited by its children accounts. In this context, an organization's first account is treated as the parent account, and other accounts added to the organization inherit the settings in that account. You also have the option to override those settings and set account-specific data retention settings. Original pricing plan differences If you're on our original product-based pricing plan, you have different data retention rules. See Original data retention.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.80392,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Key <em>metrics</em> reported by <em>APM</em>, <em>browser</em>, and <em>mobile</em>",
        "body": " data is generated by <em>APM</em> (both <em>custom</em> <em>metrics</em> and default <em>metrics</em>), <em>mobile</em>, and <em>browser</em> agents. A <em>metric</em> timeslice consists of three parts: a <em>metric</em> name, the segment of time the <em>metric</em> represents (the &quot;timeslice&quot;), and a numeric value (the measurement). <em>APM</em>, <em>browser</em>, and <em>mobile</em> agents can <em>collect</em>"
      },
      "id": "603e974528ccbc3e2aeba7a5"
    },
    {
      "sections": [
        "Manage data coming into New Relic",
        "Important",
        "Data ingestion sources",
        "Break down data to see what's contributing to your ingest",
        "How we break your ingest data down",
        "Set alerts for data use",
        "Adjust your data ingest"
      ],
      "title": "Manage data coming into New Relic",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Manage data"
      ],
      "external_id": "f6af5123503549262d48d7cc1cc609b506b0853a",
      "image": "https://docs.newrelic.com/static/82d3c36157005ac0efe40cd6e10fe06b/b23ad/data-facet.png",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/manage-data/manage-data-coming-new-relic/",
      "published_at": "2021-10-01T15:12:14Z",
      "updated_at": "2021-09-27T15:53:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you connect your data to New Relic, we process what we receive and apply data dropping and transformation rules. Then we count the bytes needed to represent your data in a standard format, like JSON. If you're on our New Relic One pricing plan, you're charged by the number of bytes written to our database, above and beyond the standard amount that’s free. Important This doc is for accounts on our New Relic One pricing plan. If you're on our original product-based pricing plan, see Original data retention. Not sure which you're on? See Overview of pricing and user model. The Data ingestion page shows your ingest rates for a period you specify on the top-right of the Data management hub. Since 30 days ago is the default setting, but you can also set a custom date span. The page shows your daily average GBs, and the total for the range you set. You can toggle between an overall ingest view and an account view to identify which of your accounts are sending the most data. The page also provides the current month-to-date, and the projected end-of-month total ingest rates. With this information, you can proactively drop data or turn off agents in order to manage ingest and, therefore, costs. If you want to take a look at how we query the data, click the ellipsis icon (just above the chart) to slide out the chart query and open it in our query builder. And If you want to drill down further into your data usage, check out the sample queries in the usage docs. From the Login drop-down, select Manage your data, and then select Data ingestion. This is the Data ingestion page with data source and account views. Data ingestion sources The Data ingestion page describes which of your data sources provide the most data on average and during specific data ranges. The sources are described here. Billable data sources Description Timeslices (1-minute) and Metric:Raw Metrics are timeslices + MetricRaw Metric group: MetricsBytes Metric timeslice data averages to one-hour periods after eight days. After 90 days, the permanent metric data continues to be stored in one-hour periods. We currently store the raw metric data for 30 days. You are only billed for the initial ingest volume. You are not billed for subsequent rollups. APM (transactions and errors) APM events Metric group: ApmEventsBytes InfraSamples:Raw Includes multiple Infrastructure events Infrastructure host data Metric group:InfraHostBytes Information related to your servers and virtual machines coming from infrastructure agents, including storage and network data Infrastructure process data stored in ProcessSample. Metric group: InfraProcessBytes Data are metrics related to each process running on the hosts running the Infrastructure agent. This feature is turned off by default. Infrastructure integrations Metric group: InfraIntegrationBytes Performance data related to applications and services, typically managed by the customer, including data related to Docker containers, Windows services, Nagios checks, and cloud integrations such as managed services in AWS, Azure, and GCP. Logging Includes logs and any Log_<value> custom data partition created Metric group: LoggingBytes Log records are stored into the Log event type by default. Additional custom data partitions will create new event types, which are always prefixed with Log_ and will be counted as part of the overall set of log data stored. With LogExtendedRecord, log messages longer than 4KB are split into multiple events that, when needed, are stitched together to display the original message; this reduces the size of message data. As of September 2021, log storage as blobs replaces LogExtendedRecord. With blob storage, NRDB can store up to 128,000 bytes for any attribute, not just messages. For more information, see our blobs documentation for logs. Default Custom events Metric group: CustomEventsBytes Mobile error Mobile general Breadcrumb crash event trails Mobile session Mobile exception Mobile crash Mobile events Metric group: MobileEventsBytes Tracing Metric group: TracingBytes TracingBytes includes Span and OpenTelemetry's SpanEvent. You are not charged for DistributedTraceSummary events. Browser:EventLog Browser Browser:JSErrors PcvPerf (PageView timing) Browser events Metric group: BrowserEventsBytes Lambda Serverless Metric group: ServerlessBytes Break down data to see what's contributing to your ingest You can inspect your data ingest to gain more information about your ingest health. This way, you'll know your baselines, and can more easily spot an anomaly like an ingest spike, as well as its source. To break down your ingested data, start from the chart on the Data ingestion page. Think of the data source bands as the Y axis, and the dates as the X axis. Click on the band you want to inspect at the spot in the X axis that corresponds with the date you want to investigate. This image shows the Metrics band for June 15 right before it's clicked. A modal opens with the account, data source, and facet selected. You can do a handful of things on this page: Change the account, data source, or facet you want to drill down into. Change the date and time to investigate. Review the results of the query in chart form. The chart displays the top 15 results for the facet query. Open the NRQL query in the Query builder where you'll find additional facets that you can use. Learn more about NRQL queries here. How we break your ingest data down Some of the content in the UI is variable, depending on your account. This information is intended to help you understand how we're working with your ingest data. The chart on the Data ingestion page shows data usage for a little longer time frame than that covered by your retention settings for each data ingest source. If you choose a date outside of your designated retention period for an ingest source, you'll get the message that there's no chart data available. Select a more recent date to fix this problem. If you inspect a data source for an account that has less than a terrabyte of data, we compute the ingest volume over a 24 hour period; otherwise, we compute it for a 1 hour period. The ingest value provided on the main Data ingestion chart will be slightly different from that reflected during inspection. This is because our facet computation is an estimate. Set alerts for data use Query and alert on usage data describes how to set alerts to get notified if you're nearing data ingest limits you don't want to cross. For example, you might set an alert on logs, which can stack up quickly in an active system. Adjust your data ingest Drop data for lower retention costs and data compliance On ingest, we apply data dropping rules so you won't be charged for data that's not useful. Learn how to set additional data dropping rules yourself. Use NerdGraph to drop entire data types or drop data attributes from data types so they’re not written to NRDB. This enables you to focus on the data you want, reduces retention costs, and avoids writing sensitive data to the database. For dropping log data, see Drop data with drop filter rules. Turn off agents and integrations If you don’t need data from specific agents or integrations that you have installed, you can uninstall/delete those tools. For instructions, see the specific documentation for an agent or integration.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 132.77502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ". As of September 2021, log storage as blobs replaces LogExtendedRecord. With blob storage, NRDB can store up to 128,000 bytes for any attribute, not just messages. For more information, see our blobs documentation for logs. Default <em>Custom</em> events <em>Metric</em> group: <em>Custom</em>EventsBytes <em>Mobile</em> error <em>Mobile</em>"
      },
      "id": "603e978228ccbc8984eba79e"
    },
    {
      "sections": [
        "Introduction to New Relic for Ruby",
        "Compatibility and requirements",
        "Monitor app performance",
        "Install the agent",
        "Extend agent instrumentation",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Ruby",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Getting started"
      ],
      "external_id": "2051cf404d245d992e5bf734ec28bdef44c04bc9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/getting-started/introduction-new-relic-ruby/",
      "published_at": "2021-10-01T22:26:23Z",
      "updated_at": "2021-09-27T15:14:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent monitors your applications to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Compatibility and requirements The Ruby agent supports many of the most common Ruby frameworks and platforms. You can also use the Ruby agent in a Google App Engine (GAE) flexible environment. Before you install the Ruby agent, ensure your system meets the system requirements. Monitor app performance View the big picture of your app Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app. Create architectural maps of your app. Enable distributed tracing to understand activity in an environment that relies on many services. Install New Relic Infrastructure and view detailed host data for your app. Find errors and problems quickly Track key transactions. Create customized dashboards for important metrics. Alert your team when errors or problems occur before they affect your users. Track performance after a deployment. Drill down into performance details Examine code-level transaction traces Examine database query traces. Examine error traces. Monitor Ruby background processes and daemons. Analyze business data Use the Ruby agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own. Query your data using NRQL. Send your own event data. Create and share customizable, interactive dashboards. Install the agent After creating a New Relic account, use our launcher or see the installation instructions. Install docs for gem (recommended) Install docs for rails plugin Add Ruby data Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Automatically inject the browser monitoring agent to get visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to fully customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom metrics: Record additional metrics as part of a transaction to gain more insights into your app's performance and business data. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshooting If you encounter issues with the Ruby agent, see our full list of troubleshooting documentation. Common issues include: No data appears (Ruby) Gems incompatible with the Ruby agent Sending handled errors to New Relic Controlling when the Ruby agent starts Check the source code The Ruby agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 127.99887,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " not captured as part of our framework instrumentation. Agent API: Use the agent API to fully customize the agent&#x27;s behavior. For example, you can <em>collect</em> <em>custom</em> <em>metrics</em>, flag an error, or ignore a particular transaction entirely. <em>Custom</em> <em>metrics</em>: Record additional <em>metrics</em> as part of a transaction to gain more"
      },
      "id": "603eb68428ccbcae31eba779"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/custom-instrumentation": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.37592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-10-01T15:38:24Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.27826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "603eb9db28ccbc127aeba79e"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ebd20f78d5084c48b1669ae33569da3f829fec6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-08-20T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.4016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "6043f7d6196a67c1d4960f72"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/link-your-applications-kubernetes": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.37592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.28015,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " transaction collects both metric timeslice and event <em>data</em>. Custom instrumentation for already instrumented transactions collects only metric timeslice <em>data</em>. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-10-01T15:38:24Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.27826,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.37589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.28014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " transaction collects both metric timeslice and event <em>data</em>. Custom instrumentation for already instrumented transactions collects only metric timeslice <em>data</em>. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-10-01T15:38:24Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.27823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/manage-apm-agents/agent-data/real-time-streaming": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.28014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " transaction collects both metric timeslice and event <em>data</em>. Custom instrumentation for already instrumented transactions collects only metric timeslice <em>data</em>. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-10-01T15:38:24Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.27823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to each of these destinations. You can also collect custom attributes to send additional <em>data</em> to New Relic. Attribute destination flow This diagram illustrates how an <em>agent</em> decides to send attributes to each destination. <em>Agent</em> attribute collection: An <em>agent</em> makes three different decisions when sending"
      },
      "id": "603eb9db28ccbc127aeba79e"
    },
    {
      "sections": [
        "Manage errors in APM: Collect, ignore, or mark as expected",
        "Collect errors not instrumented by default",
        "Ignore errors",
        "Tip",
        "Ignore errors using server-side configuration in the UI",
        "Ignore errors using agent configuration",
        "Expected errors (Java, Node.js, Python, Ruby, and .NET only)",
        "View errors in the UI"
      ],
      "title": "Manage errors in APM: Collect, ignore, or mark as expected",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ebd20f78d5084c48b1669ae33569da3f829fec6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/manage-errors-apm-collect-ignore-or-mark-expected/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-08-20T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM agents automatically report error data for supported frameworks. To optimize error reporting and alerting, you can further manage errors in order to: Catch errors that we don't instrument by default. Ignore errors that you don't want reported at all. Filter out noise from expected errors so you can focus on the errors that are affecting performance. (Java, Ruby, Node, Python, and .NET agents only) Collect errors not instrumented by default APM agents include API calls to report (or \"notice\") errors. These are useful when APM doesn't instrument your framework automatically or when there are particular errors that aren't caught for your supported framework. To learn how to get an APM agent to report an error, see the agent-specific API documentation: C SDK: newrelic_notice_error() Go: NoticeError() Java: NoticeError() .NET: NoticeError() Node.js: noticeError() PHP: newrelic_notice_error() Python: notice_error() Ruby: notice_error() Ignore errors Sometimes the APM agent instruments an error that you don't want reported, such as errors that contain sensitive information like user login errors. If you don't want an error to report to the our collector, you can ignore the error, and the APM agent discards the error entirely. Tip For Java, Ruby, Node.js, and Python: If you want to report errors to APM but don't want those errors to affect your Apdex or error rate, mark them as expected instead. There are two ways to ignore errors: through the agent configuration or through server-side configuration in the UI: Ignore errors using server-side configuration in the UI This option depends on whether the agent supports server-side configuration. If it is not already enabled, enable server-side configuration. Go to the Server-side configuration menu for the application that has errors that you want to ignore. Under Error collection, look for Ignore from error collection. Add the HTTP code or the Error class for the errors that you want to ignore. Select Save server-side configuration. Ignore errors using agent configuration To ignore an error using the agent configuration, see the configuration documentation for your agent: C SDK: Not available. For more information, see the C SDK errors example on GitHub. Go: ErrorCollector.IgnoreStatusCodes. Java: error_collector.ignore_classes, error_collector.ignore_classes.message, or error_collector.ignore_status_codes. For additional information, see Java agent error configuration. .NET: ignoreErrors or ignoreStatusCodes. Node.js: ignore_status_codes, ignore_classes, or ignore_messages. PHP: error_collector.ignore_exceptions or error_collector.ignore_errors. Python: error_collector.ignore_classes or error_collector.ignore_status_codes. Ruby: error_collector.ignore_errors. Expected errors (Java, Node.js, Python, Ruby, and .NET only) For the below APM agents, you can mark errors as expected. These errors will be reported to APM and available for viewing, but they won't affect the Apdex or error rate (or alert conditions based on error rate). To configure errors as expected, see the agent-specific documentation: Java Ruby Node.js .NET Python If expected errors are enabled, APM's Error analytics page will, by default, have a filter applied with the error.expected attribute set to false, meaning expected errors will not be displayed. To view expected errors, turn off the error.expected filter. To view expected errors, query your data: To view charts of expected errors, create a query for the error.expected attribute. To create alert conditions for NRQL queries, use the error.expected attribute. View errors in the UI Among other places, error data appears in these parts of the UI: Error analytics page: shows in-depth charts and visual analysis of errors. APM Overview page: shows a high-level view of your application, which includes errors. Alert conditions: can be based on error rate. The transactionError event: contains underlying error data, which can be used in NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.40158,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "sections": "<em>Manage</em> errors in <em>APM</em>: Collect, ignore, or mark as expected",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "<em>APM</em> <em>agents</em> automatically report error <em>data</em> for supported frameworks. To optimize error reporting and alerting, you can further <em>manage</em> errors in order to: Catch errors that we don&#x27;t instrument by default. Ignore errors that you don&#x27;t want reported at all. Filter out noise from expected errors so you"
      },
      "id": "6043f7d6196a67c1d4960f72"
    }
  ],
  "/docs/agents/manage-apm-agents/app-naming/name-your-application": [
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "af78a44c170729aac326233d6468b0b61b6cdff2",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-10-01T15:41:35Z",
      "updated_at": "2021-09-14T10:33:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with labels and categories. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 209.51837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use multiple <em>names</em> for an <em>app</em>",
        "sections": "<em>Name</em> <em>app</em> instances via <em>agent</em> config file",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " with the same <em>app</em> <em>name</em>, <em>agent</em> language, and license key, New Relic aggregates their data into a single New Relic-monitored <em>app</em>. You can also view data for the individual hosts and instances from the <em>app</em>&#x27;s New Relic <em>APM</em> Overview page. To segment your <em>app</em> in a different way, or to work with each"
      },
      "id": "603ebde1196a677dbaa83dec"
    },
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.33667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.27403,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go <em>app</em>. Java custom instrumentation New Relic&#x27;s Java <em>agent</em> supports"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app": [
    {
      "sections": [
        "Name or change the name of your application",
        "Important",
        "Changing the name vs. the alias",
        "Give each app a descriptive name",
        "Assign the name in your config file",
        "Change the application's alias",
        "Tip",
        "Using multiple names for an app"
      ],
      "title": "Name or change the name of your application",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "bfd84f5a7908a84cbe4fa4e8ccb44be94997c85b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/name-your-application/",
      "published_at": "2021-10-01T15:40:43Z",
      "updated_at": "2021-07-09T04:49:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic connects metrics to individual applications using your license key and the primary application name. You can change the app's name in your config file, or assign an alias to the app to change how it appears in the New Relic UI. Important If you do not specify the app name in your New Relic configuration file, most New Relic agents provide a generic application name by default. To ensure all aggregated data for the same app is reported accurately, make sure you give each app a descriptive name. Changing the name vs. the alias You can assign a new app name or change the app alias. These have two different effects: Term How to change it Effect Name Assign the name in your config file Changing the app name in the agent's configuration file will cause the application to report to a new heading in the New Relic user interface, with a total discontinuity of data. This is useful, for example, if you want to start over and report new data. If no other agents are reporting to the old app name, the old app name will appear gray and can be deleted. Alias Change the alias in the APM Settings UI Creating an alias for the app name only changes how the app name appears in the New Relic UI. Changing the alias does not affect how data is reported. It simply helps you keep track of your data with a useful alias. Give each app a descriptive name By default, most New Relic agents provide a default application name, such as My Application or PHP Application, for each app that is linked to your account. Important We recommend changing the default name of an app to a more descriptive name before deployment, and it can be up to 128 characters long. Each unique app name creates a new application record in your New Relic UI, which allows you to: Run an application on more than one host, and have all the data aggregated (collected) under the same name. Run multiple applications on a single host, and have all the data aggregated (collected) under different names. Assign the name in your config file To change the app name, set the app name value in the agent's configuration file. If you have deployed an app via one APM agent, and then deploy another app with the same name via a different APM agent, New Relic will automatically append the agent language name to the end of the second app's name. For example, if you deploy a Node.js app named New-App, and then deploy a .NET app named New-App, New Relic will automatically append the second app name as New-App (DOTNET). Agent Configuration file value C Identify a maximum of three names separated by a semicolon ;in your newrelic_app_config_t* config;. Go Set AppName to a maximum of three names separated by a semicolon. Java See the options for naming your Java application. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP See the options for naming your PHP application. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. Change the application's alias The application name you set in the New Relic user interface is a human-readable alias. If you rename your app, the visible name is updated everywhere in the New Relic UI, including in linked browser apps. Initially, this alias is the same as the app's identifier name in the New Relic agent configuration file. However, changing the UI alias does not affect the underlying app name used for data rollup, which is set in the agent config file. The application must be actively reporting data to change the alias. Changing the UI alias will cause all agents that report under the app identifier to restart themselves. To change the alias for your application's name in the New Relic user interface: Go to one.newrelic.com > APM > (select an app) > Settings > Application. In the Application alias field, type a new name (alias) for the selected app. Select Save application settings. Tip You can also change the app's alias with the New Relic REST API. Using multiple names for an app By giving your app multiple names, you can aggregate metrics for multiple agents across an entire app or service. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.51897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Name</em> or change the <em>name</em> of your <em>application</em>",
        "sections": "<em>Name</em> or change the <em>name</em> of your <em>application</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ", for example, if you want to start over and report new data. If no other <em>agents</em> are reporting to the old <em>app</em> <em>name</em>, the old <em>app</em> <em>name</em> will appear gray and can be deleted. Alias Change the alias in the <em>APM</em> Settings UI Creating an alias for the <em>app</em> <em>name</em> only changes how the <em>app</em> <em>name</em> appears in the New Relic"
      },
      "id": "603eb81264441fa6a74e889a"
    },
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.336655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.27402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go <em>app</em>. Java custom instrumentation New Relic&#x27;s Java <em>agent</em> supports"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/manage-apm-agents/configuration/add-rename-remove-hosts": [
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-10-01T15:41:37Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.94662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ". If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your <em>APM</em> <em>agent</em>&#x27;s high security mode, which is set in the <em>configuration</em> file. High security mode and configurable security policies do not apply to Lambda monitoring or use"
      },
      "id": "6043d4a8196a6773a1960f68"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-01T15:42:26Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.64404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " change automatically applies to all <em>APM</em> <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.00232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " instrumentation: <em>Configuration</em> file: Use the <em>agent</em> <em>configuration</em> file to specify the functions and methods you want instrumented. The <em>agent</em> <em>configuration</em> file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies": [
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-01T15:42:26Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.64401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " change automatically applies to all <em>APM</em> <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.0023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " instrumentation: <em>Configuration</em> file: Use the <em>agent</em> <em>configuration</em> file to specify the functions and methods you want instrumented. The <em>agent</em> <em>configuration</em> file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "af78a44c170729aac326233d6468b0b61b6cdff2",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-10-01T15:41:35Z",
      "updated_at": "2021-09-14T10:33:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with labels and categories. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.7372,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name app instances via <em>agent</em> config file",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " with the same app name, <em>agent</em> language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app&#x27;s New Relic <em>APM</em> Overview page. To segment your app in a different way, or to work with each"
      },
      "id": "603ebde1196a677dbaa83dec"
    }
  ],
  "/docs/agents/manage-apm-agents/configuration/high-security-mode": [
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-10-01T15:41:37Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.9466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ". If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your <em>APM</em> <em>agent</em>&#x27;s high security mode, which is set in the <em>configuration</em> file. High security mode and configurable security policies do not apply to Lambda monitoring or use"
      },
      "id": "6043d4a8196a6773a1960f68"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-01T15:42:26Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.64401,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " change automatically applies to all <em>APM</em> <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.0023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " instrumentation: <em>Configuration</em> file: Use the <em>agent</em> <em>configuration</em> file to specify the functions and methods you want instrumented. The <em>agent</em> <em>configuration</em> file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration": [
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-10-01T15:41:37Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.9466,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ". If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your <em>APM</em> <em>agent</em>&#x27;s high security mode, which is set in the <em>configuration</em> file. High security mode and configurable security policies do not apply to Lambda monitoring or use"
      },
      "id": "6043d4a8196a6773a1960f68"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.0023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " instrumentation: <em>Configuration</em> file: Use the <em>agent</em> <em>configuration</em> file to specify the functions and methods you want instrumented. The <em>agent</em> <em>configuration</em> file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Use multiple names for an app",
        "Important",
        "Roll up app data",
        "Prevent duplicate transaction events",
        "Roll up browser data",
        "Define app names from most to least specific",
        "Name app instances via agent config file",
        "Examples",
        "One app, three clusters",
        "Two instances of one app",
        "Other options to organize your apps"
      ],
      "title": "Use multiple names for an app",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "App naming"
      ],
      "external_id": "af78a44c170729aac326233d6468b0b61b6cdff2",
      "image": "https://docs.newrelic.com/static/67c256b1f08164be39b8eeb2ca8ff4e6/8c557/Insights-ToggleOnOff.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/app-naming/use-multiple-names-app/",
      "published_at": "2021-10-01T15:41:35Z",
      "updated_at": "2021-09-14T10:33:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When working with your data in New Relic, you may want to view aggregated data for an application across clusters, environments, or data centers, while at the same time be able to view each of your application instance's data individually. Important If you use multiple names for an app, the last name assigned is the least specific name New Relic uses to roll up the data. For best results to view both instance-level and aggregated data, set the order of your app's rollup names from most specific to least specific in your configuration file. Roll up app data Normally, when two instances report with the same app name, agent language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app's New Relic APM Overview page. To segment your app in a different way, or to work with each instance as an individual app while maintaining the overall view of the data, use your New Relic agent's config file to give an app up to three different rollup names. New Relic will then report the app's data separately to each app listed in the config file. For example, you might want to separate the data collected for your app running in development, staging, and production environments, but also have a common view of the app in every environment. Or, if you have two data centers running the same code, you could name one app EastCoastApp;AggregateApp and the second app WestCoastApp;AggregateApp. Prevent duplicate transaction events By default, an app with multiple names will generate multiple events for transactions (a duplicate transaction for each name). For example, if you give your app three names, that's three times the number of events for transactions. To avoid duplicate events, disable collection for each of the duplicate app names: Go to one.newrelic.com or one.eu.newrelic.com > More > Manage Insights Data. Toggle data collection on/off for duplicate app names, then save. Roll up browser data When you use multiple names to report application data, any browser monitoring data from that application will also be grouped into multiple applications using the same configuration. Important Session trace data will only report to the first application listed. Other browser data will populate into each of the up to three applications, but session trace data will be limited to the most specific application. Define app names from most to least specific You can give each app up to three names, which New Relic uses to aggregate data from most to least specific. You can then use the New Relic UI to view data for each app name individually, as well as in aggregate for overall application performance. When doing so, the order in which you specify the app names is important. Using multiple names Comments Most specific A unique rollup name. Less specific A shared rollup name to aggregate data in the New Relic UI. This provides more general organization. Optional, least specific An additional, shared rollup name. If used, this is the most general name New Relic uses to aggregate data into a single app. Name app instances via agent config file The naming convention you use in your configuration file depends on your New Relic agent. Set the order of your app's names so that the first rollup name is the most unique. The second and third names can be unique, or they can be the same. The second name is more general for aggregate data, and the third name (if used) is the most general. Agent Configuration file value C Identify a maximum of three names separated by a semicolon ; in your newrelic_app_config_t * config;. Go Set AppName to a maximum of three names separated by a semicolon. Java Set app_name to a maximum of three names separated by a semicolon. .NET Use any of the available options to name your .NET app. Node.js Set app_name to a maximum of three names separated by a comma. Enclose the string of names with single or double quotes. (Or, change the environment variable NEW_RELIC_APP_NAME.) PHP Use any of the available options to name your PHP application. Use three names separated by a semicolon. Python Set app_name to a maximum of three names separated by a semicolon. Do not add a space after the semicolon, or the next name will be interpreted as a comment. Ruby Set app_name to a maximum of three names separated by a semicolon. For more information, refer to the configuration file documentation for your agent. Examples Here are examples of how you could use multiple rollup names for a single app. One app, three clusters A Java app collecting survey data runs on three clusters. Change the value for the app name in your agent config file by giving it three different names, one for each cluster. Cluster 1: app_name: SurveyCluster1;Survey Data Copy Cluster 2: app_name: SurveyCluster2;Survey Data Copy Cluster 3: app_name: SurveyCluster3;Survey Data Copy This will report four applications in APM: The app name for aggregate data from all three clusters is Survey Data. Three individual applications named SurveyCluster1, SurveyCluster2, and SurveyCluster3. Two instances of one app A PHP agent is monitoring an e-commerce application running on two clusters in each of two data centers, and you want to view data for each subgroup as well as the overall aggregated data. Cluster A: newrelic.appname=\"EcomClusterA;EcomEast;EcomAll\" Copy Cluster B: newrelic.appname=\"EcomClusterB;EcomEast;EcomAll\" Copy Cluster C: newrelic.appname=\"EcomClusterC;EcomWest;EcomAll\" Copy Cluster D: newrelic.appname=\"EcomClusterD;EcomWest;EcomAll\" Copy This example configuration will report seven applications in the APM UI: Four apps: One for each of the four clusters (A B C D) Two apps: One for each datacenter (East and West) One app for the overall data across clusters and data centers (EcomAll) Other options to organize your apps If you do not want to apply multiple names to your apps, you can organize them with labels and categories. This allows you to easily sort, filter, and page through them from their product index pages in the New Relic UI. You can also set distinct performance thresholds for each environment with alert conditions and key transactions. These thresholds will apply to the individual apps, while the overall app will not have its own thresholds. The overall app will treat incoming data according to the threshold for the relevant enviroment.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.7372,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Name app instances via <em>agent</em> config file",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " with the same app name, <em>agent</em> language, and license key, New Relic aggregates their data into a single New Relic-monitored app. You can also view data for the individual hosts and instances from the app&#x27;s New Relic <em>APM</em> Overview page. To segment your app in a different way, or to work with each"
      },
      "id": "603ebde1196a677dbaa83dec"
    }
  ],
  "/docs/agents/manage-apm-agents/configuration/view-config-values-your-app": [
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-10-01T15:41:37Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.94658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": "Enable <em>configurable</em> security policies",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ". If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your <em>APM</em> <em>agent</em>&#x27;s high security mode, which is set in the <em>configuration</em> file. High security mode and configurable security policies do not apply to Lambda monitoring or use"
      },
      "id": "6043d4a8196a6773a1960f68"
    },
    {
      "sections": [
        "Server-side agent configuration",
        "Centralization and security",
        "Server-side configuration precedence",
        "Enable server-side configuration",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "928ff211d9e5aa0e02dc64ed344e8cbbd3ea91b5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-10-01T15:42:26Z",
      "updated_at": "2021-09-14T10:34:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic UI. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change automatically applies to all APM agents, even if they run across multiple hosts. The agent still follows the local configurations for any settings not available from the UI. Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly within the New Relic UI, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you utilize environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Enable server-side configuration The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " change automatically applies to all <em>APM</em> <em>agents</em>, even if they run across multiple hosts. The <em>agent</em> still follows the local configurations for any settings not available from the UI. Server-side <em>configuration</em> precedence This feature provides the convenience of managing the available <em>configuration</em>"
      },
      "id": "6043c83b64441fc5d6378ed1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.00229,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " instrumentation: <em>Configuration</em> file: Use the <em>agent</em> <em>configuration</em> file to specify the functions and methods you want instrumented. The <em>agent</em> <em>configuration</em> file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/manage-apm-agents/troubleshooting/agent-nrintegrationerrors-appear-insights": [
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.46259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.39882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ": Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the <em>APM</em> Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Agent attributes",
        "Attribute destination flow",
        "Types of attributes",
        "Destinations for attributes",
        "Viewing request attributes",
        "Limits",
        "Agent-specific attributes"
      ],
      "title": "Agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "088fa6cfe4cd8dd8f6ee9462a0181497904caf42",
      "image": "https://docs.newrelic.com/static/28e38366587e506dc64423df1bff8073/8c557/screen-tx-trace-attributes.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/agent-attributes/",
      "published_at": "2021-10-01T15:38:24Z",
      "updated_at": "2021-09-14T09:18:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can view these key-value pairs in some places in the UI, or by querying that data using NRQL. New Relic gives users the ability to customize exactly which attributes will be sent to each of these destinations. You can also collect custom attributes to send additional data to New Relic. Attribute destination flow This diagram illustrates how an agent decides to send attributes to each destination. Agent attribute collection: An agent makes three different decisions when sending an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by agent. (The properties in this diagram are specific to the PHP agent, but the general flow is the same for all agents. Property names and syntax vary by agent.) Types of attributes Attributes can be collected in a variety of ways: Message property attributes: These are the properties set on a message received from a queue or topic. HTTP request attributes: These are the parameters for an HTTP request. User attributes: These are attributes provided by the user through each agent's API. Agent attributes: These are attributes captured by the agent; for example, httpResponseCode and httpResponseMessage. Destinations for attributes Collected attributes appear in these locations: Collected attributes Location Transaction traces Each minute transaction traces collect data for your slowest individual HTTP requests. These traces will report attributes collected during the transaction. Traced errors If a transaction results in an error, these traced errors will be reported to APM. A traced error will contain attributes collected during the transaction. Transaction events APM transactions will contain attributes collected during the transaction. Insights page views Browser page views will contain attributes collected during the transaction. However, attributes collected at the end of a transaction may not appear on PageView events. This destination is also called browser monitoring. Span events Span events collected for distributed tracing will contain attributes collected during the span. The following agents support the addition of custom user attributes to span events: Java agent 5.13.0 and above Go agent 3.6.0 and above .NET agent 8.25 and above Node agent 6.10.0 and above PHP agent 9.12.0.268 and above Python agent 5.8.0.136 and above Ruby agent 6.8.0 and above Transaction segments Each segment in a transaction trace will contain attributes recorded for that segment. Viewing request attributes Request attributes are associated with specific transaction traces, browser traces, and errors in APM and dashboards. You can see the attributes recorded with a request when viewing the individual trace or error. Custom attributes can be queried via NRQL exactly like any other attribute. APM > (select an app) > Monitoring > Transactions > (select a transaction) > (select a trace): Here is an example from the Ruby agent of the Request attributes and Custom attributes for a transaction trace. Exact attributes depend on your agent and on your attribute configuration. Limits User attributes, request attributes, and message queue parameters are limited by count and size. Parameter Limitations Transaction Limited to 64 user attributes Attribute key Limited to 256 bytes each If the key is more than 256 bytes, then the attribute will not be recorded. Attribute value Limited to 256 bytes each If the value is greater than 256 bytes, then the attribute value will be truncated. Agent-specific attributes Each APM agent collects custom attributes. The supported attributes depend on the specific agent: C SDK Go Java .NET Node.js PHP Python Ruby",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.39755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Agent</em> attributes",
        "sections": "<em>Agent</em> attributes",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " an attribute to any New Relic destination based on the relevant property settings. Property names and syntax vary by <em>agent</em>. (The properties in this diagram are specific to the PHP <em>agent</em>, but the general flow is the same for all <em>agents</em>. Property names and syntax vary by <em>agent</em>.) Types of attributes"
      },
      "id": "603eb9db28ccbc127aeba79e"
    }
  ],
  "/docs/agents/manage-apm-agents/troubleshooting/get-environment-data-about-your-apm-app": [
    {
      "sections": [
        "APM agent NRIntegrationError config mismatch issue",
        "Problem",
        "Solution",
        "Go",
        "Tip",
        "Java",
        ".NET",
        "Node.js",
        "Python",
        "Ruby"
      ],
      "title": "APM agent NRIntegrationError config mismatch issue",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Troubleshooting"
      ],
      "external_id": "9d5fdee59e1e3c4d6adc390741171e86274d1caa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/troubleshooting/agent-nrintegrationerrors-appear-insights/",
      "published_at": "2021-10-01T15:43:26Z",
      "updated_at": "2021-08-09T00:02:55Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem An NrIntegrationError event is generated that has the following message: Configuration mismatch: Agent configured harvest limit for EVENT TYPE exceeds maximum limit; limit adjusted to LIMIT Copy Solution This is caused by a configuration mismatch with the agent. See the relevant agent solution to resolve your configuration mismatch: Go In your newrelic.Config: For transaction events, adjust the value of TransactionEvents.MaxSamplesStored. Tip The Go Agent currently does not support adjusting this value for custom events. Java In your newrelic.yml: For transaction events, adjust the value of transaction_events.max_samples_stored. For custom events, adjust the value of custom_events.max_samples_stored. .NET In your newrelic.config: For transaction events, adjust the value of the maximumSamplesStored attribute under the transactionEvents element. For custom events, adjust the value of the maximumSamplesStored attribute under the customEvents element. Node.js For transaction events, in the transaction_events: { section of your app's newrelic.js, adjust the value of max_samples_per_minute. For custom events, in the custom_insights_events: { section of your app's newrelic.js, adjust the value of max_samples_stored. Python In your newrelic.ini: For transaction events, adjust the value of event_harvest_config. harvest_limits.analytic_event_data. For custom events, adjust the value of event_harvest_config.harvest_limits.custom_event_data. For error events, adjust the value of event_harvest_config.harvest_limits.error_event_data. For span events, adjust the value of event_harvest_config.harvest_limits.span_event_data. Ruby In your newrelic.yml: For transaction events, adjust the value of analytics_events.max_samples_stored. For custom events, adjust the value of custom_events.max_samples_stored. For error events, adjust the value of error_collector.max_event_samples_stored. Tip This error does not apply to the C SDK or PHP agents.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.17433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> <em>agent</em> NRIntegrationError config mismatch issue",
        "sections": "<em>APM</em> <em>agent</em> NRIntegrationError config mismatch issue",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": "Problem An NrIntegrationError event is generated that has the following message: Configuration mismatch: <em>Agent</em> configured harvest limit for EVENT TYPE exceeds maximum limit; limit adjusted to LIMIT Copy Solution This is caused by a configuration mismatch with the <em>agent</em>. See the relevant <em>agent</em>"
      },
      "id": "603ec0f9e7b9d2da412a07d6"
    },
    {
      "sections": [
        "Real time streaming",
        "Why it matters",
        "Agent version to automatically enable",
        "Caution",
        "Query real time streaming data",
        "Create real time streaming charts"
      ],
      "title": "Real time streaming",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "ead7b5f2e74d1096a9ba796f3001be0b663941e0",
      "image": "https://docs.newrelic.com/static/5edbc3948f29fe9b1202aa05c9645b6a/c1b63/RTS.png",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/real-time-streaming/",
      "published_at": "2021-10-01T15:40:44Z",
      "updated_at": "2021-09-14T10:31:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With real time streaming, your APM event data is sent to New Relic every five seconds. You can query and visualize your data for transactions, errors, and custom events in near real time. The smaller payloads result in faster chart refreshes and faster queries of data that is the most important to you. No configuration is needed to take advantage of real time streaming. All you need to do is ensure your APM agent version is up to date. Why it matters Real time streaming doesn't result in more events being sent. The combination of more frequent posts, with a smaller number of events per post, results in approximately the same number of events per minute as there would be without real time streaming. The following image shows a comparison between data sent to New Relic with and without real time streaming. Note that 10,000 is an example number of events; some agents have lower default limits. The overall limits on how many events can be sent per minute haven't changed. Also, non-event data (spans, traces, and metrics) are unaffected; they're still sent every minute. Use real time streaming to quickly understand the impact when something has changed, such as deploying a new app version. Examine key performance indicators (throughput, error rates, charting, etc.) in near real time. Respond quickly to failure conditions and anomalies. Get the most out of New Relic One dashboards. Reduce mean time to detection with APM events reporting every five seconds. Agent version to automatically enable To enable real time streaming, update to the latest APM agent. You don't need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all APM agents. Here are the minimum agent versions: C SDK: v1.3.0 or higher Go: v2.8.0 or higher Java: v5.5.0 or higher .NET: v8.23.107.0 or higher Node.js: v5.13.0 or higher PHP: v9.5.0.252 or higher Python: v5.2.0.127 or higher Ruby: v6.7.0.359 or higher Caution If Transaction event reporting is disabled, this can affect some UI elements throughout New Relic. You may see some empty charts on some UI pages that rely on this data. Query real time streaming data When building charts, include the following in your NRQL query: NRQL clause Comments SINCE 5 minutes ago Be sure to add a SINCE 5 minutes ago clause to your NRQL query in order to take advantage of the 5 second chart refresh interval. This is because the chart's refresh interval is based on the time window. TIMESERIES bucket To set the refresh interval for time series charts, you can also specify the bucket size as an optional argument to the TIMESERIES clause. For example, SINCE 30 minutes ago TIMESERIES 5 seconds will display a 30 minute window at a 5 second resolution. You can have a maximum of 366 buckets. Create real time streaming charts You can visualize the results of your NRQL query in New Relic One: Go to one.newrelic.com, and at the top of the page, select Query your data. Use the data explorer to start building a chart. Select the advanced (NRQL) mode to refine your query. In your NRQL query, adjust the SINCE and TIMESERIES clauses to take advantage of the 5 second refresh intervals.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.46259,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Agent</em> version to automatically enable",
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": " to automatically enable To enable real time streaming, update to the latest <em>APM</em> <em>agent</em>. You don&#x27;t need to configure anything to enable real time streaming; it will automatically report faster! Real time streaming is supported by all <em>APM</em> <em>agents</em>. Here are the minimum <em>agent</em> versions: C SDK: v1.3.0 or higher Go"
      },
      "id": "603e9d27196a678e41a83db1"
    },
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-10-01T15:39:41Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.39882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Manage</em> <em>APM</em> <em>agents</em>",
        "body": ": Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the <em>APM</em> Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    }
  ],
  "/docs/agents/net-agent/api-guides/guide-using-net-agent-api": [
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.79077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements <em>Agent</em> version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more"
      },
      "id": "6044132628ccbc6f972e99b3"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, [action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire [, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire [, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire [, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, [group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, [amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end([callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, [customParameters])",
        "newrelic.shutdown([options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-30T20:50:07Z",
      "updated_at": "2021-09-30T20:50:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, [action]) newrelic.setControllerName(name, [action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire [, onError]) newrelic.instrument(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire [, onError]) newrelic.instrumentDatastore(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire [, onError]) newrelic.instrumentWebframework(moduleName, onRequire [, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, [group], handle) newrelic.startBackgroundTransaction(name, [group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, [amount]) newrelic.incrementMetric(name, [amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end([callback]) transactionHandle.end([callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, [customParameters]) newrelic.noticeError(error, [customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown([options], callback) newrelic.shutdown([options], callback) Copy Use this method to gracefully shut down the agent. Option name Type Attributes Default Description collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. collectPendingData boolean Optional false Tell the agent whether to send any pending data to the New Relic collector before shutting down. timeout number Optional 0 The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. waitForIdle boolean Optional false If true, the agent will not shut down until there are no active transactions. Example: newrelic.shutdown({collectPendingData: true, timeout: 10000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.75223,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " of controllers with actions Support rules that are stored in your <em>agent</em>&#x27;s configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request&#x27;s raw URLs (also available as <em>API</em> calls) The number of names that New Relic tracks needs to be small enough so"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "ITransaction",
        "Syntax",
        "Description",
        "AcceptDistributedTraceHeaders",
        "Parameters",
        "Usage considerations",
        "Example",
        "InsertDistributedTraceHeaders",
        "AcceptDistributedTracePayload",
        "Caution",
        "CreateDistributedTracePayload (obsolete)",
        "Returns",
        "AddCustomAttribute",
        "CurrentSpan",
        "Examples"
      ],
      "title": "ITransaction",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "50a42a3ff33b7b1d3517e6d2fec0108aa74a5979",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/itransaction/",
      "published_at": "2021-10-01T14:05:14Z",
      "updated_at": "2021-09-20T19:35:51Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic API. Description Provides access to transaction-specific methods in the New Relic .NET agent API. To obtain a reference to ITransaction, use the current transaction method available on IAgent. This section contains descriptions and parameters of three ITransaction methods: Name Description AcceptDistributedTraceHeaders Accepts incoming trace context headers from another service. InsertDistributedTraceHeaders Adds trace context headers to an outgoing request. AcceptDistributedTracePayload (obsolete) Accepts an incoming distributed trace payload from another service. CreateDistributedTracePayload (obsolete) Creates a distributed trace payload for inclusion in an outgoing request. AddCustomAttribute Add contextual information from your application to the current transaction in form of attributes. CurrentSpan Provides access to the currently executing span, which provides access to span-specific methods in the New Relic API. AcceptDistributedTraceHeaders ITransaction.AcceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by InsertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated AcceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. Syntax void AcceptDistributedHeaders(carrier, getter, transportType) Copy Parameters Name Description carrier < T> Required. Source of incoming Trace Context headers. getter Func < T, string, IEnumerable < string>> Required. Caller-defined function to extract header data from the carrier. transportType TransportType enum Required. Describes the transport of the incoming payload (e.g. TransportType.HTTP). Usage considerations Distributed tracing must be enabled. AcceptDistributedTraceHeaders will be ignored if InsertDistributedTraceHeaders or AcceptDistributedTraceHeaders has already been called for this transaction. Example HttpContext httpContext = HttpContext.Current;IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent();ITransaction currentTransaction = agent.CurrentTransaction;currentTransaction.AcceptDistributedTraceHeaders(httpContext, Getter, TransportType.HTTP);IEnumerable<string> Getter(HttpContext carrier, string key) { string value = carrier.Request.Headers[key]; return value == null ? null : new string[] { value }; } Copy InsertDistributedTraceHeaders ITransaction.InsertDistributedTraceHeaders is used to implement distributed tracing. It modifies the carrier object that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with <distributedTracing excludeNewrelicHeader=\"true\" /> in the config. This method replaces the deprecated CreateDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Syntax void InsertDistributedTraceHeaders(carrier, setter) Copy Parameters Name Description carrier < T> Required. Container where Trace Context headers are inserted.. setter Action < T, string, string> Required. Caller-defined Action to insert header data into the carrier. Usage considerations Distributed tracing must be enabled. Example HttpWebRequest requestMessage = (HttpWebRequest)WebRequest.Create(\"https://remote-address\");IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent();ITransaction currentTransaction = agent.CurrentTransaction;var setter = new Action<HttpWebRequest, string, string>((carrier, key, value) => { carrier.Headers?.Set(key, value); });currentTransaction.InsertDistributedTraceHeaders(requestMessage, setter); Copy AcceptDistributedTracePayload Caution This API is not available in the .NET agent v9.0 or higher. Please use AcceptDistributedTraceHeaders instead. Accepts an incoming distributed trace payload from an upstream service. Calling this method links the transaction from the upstream service to this transaction. Syntax void AcceptDistributedPayload(payload, transportType) Copy Parameters Name Description payload string Required. A string representation of the incoming distributed trace payload. transportType TransportType enum Recommended. Describes the transport of the incoming payload (e.g. http). Default TransportType.Unknown. Usage considerations Distributed tracing must be enabled. The payload can be a Base64-encoded or plain text string. AcceptDistributedTracePayload will be ignored if CreateDistributedTracePayload has already been called for this transaction. Example //Obtain the information from the request object from the upstream caller.//The method by which this information is obtain is specific to the transport //type being used. For example, in an HttpRequest, this information is//contained in the header.KeyValuePair<string, string> metadata = GetMetaDataFromRequest(\"requestPayload\");IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction.AcceptDistributedTracePayload(metadata.Value, TransportType.Queue); Copy CreateDistributedTracePayload (obsolete) Caution This API is not available in the .NET agent v9.0 or higher. Please use InsertDistributedTraceHeaders instead. Creates a distributed trace payload for inclusion in an outgoing request to a downstream system. Syntax IDistributedTracePayload CreateDistributedTracePayload() Copy Returns An object that implements IDistributedTracePayload which provides access to the distributed trace payload that was created. Usage considerations Distributed tracing must be enabled. CreateDistributedTracePayload will be ignored if AcceptDistributedTracePayload has already been called for this transaction. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; IDistributedTracePayload payload = transaction.CreateDistributedTracePayload(); Copy AddCustomAttribute Adds contextual information about your application to the current transaction in the form of attributes. This method requires .NET agent version and .NET agent API version 8.24.244.0 or higher. It replaced the deprecated AddCustomParameter. Syntax ITransaction AddCustomAttribute(string key, object value) Copy Parameters Parameter Description key string Identifies the information being reported. Also known as the name. Empty keys are not supported. Keys are limited to 255-bytes. Attributes with keys larger than 255-bytes will be ignored. value object The value being reported. Returns A reference to the current transaction. Usage considerations For details about supported data types, see the Custom Attributes Guide. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction .AddCustomAttribute(\"customerName\",\"Bob Smith\") .AddCustomAttribute(\"currentAge\",31) .AddCustomAttribute(\"birthday\", new DateTime(2000, 02, 14)) .AddCustomAttribute(\"waitTime\", TimeSpan.FromMilliseconds(93842)); Copy CurrentSpan Provides access to the currently executing span, making span-specific methods available within the New Relic API. Example IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; ISpan = currentSpan = transaction.CurrentSpan; Copy Examples See Parameters section.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.99626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax public interface ITransaction Copy Provides access to transaction-specific methods in the New Relic <em>API</em>. Description Provides access to transaction-specific methods in the New Relic .<em>NET</em> <em>agent</em> <em>API</em>. To obtain a reference to ITransaction, use the current transaction method available on IAgent"
      },
      "id": "6044124428ccbc5ced2c6087"
    }
  ],
  "/docs/agents/net-agent/attributes/custom-attributes-net": [
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-10-01T15:45:39Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.66638,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.<em>NET</em>)",
        "sections": "Enable and disable <em>attributes</em> (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .<em>NET</em> <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-10-01T14:08:27Z",
      "updated_at": "2021-09-20T19:35:49Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomAttribute() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomAttribute(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.763336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom <em>attributes</em>. AddCustomAttribute() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.79077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " information about application naming, see Name your .<em>NET</em> application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the <em>agent</em> to restart. The <em>agent</em> discards any unreported data associated with previous app names. Changing the app name"
      },
      "id": "6044132628ccbc6f972e99b3"
    }
  ],
  "/docs/agents/net-agent/attributes/enable-disable-attributes-net": [
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-10-01T15:45:39Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.66634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> custom <em>attributes</em>",
        "sections": ".<em>NET</em> custom <em>attributes</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-10-01T14:08:27Z",
      "updated_at": "2021-09-20T19:35:49Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomAttribute() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomAttribute(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.763336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom <em>attributes</em>. AddCustomAttribute() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.79077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " information about application naming, see Name your .<em>NET</em> application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the <em>agent</em> to restart. The <em>agent</em> discards any unreported data associated with previous app names. Changing the app name"
      },
      "id": "6044132628ccbc6f972e99b3"
    }
  ],
  "/docs/agents/net-agent/attributes/net-attribute-examples": [
    {
      "sections": [
        "Enable and disable attributes (.NET)",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use an asterisk * for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Obsolete properties",
        "analyticsEvents replaced by transactionEvents",
        "requestParameters replaced by request.parameters.*",
        "parameterGroups: enable and ignore replaced by attributes true, include and exclude",
        "captureAttributes flag replaced by attributes sub-elements"
      ],
      "title": "Enable and disable attributes (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "71d8c3a6ad5df2a487ce2fe102de9ec875f1901d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/enable-disable-attributes-net/",
      "published_at": "2021-10-01T15:45:39Z",
      "updated_at": "2021-09-20T19:34:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This describes the rules New Relic uses to determine which attributes to include or exclude for a destination. This also includes a summary of the .NET agent properties that were no longer available with the release of New Relic agent attributes in versions 9.0 or higher. Attribute rules New Relic follows these rules to determine which attributes to include or exclude: Root level takes precedence for enabled. The attributes.enabled field overrides all other settings. When false, no attributes will be reported to New Relic. Example configuration: <attributes enabled=\"false\"> <include>foo</include> <include>bar</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"true\"/> </transactionTracer> Copy Example output: Keys passed in: foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: foo, bar, bat Copy Destination enabled takes precedence over include and exclude. The {destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: <attributes enabled=\"true\"> <include>one</include> <include>two</include> </attributes> <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>three</include> <include>four</include> </attributes> </transactionTracer> Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: <attributes enabled=\"true\"> <exclude>myAttKey</exclude> </attributes> Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: <attributes enabled=\"true\"> <include>foo</include> <include>myCustomAtt</include> <exclude>password</exclude> <exclude>myCustomAtt</exclude> </attributes> Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: <attributes enabled=\"true\"> <exclude>password</exclude> <exclude>PaSsWoRd</exclude> </attributes> Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use an asterisk * for wildcards. You can use an asterisk * at the end of a key as a wildcard. This will match all attributes with the same prefix. Example configuration: <attributes enabled=\"true\"> <include>custom*</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: <attributes enabled=\"true\"> <include>request.parameters.foo</include> <exclude>request.parameters.*</exclude> </attributes> Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: <attributes enabled=\"true\"> <include>foo</include> </attributes> <transactionEvents enabled=\"true\"> <attributes enabled=\"true\"> <exclude>foo</exclude> </attributes> </transactionEvents> Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Obsolete properties The following properties are not available in the .NET agent v9.0. Please visit the .NET agent 8.x to 9.x migration guide page for replacement properties when upgrading your .NET agent. analyticsEvents replaced by transactionEvents The analyticsEvents element in newrelic.config is obsolete. Enable the transactionEvents element in newrelic.config: <transactionEvents enabled=\"true\"/> Copy requestParameters replaced by request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the attributes.include list to enable request parameter collection. <attributes> <include>request.parameters.*</include> </attributes> Copy parameterGroups: enable and ignore replaced by attributes true, include and exclude The parameterGroups value and its enabled and ignore settings are obsolete. By default, customParameters and responseHeaderParameters are instrumented, while serviceRequestParameters are not instrumented. To customize these settings: Use the enabled flag to enable instrumentation. Use include and exclude to toggle instrumentation for specific attributes. For example: <attributes enabled=\"true\"> <include>service.request.*</include> <exclude>response.headers.*</exclude> <exclude>myCustomApiKey.*</exclude> </attributes> Copy For more information on configuring attributes, see the attributes examples. captureAttributes flag replaced by attributes sub-elements The capture attributes flag on browserMonitoring, transactionTracer, transactionEvents, and errorCollector is obsolete. Instead, use the attributes sub-element to configure attribute settings for each of these destinations. New property Example browserMonitoring <browserMonitoring enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </browserMonitoring> Copy transactionTracer <transactionTracer enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionTracer> Copy transactionEvents <transactionEvents enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </transactionEvents> Copy errorCollector <errorCollector enabled=\"true\"> <attributes enabled=\"false\"> <include>myKey.*</include> <exclude>myKey.foo</exclude> </attributes> </errorCollector>> Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.66635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable and disable <em>attributes</em> (.<em>NET</em>)",
        "sections": "Enable and disable <em>attributes</em> (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "This describes the rules New Relic uses to determine which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the .<em>NET</em> <em>agent</em> properties that were no longer available with the release of New Relic <em>agent</em> <em>attributes</em> in versions 9.0 or higher. Attribute rules New Relic"
      },
      "id": "603ed634196a67b796a83d9f"
    },
    {
      "sections": [
        ".NET custom attributes"
      ],
      "title": ".NET custom attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Attributes"
      ],
      "external_id": "491bfa6b3b5646899f6b0fbf541e1e6172593219",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/attributes/custom-attributes-net/",
      "published_at": "2021-10-01T15:45:39Z",
      "updated_at": "2021-09-20T19:34:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. You can create custom attributes using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object. This describes how these values are processed and how they will appear in APM. In all cases, NULL values are not recorded. .NET type How the value will be represented byte, Int16, Int32, Int64 sbyte, UInt16, UInt32, UInt64 As an integral value float, double, decimal A decimal-based number string A string truncated after 255-bytes. Empty strings are supported. bool True or false DateTime A string representation following the ISO-8601 format, including time zone information: 2020-02-13T11:31:19.5767650-08:00 TimeSpan A decimal-based number representing number of seconds. everything else the ToString() method will be applied.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.6663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> custom <em>attributes</em>",
        "sections": ".<em>NET</em> custom <em>attributes</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "<em>Attributes</em> are key-value pairs containing information that determines the properties of an event or transaction. You can create custom <em>attributes</em> using the AddCustomAttribute API. When adding custom attribute values to transactions, custom events, spans, and errors, the API accepts an object"
      },
      "id": "60441bcf196a670a80960f3a"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-10-01T14:08:27Z",
      "updated_at": "2021-09-20T19:35:49Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomAttribute() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomAttribute(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.76332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Syntax NewRelic.Api.<em>Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom <em>attributes</em>. AddCustomAttribute() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    }
  ],
  "/docs/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic": [
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.790695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " information about application naming, see Name your .<em>NET</em> application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the <em>agent</em> to restart. The <em>agent</em> discards any unreported data associated with previous app names. Changing the app name"
      },
      "id": "6044132628ccbc6f972e99b3"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-10-01T15:47:44Z",
      "updated_at": "2021-07-27T11:22:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows <log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"></log> Copy Log file configuration for Linux <log directory=\"/home/LogFiles/NewRelic\" level=\"info\"></log> Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.93037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Use any of the following methods to add the New Relic .<em>NET</em> <em>agent</em> to your <em>Azure</em>-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Cloud Services",
        "Important",
        "Check Web or Worker role's location",
        "Install the NuGet package for Cloud Services",
        "Instrument Worker role",
        "Custom instrumentation example for Worker role",
        "Custom instrumentation file deployment",
        "Optional: Create custom config file",
        "View your app's performance"
      ],
      "title": "Install the .NET agent on Azure Cloud Services",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "afe3e181b9ec18fa0b2be3e76f7c9b20d247d21e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-cloud-services/",
      "published_at": "2021-10-01T15:46:32Z",
      "updated_at": "2021-03-16T14:55:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install APM's .NET agent on Microsoft's Azure Cloud Services platform. This is not the same as installing the Infrastructure integrations for Microsoft Azure. To make sure you are using the most relevant instructions, first see the .NET agent install overview. Important Before installing the NuGet package into a multi-project Visual Studio solution, make sure you have selected the correct project for your New Relic .NET application (for example, a specific website project). Check Web or Worker role's location If Service files are nested within a Solution folder, the NuGet installer cannot locate or update the necessary files. This will cause issues with the .NET agent setup, which will in turn prevent the agent from reporting metrics on your Cloud Service. Recommendation: Place the Web or Worker role at the root of the solution before installing the NuGet package. Once the New Relic .NET agent is installed, you can move the Cloud role back into the Solution folder. Install the NuGet package for Cloud Services Important The NuGet packages in this procedure support only the old packages.config. They do not support the new PackageReference format. For more information see Microsoft's package reference documentation For multi-project solutions, make sure you have selected the correct project (for example, a specific website project) before installing the NuGet package. Open your Visual Studio solution, or create a new one by selecting File > New > Project. For multi-project solutions, make sure you have selected the correct project (for example, a specific website project). If you do not already have an Azure Cloud Service project in your solution, add one by right-clicking your app in the Solution Explorer and selecting Add Windows Azure Cloud Service Project. Open the Package Manager console by selecting Tools > Library Package Manager > Package Manager Console. Set your project as the default project. From the Package Manager command prompt, type Install-Package NewRelicWindowsAzure and press Enter. Follow the prompts to enter your New Relic license key and your application name as you want it to appear in the New Relic UI. Or, use your solution name as the default app name. From the Solution Explorer, right-click your Azure Cloud Service project, and select Publish. If this is your first time deploying this app to Azure, enter your Azure credentials. If applicable, instrument methods for Worker roles. Instrument Worker role A Worker role is a non-web process run as an Azure Cloud Service. To instrument a Worker role, you must create custom transactions. The .NET agent automatically instruments external calls and database calls, but it does not instrument default methods for transactions. Creating custom transactions solves this. After the Worker role starts up and the method executes, transaction data will appear in the APM Summary and Transactions pages under the Non-web category. The NuGet installer automatically adds the NewRelic.AppName parameter to the application config. This appears as <YOUR_WORKER_ROLE_NAME>.dll.config in E:\\approot. The .NET agent also automatically instruments WaWorkerHost.exe. This is the name of the actual Worker role process. Custom instrumentation example for Worker role This is a custom instrumentation example for a Worker role. It creates a custom transaction named ProcessMessage. The transaction begins when the ProcessMessage method is entered, and it ends when the method returns. The following example uses MyWorkerRole as the namespace. If you do not specify a name, it will default to the Solution name. namespace MyWorkerRole { public class NotificationQueue { public bool ProcessMessage(Message message) { // code to process message } } } Copy Here is the custom instrumentation file for the code: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerfactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Custom/ProcessMessage\"> <match assemblyname=\"MyWorkerRole\" classname=\"MyWorkerRole.NotificationQueue\"> <exactmethodmatcher methodName=\"ProcessMessage\" /> </match> </tracerfactory> </instrumentation> </extension> Copy On a local installation, place this instrumentation file in C:\\ProgramData\\New Relic\\.NET Agent\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an Azure Cloud Service deployment: In your Azure Cloud project, add the instrumentation file to your Worker role inside the Roles folder. After installing the New Relic .NET agent NuGet package, locate newrelic.cmd in your Worker Role project. Find the statement IF %ERRORLEVEL% EQU 0 within the :INSTALL_NEWRELIC_AGENT block, and add the following statement to the conditional: IF %ERRORLEVEL% EQU 0 ( copy /Y \"%RoleRoot%\\approot\\MyInstrumentation.xml\" \"%NR_HOME%\\extensions\" >> %RoleRoot%\\nr.log ) ELSE ( Copy In this example, the newrelic.cmd batch file copies the custom instrumentation file to the Extensions folder in D:\\ProgramData\\New Relic\\.NET Agent\\, or %NR_HOME%. This example uses MyInstrumentation.xml, but any name will work as long as the file name and copy command match, and the file is valid XML. Optional: Create custom config file You can create a custom configuration file in Visual Studio. This allows you to make changes to newrelic.config inside Visual Studio, without having to remote into your Azure Role instance every time you make a change. Whenever you publish your app, the config file in Visual Studio is automatically uploaded to the remote host. The choices you make with the installation wizard do not matter. Installing locally does not affect your Azure development environment. In Visual Studio, select the Solution Explorer, then open NewRelicAgent_x64_XYZ.msi. Follow the steps to install the agent locally. Import newrelic.config into your project: In Solution Explorer > Cloud Project, right-click the Web Role, then select Add > Existing Item. Navigate to C: \\ ProgramData \\ New Relic \\ .NET Agent and select newrelic.config. From C: \\ ProgramData \\ New Relic \\ .NET Agent, edit newrelic.cmd. In the :INSTALL_NEWRELIC_AGENT section, find this statement: IF $ERRORLEVEL% EQU 0 ( Copy Add the following code as another statement inside the IF block, then save the file: copy /Y \"%RoleRoot%\\approot\\newrelic.config\" \"%NR_HOME%\" >> %RoleRoot%\\nr.log Copy You can now edit the newrelic.config hosted in Visual Studio. Whenever you publish your app, the copy command will upload the config file to the remote host. View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Cloud Services. To view your app's performance in APM: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure Portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure Portal by going to New Relic Accounts > choose your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.23738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&gt; &lt;&#x2F;tracerfactory&gt; &lt;&#x2F;instrumentation&gt; &lt;&#x2F;extension&gt; Copy On a local <em>installation</em>, place this instrumentation file in C:\\ProgramData\\New Relic\\.<em>NET</em> <em>Agent</em>\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an <em>Azure</em> Cloud Service deployment: In your"
      },
      "id": "603e8e7ee7b9d2b4d42a07e3"
    }
  ],
  "/docs/agents/net-agent/azure-installation/install-net-agent-azure-cloud-services": [
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.790695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " information about application naming, see Name your .<em>NET</em> application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the <em>agent</em> to restart. The <em>agent</em> discards any unreported data associated with previous app names. Changing the app name"
      },
      "id": "6044132628ccbc6f972e99b3"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-10-01T15:47:44Z",
      "updated_at": "2021-07-27T11:22:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows <log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"></log> Copy Log file configuration for Linux <log directory=\"/home/LogFiles/NewRelic\" level=\"info\"></log> Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.93037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Use any of the following methods to add the New Relic .<em>NET</em> <em>agent</em> to your <em>Azure</em>-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "aef2e193486dd4993ae483d01735a03537b138b2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-10-01T15:46:33Z",
      "updated_at": "2021-03-13T02:42:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.453835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "6043c3ade7b9d24ead5799b2"
    }
  ],
  "/docs/agents/net-agent/azure-installation/install-net-agent-azure-service-fabric": [
    {
      "sections": [
        "SetApplicationName (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Important",
        "Parameters",
        "Examples"
      ],
      "title": "SetApplicationName (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "3fb6b95c0ba28e634b4bff22b55f29fb9163f2ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-application-name/",
      "published_at": "2021-10-01T14:07:17Z",
      "updated_at": "2021-10-01T14:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetApplicationName(string $name[, string $name_2, string $name_3]) Copy Set the app name for data rollup. Requirements Agent version 5.0.136.0 or higher. Compatible with all app types. Description Set the application name(s) reported to New Relic. For more information about application naming, see Name your .NET application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the agent to restart. The agent discards any unreported data associated with previous app names. Changing the app name multiple times during the lifecycle of an application is not recommended due to the associated data loss. Parameters Parameter Description $name string Required. The primary application name. $name_2 $name_3 string Optional. Second and third names for app rollup. For more information, see Use multiple names for an app. Examples NewRelic.Api.Agent.NewRelic.SetApplicationName(\"AppName1\", \"AppName2\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.79063,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "sections": "SetApplicationName (.<em>NET</em> <em>agent</em> API)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " information about application naming, see Name your .<em>NET</em> application. This method is intended to be called once, during startup of an application. Important Updating the app name forces the <em>agent</em> to restart. The <em>agent</em> discards any unreported data associated with previous app names. Changing the app name"
      },
      "id": "6044132628ccbc6f972e99b3"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Web Apps",
        "Installation options",
        "Disable Application Insights",
        "Install using the New Relic Azure Site Extension (Windows Only)",
        "Install using NuGet (.NET Framework)",
        "Install using NuGet (.NET Core)",
        "Log file configuration for Windows",
        "Log file configuration for Linux",
        "Environment variables for Windows",
        "Environment variables for Linux",
        "Add New Relic app settings to Azure App Services",
        "View your app's performance",
        "Troubleshooting"
      ],
      "title": "Install the .NET agent on Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "5cb6afb3ad05fdc243d2cf110f4df1e7e027740d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps/",
      "published_at": "2021-10-01T15:47:44Z",
      "updated_at": "2021-07-27T11:22:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install New Relic's .NET agent for application performance monitoring on your Azure Web App. (This is not the same as installing the infrastructure monitoring integrations for Microsoft Azure.) Recommendation: Before following these instructions, read the .NET agent installation overview. Installation options Use any of the following methods to add the New Relic .NET agent to your Azure-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most reliable option is to use the publicly maintained Azure site extension. Note: Azure Site Extensions are only currently available for Windows App Service Resources. Install using the Azure Site Extension For developer teams, or anyone needing to deploy the agent on a Linux App Service Resource, installing via nuget is the best option: Install using NuGet (.NET Framework) Install using NuGet (.NET Core) In order to monitor non-web apps (including WebJobs), or ASP.NET Core apps targeting .NET Framework, you must explicitly enable the agent for that application's .exe process via one of these two methods: Enable via placement of local newrelic.config file. Enable via application config file In addition, WebJobs may need custom instrumentation for transactions to appear in APM, and additional configuration if they run for less than one minute. Disable Application Insights Both New Relic's .NET agent and Microsoft Application Insights rely on the CLR Profiler, but only one may be active at a time. You must disable Application Insights in order for the .NET agent to function properly. For more information, see our Application Insights troubleshooting procedures. Install using the New Relic Azure Site Extension (Windows Only) To install the .NET agent for an Azure Web App using the New Relic Azure Site Extension: Shut down your web application before installing the New Relic Azure Site Extension. Add the site extension: Navigate to http://[yoursitename].scm.azurewebsites.net, then select Site extensions > Gallery. Select the plus icon next to the New Relic site extension. In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app to use the new version of the agent. Install using NuGet (.NET Framework) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. The NuGet packages in this procedure support only the old packages.config. They do not support the current PackageReference format. For more information, see Microsoft's package reference documentation. For multi-project solutions, make sure you have selected the correct project (for example, a specific web app project) before installing the NuGet package. If you are upgrading the .NET Framework agent using NuGet, any changes you made in the newrelic.config will be overwritten. To preserve any changes, save your newrelic.config outside of your project, then restore it after upgrading. To install the .NET agent on an Azure Web App using NuGet: In the Azure portal, verify your Azure Platform (32-bit or 64-bit): From the Azure sidebar menu, select App Services > Your Application > Settings > Configuration > General settings. Open your application in Visual Studio, and install the New Relic NuGet package by running the appropriate command from the Package manager console: 32-bit: Install-Package NewRelic.Azure.WebSites 64-bit: Install-Package NewRelic.Azure.WebSites.x64 Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Key Value COR_ENABLE_PROFILING 1 COR_PROFILER {71DA0A04-7777-4EC6-9643-7D28B46A8A41} COR_PROFILER_PATH D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Install using NuGet (.NET Core) The NuGet installation method packages the New Relic Agent with your application so that it is available to the Azure Web App Host. New Relic .NET Core agent supports Linux and Windows applications on Azure App Services. The installation process for Azure App Services differs from the .NET Core agent installation procedures for Linux and Windows. To install the .NET agent on an Azure Web App using NuGet: Install the NewRelic.Agent NuGet package. Modify the log node by adding a directory attribute to your newrelic.config file (Note: If Visual Studio prevents you from editing the newrelic.config file that was added to your project by NuGet then you will need to make a local copy of this in your application): Log file configuration for Windows <log directory=\"D:\\Home\\LogFiles\\NewRelic\" level=\"info\"></log> Copy Log file configuration for Linux <log directory=\"/home/LogFiles/NewRelic\" level=\"info\"></log> Copy Publish your application. In the Azure portal, open the web app you want to monitor, then select Settings > Configuration. From Configuration, select + New application setting and add these key/value pairs: Environment variables for Windows Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH_32 D:\\Home\\site\\wwwroot\\newrelic\\x86\\NewRelic.Profiler.dll CORECLR_PROFILER_PATH_64 D:\\Home\\site\\wwwroot\\newrelic\\NewRelic.Profiler.dll CORECLR_NEWRELIC_HOME D:\\Home\\site\\wwwroot\\newrelic Environment variables for Linux Key Value CORECLR_ENABLE_PROFILING 1 CORECLR_PROFILER {36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_PROFILER_PATH /home/site/wwwroot/newrelic/libNewRelicProfiler.so CORECLR_NEWRELIC_HOME /home/site/wwwroot/newrelic NEWRELIC_PROFILER_LOG_DIRECTORY /home/LogFiles/NewRelic In the Azure portal, add New Relic app settings to your Azure App Service. Restart your web app. Add New Relic app settings to Azure App Services To add your app settings: Make sure you have your license key before adding the New Relic .NET agent's app settings. In the Azure portal, open the web app you want to monitor, then select Configuration > Application settings. From Application settings, select + New application setting and add these key/value pairs: Key Value NEW_RELIC_LICENSE_KEY YOUR_LICENSE_KEY NEW_RELIC_APP_NAME YOUR_APP_NAME Save and restart your web app. Setting the license key and app name with Application settings will override the newrelic.config. To verify your app's environment variables in your app's Kudu diagnostic console, go to Environment > Environment variables. For example: https://myappname.scm.azurewebsites.net/Env.cshtml#envVariables Copy View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Web Apps. To view your app's performance in New Relic: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure portal by going to New Relic Accounts > (select your app). Troubleshooting If no data appears after installing the agent, generating traffic for your app, and waiting a few minutes, try these troubleshooting tips: Make sure that all files in the newrelic directory at the root of your app got published to Azure. Make sure the environment variables are set correctly. Make sure Microsoft Application Insights is not installed and configured on the application. For more information, see the Application Insights troubleshooting procedures. Refer to additional Azure troubleshooting procedures as applicable.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.93037,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Web Apps",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": " <em>installation</em> overview. <em>Installation</em> options Use any of the following methods to add the New Relic .<em>NET</em> <em>agent</em> to your <em>Azure</em>-deployed web app. The best option depends on your role, environment, deployments, etc. For example: For operations teams that need to monitor the app, the easiest and most"
      },
      "id": "603e8e7c28ccbc420ceba748"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "aef2e193486dd4993ae483d01735a03537b138b2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-10-01T15:46:33Z",
      "updated_at": "2021-03-13T02:42:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.453835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "6043c3ade7b9d24ead5799b2"
    }
  ]
}