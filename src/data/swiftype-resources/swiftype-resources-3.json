{
  "/docs/agents/net-agent/azure-installation/install-net-agent-azure-web-apps": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install the .NET agent on Azure Cloud Services",
        "Important",
        "Check Web or Worker role's location",
        "Install the NuGet package for Cloud Services",
        "Instrument Worker role",
        "Custom instrumentation example for Worker role",
        "Custom instrumentation file deployment",
        "Optional: Create custom config file",
        "View your app's performance"
      ],
      "title": "Install the .NET agent on Azure Cloud Services",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "afe3e181b9ec18fa0b2be3e76f7c9b20d247d21e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-net-agent-azure-cloud-services/",
      "published_at": "2021-09-13T21:17:16Z",
      "updated_at": "2021-03-16T14:55:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install APM's .NET agent on Microsoft's Azure Cloud Services platform. This is not the same as installing the Infrastructure integrations for Microsoft Azure. To make sure you are using the most relevant instructions, first see the .NET agent install overview. Important Before installing the NuGet package into a multi-project Visual Studio solution, make sure you have selected the correct project for your New Relic .NET application (for example, a specific website project). Check Web or Worker role's location If Service files are nested within a Solution folder, the NuGet installer cannot locate or update the necessary files. This will cause issues with the .NET agent setup, which will in turn prevent the agent from reporting metrics on your Cloud Service. Recommendation: Place the Web or Worker role at the root of the solution before installing the NuGet package. Once the New Relic .NET agent is installed, you can move the Cloud role back into the Solution folder. Install the NuGet package for Cloud Services Important The NuGet packages in this procedure support only the old packages.config. They do not support the new PackageReference format. For more information see Microsoft's package reference documentation For multi-project solutions, make sure you have selected the correct project (for example, a specific website project) before installing the NuGet package. Open your Visual Studio solution, or create a new one by selecting File > New > Project. For multi-project solutions, make sure you have selected the correct project (for example, a specific website project). If you do not already have an Azure Cloud Service project in your solution, add one by right-clicking your app in the Solution Explorer and selecting Add Windows Azure Cloud Service Project. Open the Package Manager console by selecting Tools > Library Package Manager > Package Manager Console. Set your project as the default project. From the Package Manager command prompt, type Install-Package NewRelicWindowsAzure and press Enter. Follow the prompts to enter your New Relic license key and your application name as you want it to appear in the New Relic UI. Or, use your solution name as the default app name. From the Solution Explorer, right-click your Azure Cloud Service project, and select Publish. If this is your first time deploying this app to Azure, enter your Azure credentials. If applicable, instrument methods for Worker roles. Instrument Worker role A Worker role is a non-web process run as an Azure Cloud Service. To instrument a Worker role, you must create custom transactions. The .NET agent automatically instruments external calls and database calls, but it does not instrument default methods for transactions. Creating custom transactions solves this. After the Worker role starts up and the method executes, transaction data will appear in the APM Summary and Transactions pages under the Non-web category. The NuGet installer automatically adds the NewRelic.AppName parameter to the application config. This appears as <YOUR_WORKER_ROLE_NAME>.dll.config in E:\\approot. The .NET agent also automatically instruments WaWorkerHost.exe. This is the name of the actual Worker role process. Custom instrumentation example for Worker role This is a custom instrumentation example for a Worker role. It creates a custom transaction named ProcessMessage. The transaction begins when the ProcessMessage method is entered, and it ends when the method returns. The following example uses MyWorkerRole as the namespace. If you do not specify a name, it will default to the Solution name. namespace MyWorkerRole { public class NotificationQueue { public bool ProcessMessage(Message message) { // code to process message } } } Copy Here is the custom instrumentation file for the code: <?xml version=\"1.0\" encoding=\"utf-8\"?> <extension xmlns=\"urn:newrelic-extension\"> <instrumentation> <tracerfactory name=\"NewRelic.Agent.Core.Tracer.Factories.BackgroundThreadTracerFactory\" metricName=\"Custom/ProcessMessage\"> <match assemblyname=\"MyWorkerRole\" classname=\"MyWorkerRole.NotificationQueue\"> <exactmethodmatcher methodName=\"ProcessMessage\" /> </match> </tracerfactory> </instrumentation> </extension> Copy On a local installation, place this instrumentation file in C:\\ProgramData\\New Relic\\.NET Agent\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an Azure Cloud Service deployment: In your Azure Cloud project, add the instrumentation file to your Worker role inside the Roles folder. After installing the New Relic .NET agent NuGet package, locate newrelic.cmd in your Worker Role project. Find the statement IF %ERRORLEVEL% EQU 0 within the :INSTALL_NEWRELIC_AGENT block, and add the following statement to the conditional: IF %ERRORLEVEL% EQU 0 ( copy /Y \"%RoleRoot%\\approot\\MyInstrumentation.xml\" \"%NR_HOME%\\extensions\" >> %RoleRoot%\\nr.log ) ELSE ( Copy In this example, the newrelic.cmd batch file copies the custom instrumentation file to the Extensions folder in D:\\ProgramData\\New Relic\\.NET Agent\\, or %NR_HOME%. This example uses MyInstrumentation.xml, but any name will work as long as the file name and copy command match, and the file is valid XML. Optional: Create custom config file You can create a custom configuration file in Visual Studio. This allows you to make changes to newrelic.config inside Visual Studio, without having to remote into your Azure Role instance every time you make a change. Whenever you publish your app, the config file in Visual Studio is automatically uploaded to the remote host. The choices you make with the installation wizard do not matter. Installing locally does not affect your Azure development environment. In Visual Studio, select the Solution Explorer, then open NewRelicAgent_x64_XYZ.msi. Follow the steps to install the agent locally. Import newrelic.config into your project: In Solution Explorer > Cloud Project, right-click the Web Role, then select Add > Existing Item. Navigate to C: \\ ProgramData \\ New Relic \\ .NET Agent and select newrelic.config. From C: \\ ProgramData \\ New Relic \\ .NET Agent, edit newrelic.cmd. In the :INSTALL_NEWRELIC_AGENT section, find this statement: IF $ERRORLEVEL% EQU 0 ( Copy Add the following code as another statement inside the IF block, then save the file: copy /Y \"%RoleRoot%\\approot\\newrelic.config\" \"%NR_HOME%\" >> %RoleRoot%\\nr.log Copy You can now edit the newrelic.config hosted in Visual Studio. Whenever you publish your app, the copy command will upload the config file to the remote host. View your app's performance Your application must receive traffic in order for you to view its performance in New Relic. You may need to wait a few minutes for data to start appearing. If no data appears, see the troubleshooting procedures for Azure Cloud Services. To view your app's performance in APM: Go to one.newrelic.com > APM > (select an app). The APM Summary page automatically appears. You can also view detailed information about errors, database and instance performance issues, and more. If you created your New Relic app prior to October 2017, you can use the Azure Portal to select the New Relic account blade. You will be automatically logged in with SAML Single Sign-on (SSO) to APM. You can also view your application's error rate and throughput data in the Azure Portal by going to New Relic Accounts > choose your application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.18998,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "sections": "<em>Install</em> the .<em>NET</em> <em>agent</em> on <em>Azure</em> Cloud Services",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&gt; &lt;&#x2F;tracerfactory&gt; &lt;&#x2F;instrumentation&gt; &lt;&#x2F;extension&gt; Copy On a local <em>installation</em>, place this instrumentation file in C:\\ProgramData\\New Relic\\.<em>NET</em> <em>Agent</em>\\Extensions. Custom instrumentation file deployment Optional: To send the custom instrumentation file up with an <em>Azure</em> Cloud Service deployment: In your"
      },
      "id": "603e8e7ee7b9d2b4d42a07e3"
    },
    {
      "sections": [
        "Install Azure Marketplace app with New Relic",
        "End of life notice",
        "Install New Relic .NET agent"
      ],
      "title": "Install Azure Marketplace app with New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure installation"
      ],
      "external_id": "aef2e193486dd4993ae483d01735a03537b138b2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-installation/install-azure-marketplace-app-new-relic/",
      "published_at": "2021-09-13T21:16:27Z",
      "updated_at": "2021-03-13T02:42:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "End of life notice As of October 2017 you cannot create a New Relic account through Microsoft's Azure Marketplace Portal. Instead, if you have an Azure ID but do not already have a New Relic account, contact New Relic Sales. For more information, see the Azure transition information in New Relic's Online Technical Community. Install New Relic .NET agent Continue with the procedures to install the New Relic .NET agent with your Azure app as applicable for: Microsoft's Web App Services in the Azure Portal Microsoft's Cloud Services platform The .NET agent's support for Microsoft Azure is not the same as Infrastructure monitoring's integrations with Azure. Azure integrations have separate integration installation procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.08482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Azure</em> Marketplace app with New Relic",
        "sections": "<em>Install</em> New Relic .<em>NET</em> <em>agent</em>",
        "tags": "<em>Azure</em> <em>installation</em>",
        "body": "&#x27;s Online Technical Community. Install New Relic .<em>NET</em> <em>agent</em> Continue with the procedures to install the New Relic .<em>NET</em> <em>agent</em> with your <em>Azure</em> app as applicable for: Microsoft&#x27;s Web App Services in the <em>Azure</em> Portal Microsoft&#x27;s Cloud Services platform The .<em>NET</em> <em>agent</em>&#x27;s support for Microsoft <em>Azure</em> is not the same as Infrastructure monitoring&#x27;s integrations with <em>Azure</em>. <em>Azure</em> integrations have separate integration <em>installation</em> procedures."
      },
      "id": "6043c3ade7b9d24ead5799b2"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-09-13T22:14:32Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.899895,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-09-13T21:18:08Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.69633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-09-13T22:14:32Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.899895,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Cloud Services: No data appears",
        "Problem",
        "Solution"
      ],
      "title": "Azure Cloud Services: No data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "02ccb0a4315ac400995631f6b1967b5581548183",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears/",
      "published_at": "2021-09-13T21:18:09Z",
      "updated_at": "2021-03-13T02:47:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem You installed New Relic's .NET agent through Microsoft Azure Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution In order for the .NET agent to start up and attach to your app, at least one metric must be collected. If you have an external call or database call that New Relic instruments, then your app will report data to your APM Summary page. In addition, information about external calls will appear on your app's Service maps. Without custom instrumentation, Worker roles only report database calls and external calls. (Instrumenting a Worker Role is similar to instrumenting a custom application.) To view other details, you must gather custom metrics using New Relic's .NET API and view them in a custom dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.692825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Cloud Services: No data appears",
        "sections": "<em>Azure</em> Cloud Services: No data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem You installed New Relic&#x27;s .<em>NET</em> <em>agent</em> through Microsoft <em>Azure</em> Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution"
      },
      "id": "6043b66c28ccbc6f972d759d"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-unable-open-log-file": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-09-13T22:14:32Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.899895,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-09-13T21:18:08Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.69633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-using-always-no-data-appears": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16972,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "No data reporting with Microsoft Application Insights",
        "Problem",
        "Solution"
      ],
      "title": "No data reporting with Microsoft Application Insights",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "1b022bab6a2b6e99972745182dcd4340be20bc3f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights/",
      "published_at": "2021-09-13T22:14:32Z",
      "updated_at": "2021-04-15T22:32:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem The .NET agent has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the Azure Kudu console's Process Explorer to inspect your application's Environment Variables, it shows the COR_PROFILER_PATH_64 and COR_PROFILER_PATH_32 are set and pointing to the following: D:\\Program Files (x86)\\SiteExtensions\\InstrumentationEngine\\1.0.19\\Instrumentation64\\MicrosoftInstrumentationEngine_x64.dll Copy Solution The .NET Common Language Runtime (CLR) only allows one profiler. If Microsoft's Application Insights profiler is installed on the system, the New Relic profiler will not instrument any applications, and no data will appear. For more information, see the Microsoft Azure Web Apps documentation. To resolve this issue, remove or disable Application Insights from your application. To remove the Application Insights Site Extension: Remove all settings related to Application Insights from Application > Settings > Application Settings and Save. This may include the following keys: Any key that begins with APPINSIGHTS_ Any key that begins with APPLICATIONINSIGHTS_ Any key that begins with XDT_MicrosoftApplicationInsights_ DiagnosticServices_EXTENSION_VERSION InstrumentationEngine_EXTENSION_VERSION Remove the extension from Application > Tools > Extensions. Right-click the extension and Delete. Remove the Tile Add-On from your Application Panel (if present). Restart your application. To disable Application Insights through the Azure Portal: Go to the Application Insights panel under the Settings. This may restart your app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.899895,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem The .<em>NET</em> <em>agent</em> has been installed and the required App Settings are set, but no data appears, and no New Relic logs are created in D:\\Home\\Logfiles\\NewRelic\\. In addition, when you use the <em>Azure</em> Kudu console&#x27;s Process Explorer to inspect your application&#x27;s Environment Variables, it shows"
      },
      "id": "6043d56328ccbcd70e2c609a"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-09-13T21:18:08Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.69633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    }
  ],
  "/docs/agents/net-agent/azure-troubleshooting/no-data-reporting-microsoft-application-insights": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.1696,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Azure Web Apps: Profiler .dll locks during deployment",
        "Problem",
        "Solution",
        "Stop the file from releasing",
        "Use the New Relic Site Extension"
      ],
      "title": "Azure Web Apps: Profiler .dll locks during deployment",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "d7453c93ccf14de7be798dc0571d18118d82a4fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-web-apps-profiler-dll-locks-during-deployment/",
      "published_at": "2021-09-13T21:18:08Z",
      "updated_at": "2021-03-13T05:37:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem When deploying a new version of New Relic's .NET agent (NewRelic.Profiler.dll) for your Microsoft Azure Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New Relic packs in the site root (located at D:\\Home\\site\\wwwroot\\newrelic) during a deployment. To resolve the problem, try either of these solutions. Stop the file from releasing This solution is available for your Azure Web App if you are attempting to deploy a new .NET agent version over an existing version: Stop your web app to release the .dll file. Allow the update to proceed. Once the deploy is complete, restart the instance. Use the New Relic Site Extension You can install New Relic's .NET agent into your Azure Web App by using the New Relic Site Extension. (You should only need to install the extension once.) Navigate to https : //yoursite.scm.azurewebsites.net/ and select Site Extensions. From the Gallery, select the add icon, then select New Relic. Follow the instructions to manually add the configuration keys to your web app, and use the option that best fits your needs. To update the Site Extension: From the Azure Portal, select WebApps > (select your site) > All Settings > Extensions > New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.69633,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "sections": "<em>Azure</em> Web Apps: Profiler .dll locks during deployment",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem When deploying a new version of New Relic&#x27;s .<em>NET</em> <em>agent</em> (NewRelic.Profiler.dll) for your Microsoft <em>Azure</em> Web App, an error message prevents you from continuing until you stop or restart the process. Solution Normally the process stops, then the assets are overwritten by the assets that New"
      },
      "id": "6043b9c8196a678a1e960f5a"
    },
    {
      "sections": [
        "Azure Cloud Services: No data appears",
        "Problem",
        "Solution"
      ],
      "title": "Azure Cloud Services: No data appears",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Azure troubleshooting"
      ],
      "external_id": "02ccb0a4315ac400995631f6b1967b5581548183",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/azure-troubleshooting/azure-cloud-services-no-data-appears/",
      "published_at": "2021-09-13T21:18:09Z",
      "updated_at": "2021-03-13T02:47:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Problem You installed New Relic's .NET agent through Microsoft Azure Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution In order for the .NET agent to start up and attach to your app, at least one metric must be collected. If you have an external call or database call that New Relic instruments, then your app will report data to your APM Summary page. In addition, information about external calls will appear on your app's Service maps. Without custom instrumentation, Worker roles only report database calls and external calls. (Instrumenting a Worker Role is similar to instrumenting a custom application.) To view other details, you must gather custom metrics using New Relic's .NET API and view them in a custom dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.692825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Azure</em> Cloud Services: No data appears",
        "sections": "<em>Azure</em> Cloud Services: No data appears",
        "tags": "<em>Azure</em> <em>troubleshooting</em>",
        "body": "Problem You installed New Relic&#x27;s .<em>NET</em> <em>agent</em> through Microsoft <em>Azure</em> Cloud Services, and then you installed the NuGet package. After generating some traffic and waiting a few minutes for data to start being collected for your app, data still does not appear in the APM user interface. Solution"
      },
      "id": "6043b66c28ccbc6f972d759d"
    }
  ],
  "/docs/agents/net-agent/configuration/name-your-net-application": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.19316,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "<em>Agent</em> <em>configuration</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Important New Relic provides limited technical support for customers using .<em>NET</em> Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: <em>Agent</em> <em>configuration</em> System settings Network access Permissions settings You can perform most"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-09-14T14:49:18Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.64746,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": ".<em>NET</em> <em>agent</em>: XML example",
        "tags": "<em>Agents</em>",
        "body": " enabling security policies: common: &amp;default_settings license_key: &#x27;YOUR_LICENSE_KEY&#x27; app_name: &#x27;YOUR_APPLICATION_NAME&#x27; security_policies_token: &#x27;YOUR_TOKEN&#x27; production: &lt;&lt;: *default_settings log_level: info Copy .<em>NET</em> <em>agent</em>: XML example The .<em>NET</em> <em>agent</em> uses a XML file for <em>configuration</em>. Here"
      },
      "id": "6043d4a8196a6773a1960f68"
    }
  ],
  "/docs/agents/net-agent/configuration/net-agent-configuration": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.1931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "<em>Agent</em> <em>configuration</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Important New Relic provides limited technical support for customers using .<em>NET</em> Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: <em>Agent</em> <em>configuration</em> System settings Network access Permissions settings You can perform most"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Enable configurable security policies",
        "Important",
        "Compatibility and requirements",
        "Caution",
        "Example configuration",
        "Java agent: YAML example",
        ".NET agent: XML example",
        "Ruby agent: YAML example",
        "Available policy options",
        "For more help"
      ],
      "title": "Enable configurable security policies",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "1f645201e6e79a35f84334b11415e8a2a0edf665",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/enable-configurable-security-policies/",
      "published_at": "2021-09-14T14:49:18Z",
      "updated_at": "2021-09-14T14:49:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important APM's configurable security policies is available in limited release for approved New Relic accounts. APM's configurable security policies gives you granular control over configuration options related to your account's data security. This document explains how to enable account-wide security policies and the options available. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Compatibility and requirements APM agent versions that support this feature include: C SDK: not available Go: 2.1 or higher Java: 4.1 or higher .NET: 8.1 or higher Node.js: 4.1 or higher PHP: 8.1 or higher Python: not available Ruby: 5.2 or higher Enable configurable security policies Caution Security policies apply account-wide. Once enabled, they can only be edited or disabled with the help of New Relic support. If high security mode is enabled for the account(s), do not disable it. Account-level high security mode differs from your APM agent's high security mode, which is set in the configuration file. High security mode and configurable security policies do not apply to Lambda monitoring or use of the New Relic Event API. For the limited release, there is no UI component. If you are participating in the limited release, follow this procedure to set up your accounts: Choose the accounts on which to enable configurable security policies. Choose the configurable security policies options that you want for those accounts. Inform your New Relic sales rep of the options that you have chosen. Ensure your agent versions support this feature. Update agents if necessary. When you receive the security token based on the security policies options that you chose, insert the security token into the agent configuration file(s). See examples. Delete the high security mode enabled flag from your config file(s). High security mode (HSM) at the agent level is different than high security mode at the account level. Be sure to disable HSM in the agent's config file, as explained in this procedure. Having both the security token and the HSM flag will result in the agent disconnecting. Example configuration Here are some example configuration examples for enabling the configurable security policies: Java agent: YAML example The Java agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy .NET agent: XML example The .NET agent uses a XML file for configuration. Here is an example snippet enabling security policies: ... <configuration agentenabled=\"true\" xmlns=\"urn:newrelic-config\"> <service licensekey=\"YOUR_LICENSE_KEY\"> <application> <name>YOUR_APPLICATION_NAME</name> </application> <securityPoliciesToken>YOUR_TOKEN</securityPoliciesToken> <log level=\"info\"> </log></service></configuration> ... Copy If you prefer to use an environment variable, it would look like this: NEW_RELIC_SECURITY_POLICIES_TOKEN=YOUR_TOKEN Copy Ruby agent: YAML example The Ruby agent uses a YAML file for configuration. Here is an example snippet enabling security policies: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'YOUR_APPLICATION_NAME' security_policies_token: 'YOUR_TOKEN' production: <<: *default_settings log_level: info Copy Available policy options Here are the settings you can choose when creating your policies. Some of these options will not be available for some agents. Setting Effect Database query collection Options: Enabled: Collects obfuscated database query data. Obfuscated queries generally appear along with slow query details in the APM or New Relic One UI. Disabled: Prevents the collection of obfuscated database query data. Raw query data is not collected once configurable security policies is enabled. attributes.include list Go, Java, .NET, Node.js, Ruby only Options: Enabled: attributes.include list functions normally; attribute keys found in the attributes.include list are recorded. Disabled: Ignores the list of allowed attributes listed in the attributes.include property in agent configuration; no intrinsic request parameter attributes will be collected. Whitelisting attributes at the account level is not supported. Raw exception messages Options: Enabled: Allows recording of all raw exception messages. Disabled: Prevents recording of all raw exception messages. The messages may be either obfuscated or completely removed, depending on the agent. Custom events Options: Enabled: Allows the recording of custom events that are created and sent up via an agent API. Disabled: Prevents recording of any custom events collect by an agent API. Custom attributes Options: Enabled: Allows for the collection of custom attributes passed in by the New Relic agent. Disabled: Prevents collection of custom attributes that are collected by the New Relic agent. Custom instrumentation editor Java only Options: Enabled: Allows custom instrumentation of the agent, using the custom instrumentation editor. Disabled: Prevents custom instrumentation of the agent using the custom instrumentation editor. Instrumentation previously done via the editor is also disabled. Access to the custom instrumentation editor is only available to New Relic account Owners and Admins. Message parameters Java and Ruby only Options: Enabled: Allows the collection of message parameters (message.parameters.*). Disabled: Prevents collection of message parameters. Job arguments Ruby only Options: Enabled: Allows the collection of job arguments (job.(type).args.*). Disabled: Prevents the collection of job arguments. For more help For more information about configuration file settings, refer to your specific agent's documentation. If you are a New Relic customer and interested in the limited release of configurable security policies, contact your New Relic sales rep.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.647415,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>configurable</em> security policies",
        "sections": ".<em>NET</em> <em>agent</em>: XML example",
        "tags": "<em>Agents</em>",
        "body": " enabling security policies: common: &amp;default_settings license_key: &#x27;YOUR_LICENSE_KEY&#x27; app_name: &#x27;YOUR_APPLICATION_NAME&#x27; security_policies_token: &#x27;YOUR_TOKEN&#x27; production: &lt;&lt;: *default_settings log_level: info Copy .<em>NET</em> <em>agent</em>: XML example The .<em>NET</em> <em>agent</em> uses a XML file for <em>configuration</em>. Here"
      },
      "id": "6043d4a8196a6773a1960f68"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/add-detail-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-09-14T09:20:15Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.90787,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": ".<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.21304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " to troubleshoot running web apps with the .<em>NET</em> <em>agent</em> installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for <em>instrumentation</em>. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.81154,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " the <em>agent</em> with .<em>NET</em> <em>custom</em> <em>instrumentation</em>. Want to try out New Relic&#x27;s .<em>NET</em> <em>agent</em>? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic&#x27;s .<em>NET</em> <em>agent</em>, make sure your system meets these requirements: .<em>NET</em> Framework version .<em>NET</em> Framework 4.5"
      },
      "id": "603ea02e196a671b92a83ddc"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/create-transactions-xml-net": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-09-14T09:20:15Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.9078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": ".<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.21298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " to troubleshoot running web apps with the .<em>NET</em> <em>agent</em> installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for <em>instrumentation</em>. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.81148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " the <em>agent</em> with .<em>NET</em> <em>custom</em> <em>instrumentation</em>. Want to try out New Relic&#x27;s .<em>NET</em> <em>agent</em>? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic&#x27;s .<em>NET</em> <em>agent</em>, make sure your system meets these requirements: .<em>NET</em> Framework version .<em>NET</em> Framework 4.5"
      },
      "id": "603ea02e196a671b92a83ddc"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/custom-instrumentation-attributes-net": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-09-14T09:20:15Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.9078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": ".<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.21298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " to troubleshoot running web apps with the .<em>NET</em> <em>agent</em> installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for <em>instrumentation</em>. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.81148,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " the <em>agent</em> with .<em>NET</em> <em>custom</em> <em>instrumentation</em>. Want to try out New Relic&#x27;s .<em>NET</em> <em>agent</em>? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic&#x27;s .<em>NET</em> <em>agent</em>, make sure your system meets these requirements: .<em>NET</em> Framework version .<em>NET</em> Framework 4.5"
      },
      "id": "603ea02e196a671b92a83ddc"
    }
  ],
  "/docs/agents/net-agent/custom-instrumentation/introduction-net-custom-instrumentation": [
    {
      "sections": [
        "Custom instrumentation",
        "Important",
        "When to use custom instrumentation",
        "Implement custom instrumentation",
        "C SDK custom instrumentation",
        "Go custom instrumentation",
        "Java custom instrumentation",
        ".NET custom instrumentation",
        "Node.js custom instrumentation",
        "PHP custom instrumentation",
        "Python custom instrumentation",
        "Ruby custom instrumentation",
        "Grouping issues"
      ],
      "title": "Custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Agent data"
      ],
      "external_id": "2e6cd68b3d93f9ed716ca25b96aac87d4520de75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/agent-data/custom-instrumentation/",
      "published_at": "2021-09-14T09:20:15Z",
      "updated_at": "2021-09-14T09:20:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic collects and reports information on web transactions and non-web transactions, such as background tasks. New Relic normally produces complete information automatically, without any need to modify your application code. However, if you are not using a supported framework, you may need to add custom instrumentation. Custom instrumentation is also useful to: Add detail to your transaction traces. Block instrumentation on selected transactions you do not want instrumented. Instrument a part of your code that New Relic simply is not picking up. Custom instrumentation that creates a new transaction collects both metric timeslice and event data. Custom instrumentation for already instrumented transactions collects only metric timeslice data. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. When to use custom instrumentation Custom instrumentation allows you to track interactions that are not captured by New Relic's automatic instrumentation. Custom instrumentation can also add detail to your transaction traces, to help you identify key issues. New Relic collects data from many frameworks automatically. If you are using a supported framework, you should not need custom instrumentation to collect metric timeslices, events, and traces. However, if you encounter any of these situations, you may need custom instrumentation: Transactions do not appear in the UI. Transaction traces include large blocks of application code time without full detail. If you are using a supported framework, but are not seeing transaction on the APM Transactions page, get support at support.newrelic.com to ensure the framework instrumentation is working. Implement custom instrumentation Each agent implements custom instrumentation differently: C SDK custom instrumentation For applications monitored by the C SDK, you must manually instrument transactions, segments, and errors. For more information, see the C SDK instrumentation procedures. Go custom instrumentation Because Golang apps run from a compiled, native binary file, all New Relic instrumentation must be done manually. See Instrument Go transactions and Instrument Go segments for how to set up instrumentation in your Go app. Java custom instrumentation New Relic's Java agent supports two methods of custom instrumentation: Annotation: Add @Trace annotations to your code to ensure New Relic instruments specific methods. Annotation is easy to implement, if you are instrumenting only a few methods. For more complex instrumentation, or if you are unable to modify your code, use XML. XML: Define the methods you want New Relic to monitor in an XML file. XML instrumentation is flexible and doesn't require editing your code, but is more difficult to troubleshoot than annotation. For more information, see Java custom instrumentation. .NET custom instrumentation New Relic's .NET agent supports two methods of custom instrumentation: Attributes: Annotate your code with agent API calls to instrument specific methods. Annotation is easy to implement, but requires editing your source code. XML: Define the methods you want New Relic to instrument in an XML file. XML instrumentation does not require modifying your source code, but is more complicated to create and keep updated than attribute instrumentation. For more information, see Introduction to .NET custom instrumentation. Node.js custom instrumentation New Relic's Node.js agent uses API calls for custom instrumentation. For more information, see Node.js custom instrumentation. PHP custom instrumentation New Relic's PHP agent uses API calls for custom instrumentation. For more information, see PHP custom instrumentation. Python custom instrumentation New Relic's Python agent supports two methods of custom instrumentation: Configuration file: Use the agent configuration file to specify the functions and methods you want instrumented. The agent configuration file is easy to set up, and it does not require you to modify your code. However, it is less flexible than API calls. API calls: Edit your code to call the New Relic Python API. The API is more flexible than instrumentation via the configuration file, but it requires you to modify your code. For more information, see Python custom instrumentation. Ruby custom instrumentation New Relic's Ruby agent uses API calls to define target methods and add transaction tracers to them. For more information, see Ruby custom instrumentation. Grouping issues A metric grouping issue occurs when an account sends too many differently-named metric timeslices to New Relic, and those individual web transactions are not properly aggregated. For example, rather than a single /user/controlpanel/ metric name, you might see /user/controlpanel/alice, /user/controlpanel/bob, and /user/controlpanel/carol. Custom instrumentation can cause metric grouping issues if you introduce too many uniquely-named metric timeslices that New Relic cannot effectively group. If you send thousands of metrics, New Relic may apply rules to reduce the number of transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.90775,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Custom</em> <em>instrumentation</em>",
        "sections": ".<em>NET</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Agents</em>",
        "body": ". Implement <em>custom</em> <em>instrumentation</em> Each <em>agent</em> implements <em>custom</em> <em>instrumentation</em> differently: C SDK <em>custom</em> <em>instrumentation</em> For applications monitored by the C SDK, you must manually <em>instrument</em> transactions, segments, and errors. For more information, see the C SDK <em>instrumentation</em> procedures. Go"
      },
      "id": "603eb8b928ccbc1a79eba78c"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.21292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " to troubleshoot running web apps with the .<em>NET</em> <em>agent</em> installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for <em>instrumentation</em>. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.81142,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " the <em>agent</em> with .<em>NET</em> <em>custom</em> <em>instrumentation</em>. Want to try out New Relic&#x27;s .<em>NET</em> <em>agent</em>? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic&#x27;s .<em>NET</em> <em>agent</em>, make sure your system meets these requirements: .<em>NET</em> Framework version .<em>NET</em> Framework 4.5"
      },
      "id": "603ea02e196a671b92a83ddc"
    }
  ],
  "/docs/agents/net-agent/getting-started/8x-to-9x-agent-migration-guide": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.07861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Important New Relic provides limited technical support for customers using .<em>NET</em> Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: <em>Agent</em> configuration System settings Network access Permissions settings You can perform most"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.80431,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is deprecated and no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic&#x27;s .<em>NET</em> <em>agent</em>. It is designed to: Give you"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/getting-started/apm-agent-security-net": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.42816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods HttpClient"
      },
      "id": "603e8e7e196a675c41a83d9f"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.83913,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    }
  ],
  "/docs/agents/net-agent/getting-started/introduction-new-relic-net": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.42809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods HttpClient"
      },
      "id": "603e8e7e196a675c41a83d9f"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.83905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    }
  ],
  "/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Framework",
        "Requirements",
        ".NET Framework version",
        "App/web servers",
        "CLRs",
        "Operating system",
        "Use of other monitoring software",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Code Access Security",
        "Network requirements",
        "Application lifespan",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "Messaging",
        "CMS",
        "External call libraries",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Framework",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "9fada40fe709392d7080cc1b5bc873039501d455",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our .NET agent supports both .NET Framework and .NET Core. Here we describe the compatibility and support for .NET Framework applications. For .NET Core, see Compatibility and requirements for .NET Core. The agent includes built-in instrumentation for some of the most popular parts of the .NET Framework ecosystem, including frameworks, databases, and message queuing systems. After you download and install the agent, it runs within the monitored process. The agent does not create a separate process or service. For frameworks and libraries that are not automatically instrumented, you can extend the agent with .NET custom instrumentation. Want to try out New Relic's .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install New Relic's .NET agent, make sure your system meets these requirements: .NET Framework version .NET Framework 4.5 or higher .NET Framework 4.5 or higher requires the New Relic .NET agent version 7.0 or higher. .NET Framework 4.0 or lower To instrument applications running on .NET Framework version 4.0 and lower, you must run a version of the New Relic .NET agent earlier than 7.0. For more information and download procedures, see Technical support for .NET frameworks 4.0 or earlier. Here are additional details about .NET Framework versions 4.0 and lower: .NET Framework version Notes .NET Framework 2.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.0 Unless you have installed only .NET Framework 4.0 or higher, you must have .NET Framework version 3.5 installed on the target host, in addition to any other .NET Framework versions you have installed. .NET Framework 3.5 Fully supported by .NET agent versions below 7.0. .NET Framework 4.0 Fully supported by .NET agent versions below 7.0. If you use .NET Framework 1.1 for any app on your target system, you must disable instrumentation of that app with applicationPool set to instrument=\"false\". The .NET agent can cause crashes in .NET 1.1 apps. App/web servers You must use one of these app/web servers: IIS Self-hosted OWIN Self-hosted WCF Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 The agent automatically creates transactions for apps hosted in IIS. If you self-host with WCF and OWIN version 3 or higher, the agent also automatically creates transactions. For other self-hosted services, you will need to create transactions via custom instrumentation. CLRs The agent requires CLR version 4.0. Legacy applications running on CLR 2.0 can be instrumented with agent versions earlier than 7.0. Operating system The agent requires one of these operating systems: Windows Server 2008 Windows Server 2008 R2 Windows Server 2012 Windows Server 2012 R2 Windows Server 2016 Windows Server 2019 Windows 10 Windows Azure (OS Family 1, 2, and 3) Windows containers running on Windows 2016 (NanoServer based images are not supported) Use of other monitoring software The .NET Common Language Runtime (CLR) only allows one profiler to access the profiling API of a process at any given time. Running our .NET agent alongside other monitoring software will result in a profiler conflict. For more information, see Errors while using other APM software. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both a 32-bit and 64-bit version. On 64-bit systems, the 64-bit agent can instrument both 32-bit and 64-bit applications. Permissions Installation requires elevated privileges (Administrator). For example, you can: Be logged in as an administrator user. Be a member of the Administrators group. On newer operating systems, provide elevation credentials when prompted. The monitored process must have read/write access to the directory in which the agent is installed. The agent runs as a part of the monitored process and relies on those permissions to function. Recommendation: Restrict permissions for the newrelic.config file and give read/write access only to the owner of the monitored process. Review permissions for the logs created by the agent to minimize the number of users with access and their privileges. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Code Access Security The use of Code Access Security is compatible with the .NET agent only when Full Trust is provided. The agent is not compatible with more restrictive trust levels. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Application lifespan The .NET agent uploads data at the end of each harvest cycle (once per minute). If your .NET app doesn't run that long, you can set the service element's sendDataOnExit attribute to true in the newrelic.config file. Automatic instrumentation If your application is hosted in ASP.NET or another fully supported framework, the .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. The .NET agent does not directly monitor datastore processes. Also, by default the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collection of the SQL query parameters can be enabled in the agent configuration. App frameworks The agent automatically instruments some application frameworks; we refer to these frameworks as fully supported. Compatibility status .NET app frameworks Fully supported These frameworks are fully supported: ASP.NET MVC 2 ASP.NET MVC 3 ASP.NET MVC 4 ASP.NET MVC 5 ASP.NET Web API v2 ASP.NET Core MVC 2.0 ASP.NET Core 2.1 ASP.NET Core 2.2 ASP.NET Web Forms Castle MonoRail v2 (not the same as Mono) OWIN-hosted web API applications on .NET framework using: Microsoft.Owin.Host.HttpListener v2.x Microsoft.Owin.Host.HttpListener v3.x Microsoft.Owin.Host.HttpListener v4.x SOAP-based web services WCF Hosting Models IIS Hosted (with and without ASP Compatibility) Self Hosted Binding Types (both client and service) WCF Instrumentation has been tested for the following common binding types. Varying levels of support are available for distributed tracing (DT) and cross application tracing (CAT): Binding Distributed Tracing (DT) Support Cross Application Tracing (CAT) Support BasicHTTP supported supported WebHTTP supported supported WSHTTP supported supported NetTCP supported supported NetNamedPipe not supported * not supported * NetMSMQ not supported * not supported * * Distributed tracing may be manually implemented using these Distributed Tracing API methods. Invocation Methods (both client and service) Synchronous Asynchronous Processing Model (APM) Begin/End Task Asynchronous Processing (TAP) Event-based Asynchronous Processing (EAP) Client support only. Not fully supported These frameworks are not fully supported: ASP.NET Web API v1: See the troubleshooting information about using ASP.NET Web API v1 with New Relic's .NET agent 5.0 or higher for apps targeting .NET Framework 4.0. (This does not affect .NET Framework 4.5 or higher.) Mono: New Relic does not support Mono, an open-source .NET framework that runs on Linux. This is because there is no Profiler API to inject into the .NET agent as a profiler into Mono-based .NET applications. The Profiler API is a Component Object Model (COM)-based interface and is not supported on Linux. Not supported Classic ASP is not supported, because the agent can only instrument .NET Framework-based apps. Sharepoint is not supported. Datastores Collecting instance details for supported datastores requires .NET agent version 6.5.29.0 or higher and is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. In order to automatically instrument the performance of .NET Framework application calls to these datastores, make sure you have the .NET agent version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK version 2.x.x (2.4.0 or higher is not supported). With Couchbase, the following are not instrumented by default in favor of their multi-document counterparts: Get(string key) GetDocument(string key) Remove(string key) Remove(string key, ulong cas) Upsert<T>(string key, T value) IBM DB2 Microsoft SQL Server MongoDB We support both the modern and legacy MongoDB drivers. Legacy - mongocsharpdriver Driver versions 1.10.0 or earlier: Instance details are not available in these driver versions. Modern - MongoDB.Driver Driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector Oracle PostgreSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. ServiceStack.Redis StackExchange.Redis Messaging The agent automatically instruments these message systems: MSMQ: Puts and takes on messages NServiceBus 5.0 (6.0 or higher not supported): Puts and takes on messages and cross application tracing RabbitMQ 3.5 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver CMS The agent automatically instruments the EPiServer content management system. External call libraries The agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync RestSharp The agent instruments these RestSharp methods: ExecuteTaskAsync ExecuteGetTaskAsync ExecutePostTaskAsync Execute ExecuteAsGet ExecuteAsPost DownloadData HttpWebRequest The agent instruments these HttpWebRequest methods: GetResponse Connect the agent to other New Relic products In addition to APM, the agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring For ASP.NET applications, the .NET agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the .NET agent. Automatic browser injection is not supported for ASP.NET core applications. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.83905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Framework",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " from datastores not currently listed, <em>get</em> support at support.newrelic.com. In order to automatically instrument the performance of .<em>NET</em> Framework application calls to these datastores, make sure you have the .<em>NET</em> <em>agent</em> version 8.14 or higher: Datastore Instance details Other notes Couchbase SDK"
      },
      "id": "603ea02e196a671b92a83ddc"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46694,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "91ad78eaee13a6c99f82fb4cc4b5f3e4ed0524a1",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-09-13T22:15:25Z",
      "updated_at": "2021-07-27T10:44:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.49675,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " the <em>agent</em> on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .<em>NET</em> <em>agent</em> for Windows IIS applications. Ready to <em>get</em> <em>started</em>? Click the Guided install button. If your account reports data through our EU datacenter"
      },
      "id": "6043d1f9196a6758e7960f44"
    }
  ],
  "/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-framework": [
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.42801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, <em>get</em> support at support.newrelic.com. External call libraries The .<em>NET</em> <em>agent</em> automatically instruments these external call libraries : Libraries Supported methods HttpClient"
      },
      "id": "603e8e7e196a675c41a83d9f"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Introduction to New Relic for .NET",
        "Support for both .NET Framework and .NET Core",
        "Install the agent on Windows with our guided install",
        "Install the agent",
        "Tip",
        "Configure the agent",
        "Extend your instrumentation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for .NET",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "91ad78eaee13a6c99f82fb4cc4b5f3e4ed0524a1",
      "image": "https://docs.newrelic.com/static/23d1cfe6da584e6ebb01f6a40080b06e/c1b63/net_overview.png",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/introduction-new-relic-net/",
      "published_at": "2021-09-13T22:15:25Z",
      "updated_at": "2021-07-27T10:44:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our .NET agent for application performance monitoring, you can: Use APM to get a high-level overview of your app, to see code-level details like transaction traces, database queries, and errors, and to track activity across a large distributed system. Get proactive notifications from alerts to ensure your app is up and running smoothly. Use the query builder to query your data and create custom dashboards with that data. Install infrastructure monitoring to view the performance of your app's host environment. Support for both .NET Framework and .NET Core New Relic's .NET agent supports both .NET Framework and .NET Core, and it works with all .NET compatible languages, such as VB.NET, C#, and CLI. The agent's support for .NET Core takes advantage of the compatibility, speed, expanded API features, and cross-platform capabilities of Microsoft's .NET Core. The agent does not support Microsoft .NET Core versions earlier than 2.0. With New Relic's support for .NET, you can monitor your apps in dynamic or distributed environments, such as: Cloud-managed server VM images On-host VM servers Microsoft Azure App Services Self-hosted Windows and Linux systems Amazon AWS EC2 VMs Install the agent on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .NET agent for Windows IIS applications. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install In addition to the .NET agent, you can use this to install our infrastructure agent to discover other applications, infrastructure, and log sources running in your environment and recommend which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Install the agent Before you install the .NET agent, create your New Relic account. Then, review the requirements for .NET Framework or the requirements for .NET Core. When you are ready to install, use our launcher, or see the install instructions appropriate for your operating system: Windows or Linux. Add .NET data Tip To stay up-to-date with new features and bug fixes, see the .NET agent release notes. After you install the agent and wait a few minutes for your app to generate traffic, data will appear in the APM Summary page. If no data appears, or if you encounter other problems, see New Relic's .NET agent troubleshooting procedures. one.newrelic.com > APM > (select an app) > Summary: After installing the .NET agent, you will see a summary of your app's performance on the Summary page. Configure the agent The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. The agent also includes a variety of configuration options to further customize your installation. Extend your instrumentation After installing the .NET agent, extend the agent's instrumentation with one or more of these methods: Instrumentation options Details Browser instrumentation Integrate the .NET agent with browser monitoring to gain visibility into end-user activity. ASP.NET apps (.NET Framework only): Use any of the available options to install the browser agent. ASP.NET Core apps (targeting .NET Core or .NET Framework): Use either the API method or the copy/paste method to inject the browser agent into your webpages. Custom instrumentation Instrument transactions not captured as part of New Relic's automatic framework instrumentation. Agent API See the .NET agent API guide to learn how to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Custom attributes Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Distributed tracing Enable distributed tracing to understand activity across a complex, distributed system that uses many services and microservices. Open source telemetry Explore these tools: OpenTelemetry exporter and .NET Telemetry SDK. Check the source code The .NET agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.49674,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for .<em>NET</em>",
        "sections": "Introduction to New Relic for .<em>NET</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " the <em>agent</em> on Windows with our guided install Our guided install creates a customized CLI command for your environment that downloads and installs the .<em>NET</em> <em>agent</em> for Windows IIS applications. Ready to <em>get</em> <em>started</em>? Click the Guided install button. If your account reports data through our EU datacenter"
      },
      "id": "6043d1f9196a6758e7960f44"
    }
  ],
  "/docs/agents/net-agent/index": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46683,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 97.2339,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is deprecated and no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic&#x27;s .<em>NET</em> <em>agent</em>. It is designed to: Give you"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.034355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .<em>NET</em> <em>agent</em>. Infrastructure monitoring When you install the Infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/install-guides/install-net-agent-using-nuget": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-09-14T10:37:19Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.36165,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "dd06632bf62131d96c30b411e2a085d87901dbbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-09-13T21:07:38Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.471214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "603ea701196a67c41ba83db7"
    }
  ],
  "/docs/agents/net-agent/install-guides/install-overview": [
    {
      "sections": [
        "Install Auto-telemetry with Pixie",
        "General prerequisites for using Pixie",
        "Setup steps depend on your account status",
        "Install from the beginning of the guided install process",
        "Install from the Configure the HELM command/manifest (yaml) file",
        "Important",
        "Helm method",
        "manifest method",
        "If you link the wrong Pixie and New Relic account"
      ],
      "title": "Install Auto-telemetry with Pixie",
      "type": "docs",
      "tags": [
        "Pixie Auto-telemetry",
        "Service monitoring",
        "Kubernetes",
        "eBPF"
      ],
      "external_id": "0950cfd46d2665325c85ef2acc22f1a84933743c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/auto-telemetry-pixie/install-auto-telemetry-pixie/",
      "published_at": "2021-09-19T16:01:07Z",
      "updated_at": "2021-09-19T15:18:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To get up and running with Auto-telemetry with Pixie, you start with our guided installation. The guided installation deploys Pixie with New Relic's Kubernetes integration on your cluster. You don't need to do any further configuration or installation to start using Pixie. If you want to install Auto-telemetry with Pixie on multiple clusters, re-run the guided install for each additional cluster. General prerequisites for using Pixie You must be a New Relic full platform user. Other user-related requirements: Users on our New Relic One user model must be assigned to a group that has a role with Pixie-related capabilities. Users on our original user model cannot be Restricted. Review this Pixie data security overview for actions to take to secure your data. Make sure you have sufficient memory: Pixie requires 2Gb of memory per node in your cluster. Review the other Pixie technical requirements. Setup steps depend on your account status Use the following table to find out where to start installing Auto-telemetry with Pixie. Where you start the installation depends on whether you already have a New Relic or Pixie account, or both. New Relic Pixie Next steps Start the guided install at the beginning of the process. If you already have both types of accounts, and used the same email address for each of them, click the New Relic icon in the Pixie UI. This brings you to the Configure the HELM command/manifest (yaml) file section of the guided installation. Then, follow the steps. If you're using different email addresses in Pixie and New Relic, create a new account for either Pixie or New Relic to match email addresses across both products. You can also contact New Relic support to manually link your existing New Relic account with your Pixie account. If you follow a link to New Relic from the Pixie UI and do not have a New Relic account, you must first create one. Click the New Relic icon in the Pixie UI, and follow the steps to create a New Relic account. When you do so, your Pixie account is linked to it. Then, continue the guided install process with these steps. Sign up for a free New Relic account. Then, start the guided install at the beginning of the process. Install from the beginning of the guided install process Open our New Relic One guided install. Select the account you want to use for the guided install, and click Continue. Note: if you have a single account, you won't see this option. Select Kubernetes and then continue with step one in the next section. Install from the Configure the HELM command/manifest (yaml) file If you arrived in the guided installation process by following a link from Pixie or from within New Relic, your steps begin here. Select the account and cluster for the install. If needed, select a namespace. Important Currently, Pixie performs best on clusters with up to 100 nodes (exceeding 100 nodes can lead to excessive memory usage and scripts failing to run). Friendly reminder: autoscaling can quickly drive up your node numbers. Click Continue. Select the data you want to gather, observe, and debug, and click Continue. On the Choose install method page, select either Helm or manifest. Helm method Copy the Helm command that's provided, and then run it on your command line. See this page about installing the Kubernetes integration using Helm to learn more about the process. Helm installs a bundle containing the New Relic infrastructure agent, an integration to gather Prometheus metrics and Kubernetes events, and the Pixie integration. The deployment takes a few minutes to complete. To see the status of the install to the cluster, run kubectl get pods -n newrelic. manifest method Run the provided command in your console, and insert the path to your downloaded manifest. If you're running your Kubernetes cluster in the cloud, see the additional steps in the Kubernetes docs. Click Continue to open the Listening for data page. When you get the message, See your data, click Kubernetes Cluster Explorer to see your cluster. Auto-telemetry with Pixie might restart after installation. This is caused by the auto update feature. If you link the wrong Pixie and New Relic account Contact support to unlink a Pixie account from your New Relic account. Be aware that if you unlink a Pixie account that was created automatically through the guided install, you'll lose access to that Pixie account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.12268,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> Auto-telemetry with Pixie",
        "sections": "<em>Install</em> Auto-telemetry with Pixie",
        "body": "To get up and running with Auto-telemetry with Pixie, you start with our guided installation. The guided installation deploys Pixie with New Relic&#x27;s Kubernetes integration on your cluster. You don&#x27;t need to do any further configuration or installation to start using Pixie. If you want to <em>install</em>"
      },
      "id": "614754c628ccbc38d556a84c"
    },
    {
      "sections": [
        "PHP agent installation overview",
        "PHP components",
        "Install the agent",
        "Tip",
        "RedHat or CentOS",
        "Ubuntu or Debian",
        "Tar archive",
        "Install PHP with partnership accounts",
        "For more help"
      ],
      "title": "PHP agent installation overview",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Installation"
      ],
      "external_id": "e2acdb74f9365baa40b0b07a0bb638d19dbe6f5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/installation/php-agent-installation-overview/",
      "published_at": "2021-09-13T21:15:29Z",
      "updated_at": "2021-08-02T02:21:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic PHP agent installation. Add PHP data PHP components Our PHP agent consists of two basic components: A PHP extension, which collects data from your application A local proxy daemon, which transmits the data to New Relic Your system's configuration components, including the web server, operating system, system permissions, PHP installation itself, package manager, etc., are all important factors during installation and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. Install the agent Follow this general process to install the agent on your system. The agent installation package or tar archive includes the interactive newrelic-install script, which automates some installation tasks. Tip If your application is frequently inactive, we recommend you generate some data by interacting with the application or site. This will help ensure the agent initially connects. If you haven't already, create a New Relic account. It's free, forever. Ensure your system meets the agent's requirements, including appropriate system permissions. From your Account settings, copy your license key information. Install the agent package or tar archive on your system. RedHat or CentOS The most common way to install the agent on RedHat or CentOS is with the installation package (.rpm) and the package manager. You can tell the package manager to get it from the New Relic repository, or you can download the .rpm file directly from the New Relic website. Install the package with your preferred package manager (yum or rpm) and then run the newrelic-install script. Ubuntu or Debian Install the package either with apt-get or with dpkg commands. Typically, running the newrelic-install script is not required. Tar archive The .tar archive method is the most generic method you can use on all supported operating systems. Download the compressed tar archive for your system if any of these situations apply to you: Your operating system is not listed here. You are not using a package manager. Other methods are unsuccessful. Install the tar archive of the agent on any supported platform. Change the default application name to a meaningful name. Optional: Change other agent configuration settings to further customize your installation. Restart your web server (Apache, Nginx, PHP-FPM, etc.). Recommendation: To help ensure the PHP agent is initiated, especially if your application has infrequent activity, generate some data by using the app for a few seconds. Wait a few minutes for your application to send data to New Relic. Then, check your app's performance in the New Relic UI. Install PHP with partnership accounts Installation procedures may be different for admins who install the PHP agent through a New Relic partnership. For more information, see: AWS Heroku Magento Shared hosting providers Other partnership installation procedures Not all partners support PHP agents. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 241.58218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "PHP agent <em>installation</em> <em>overview</em>",
        "sections": "PHP agent <em>installation</em> <em>overview</em>",
        "tags": "<em>Installation</em>",
        "body": " and configuration, because the agent is a part of that. For more information about supported PHP releases, frameworks, and other system requirements, see PHP compatibility and requirements. <em>Install</em> the agent Follow this general process to <em>install</em> the agent on your system. The agent installation package"
      },
      "id": "6043c95064441f9382378ebf"
    },
    {
      "sections": [
        "New Relic guided install overview",
        "Why it matters",
        "Some technical detail",
        "Important",
        "On-host integration (OHI) recipes",
        "Troubleshoot common problems",
        "MySQL: Incorrect user permissions",
        "NGINX: No status URL"
      ],
      "title": "New Relic guided install overview",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Observe everything",
        "Get started"
      ],
      "external_id": "2058522f6cb1e82dbbe111a176c22ec4aa515ae5",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/",
      "published_at": "2021-09-19T01:39:59Z",
      "updated_at": "2021-08-20T13:37:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Instrument your systems and send telemetry data to New Relic with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install Our infrastructure agent discovers the applications and infrastructure and log sources running in your environment, and recommends which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Why it matters With our guided install, you can instrument your applications and infrastructure and start seeing your data in New Relic in minutes. The guided install uses our command line interface (CLI), the infrastructure agent for your host environment, and a library of installation recipes to instrument your applications and infrastructure for you. That means less toil for you. Because our instrumentation recipes are open source, you can modify existing recipes, or build new ones, to suit your needs. Some technical detail The New Relic guided install uses open source installation recipes to instrument on-host integrations. These recipes include installation and setup commands, information about logs, and metadata related to what’s being installed. They're collected in a YAML file for each type of system and have all of the installation details necessary to install the infrastructure agent for a specific integration. Important On Windows, our guided install only supports Microsoft SQL Server, logs, and the infrastructure agent. All other integrations are only supported on Linux. On-host integration (OHI) recipes The guided install automates the discovery, configuration, and installation of OHIs. However, there may be times when you want to instrument them one-by-one using the CLI install command. To install any individual on-host integration, run this command: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=API_KEY NEW_RELIC_ACCOUNT_ID=ACCOUNT_ID /usr/local/bin/newrelic install -n INTEGRATION-FLAG Copy For example: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=<API_KEY> NEW_RELIC_ACCOUNT_ID=<ACCOUNT_ID> /usr/local/bin/newrelic install -n apache-open-source-integration Copy The table lists the integrations supported by the guided install CLI command. The specific on-host integration commands are provided for your reference. Our open source integrations send performance metrics and inventory data from your servers and applications to the New Relic platform. You can view pre-built dashboards of your metric data, create alert policies, and create your own custom queries and charts. Integration Command Apache newrelic install -n apache-open-source-integration Cassandra newrelic install -n cassandra-open-source-integration Couchbase newrelic install -n couchbase-open-source-integration ElasticSearch newrelic install -n elasticsearch-open-source-integration HAProxy newrelic install -n haproxy-open-source-integration HashiCorp Consul newrelic install -n hashicorp-consul-open-source-integration Memcached newrelic install -n memcached-open-source-integration Microsoft SQL Server (Windows only) newrelic install -n mssql-server-integration-installer MongoDB newrelic install -n mongodb-open-source-integration MySQL newrelic install -n mysql-open-source-integration Nagios newrelic install -n nagios-open-source-integration Nginx newrelic install -n nginx-open-source-integration PostgreSQL newrelic install -n postgres-open-source-integration RabbitMQ newrelic install -n rabbitmq-open-source-integration Redis newrelic install -n redis-open-source-integration Varnish Cache newrelic install -n varnish-cache-open-source-integration Troubleshoot common problems As we identify areas where the guided install fails, we'll document them here and provide some troubleshooting guidance. MySQL: Incorrect user permissions To monitor MySQL health data, you need a valid username and password with specific permissions. These commands will create a user and grant the required permissions: Create a user newrelic@localhost with a specific password. sudo mysql -e \"CREATE USER 'newrelic'@'localhost' IDENTIFIED BY 'YOUR_SELECTED_PASSWORD';\" Copy Give replication privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Give select privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Once done, your next guided install attempt should work. NGINX: No status URL To monitor your NGINX server, you'll need to configure a valid status URL. status_url: The URL set up to provide the metrics using the status module. If the default value of 127.0.0.1 is incorrect, substitute the address/FQDN/URL for your system. Example: status_url: http://127.0.0.1/status You can read more about the status_url in these NGINX docs: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module There are different ways to set status_url, depending on how NGINX was installed: If enabled via Kubernetes: See Monitor services running on Kubernetes. If enabled via Amazon ECS: See Monitor services running on ECS. If installed on-host: Edit the config in the integration's YAML config file, nginx-config.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.91501,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic guided <em>install</em> <em>overview</em>",
        "sections": "New Relic guided <em>install</em> <em>overview</em>",
        "body": "Instrument your systems and send telemetry data to New Relic with guided <em>install</em>. Our guided <em>install</em> creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click the Guided <em>install</em> button. If your"
      },
      "id": "604130a7e7b9d299cb2a07c0"
    }
  ],
  "/docs/agents/net-agent/installation/install-net-agent-linux": [
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.09613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "Repair <em>installations</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " visibility into the current status of the .<em>NET</em> <em>agent</em> running on your server. Help you fix common <em>installation</em> issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.079926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " of the most popular parts of the .<em>NET</em> Core ecosystem, including frameworks, databases, and message queuing systems. After <em>installation</em>, the <em>agent</em> runs within the monitored process; there is not a separate process or service created by the <em>agent</em>. For frameworks and libraries that are not automatically"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/installation/install-net-agent-windows": [
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.09613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "Repair <em>installations</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " visibility into the current status of the .<em>NET</em> <em>agent</em> running on your server. Help you fix common <em>installation</em> issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.079926,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " of the most popular parts of the .<em>NET</em> Core ecosystem, including frameworks, databases, and message queuing systems. After <em>installation</em>, the <em>agent</em> runs within the monitored process; there is not a separate process or service created by the <em>agent</em>. For frameworks and libraries that are not automatically"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/installation/introduction-net-agent-install": [
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.09607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "Repair <em>installations</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " visibility into the current status of the .<em>NET</em> <em>agent</em> running on your server. Help you fix common <em>installation</em> issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46651,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.07987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " of the most popular parts of the .<em>NET</em> Core ecosystem, including frameworks, databases, and message queuing systems. After <em>installation</em>, the <em>agent</em> runs within the monitored process; there is not a separate process or service created by the <em>agent</em>. For frameworks and libraries that are not automatically"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/installation/uninstall-net-agent": [
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.09607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "Repair <em>installations</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " visibility into the current status of the .<em>NET</em> <em>agent</em> running on your server. Help you fix common <em>installation</em> issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46651,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.07987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " of the most popular parts of the .<em>NET</em> Core ecosystem, including frameworks, databases, and message queuing systems. After <em>installation</em>, the <em>agent</em> runs within the monitored process; there is not a separate process or service created by the <em>agent</em>. For frameworks and libraries that are not automatically"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/installation/update-net-agent": [
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.09607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "Repair <em>installations</em>",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " visibility into the current status of the .<em>NET</em> <em>agent</em> running on your server. Help you fix common <em>installation</em> issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46651,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent: compatibility and requirements for .NET Core",
        "Requirements",
        "Microsoft .NET Core version",
        "Target framework version",
        "Important",
        "App/web servers",
        "Operating system",
        "Microsoft Azure",
        "Processor architectures",
        "Permissions",
        "Security requirements",
        "Network requirements",
        "Automatic instrumentation",
        "App frameworks",
        "Datastores",
        "External call libraries",
        "Messaging",
        "Unavailable features",
        "Connect the agent to other New Relic products"
      ],
      "title": ".NET agent: compatibility and requirements for .NET Core",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Getting started"
      ],
      "external_id": "ce9a62a0c6a2d98442118333f39152c38bf9fdda",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/getting-started/net-agent-compatibility-requirements-net-core/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .NET agent supports both .NET Framework and .NET Core. This document describes compatibility and support for .NET Core applications. See Compatibility and requirements for .NET Framework for .NET Framework applications. New Relic's .NET agent includes built-in instrumentation for some of the most popular parts of the .NET Core ecosystem, including frameworks, databases, and message queuing systems. After installation, the agent runs within the monitored process; there is not a separate process or service created by the agent. For frameworks and libraries that are not automatically instrumented out of the box, you can extend the agent with .NET custom instrumentation. Want to try out our .NET agent? Create a New Relic account for free! No credit card required. Requirements Before you install the New Relic .NET agent on Windows or Linux, make sure your system meets these requirements: Microsoft .NET Core version The .NET agent supports .NET Core versions 2.0, 2.1, 2.2, 3.0, 3.1, and .NET 5.0. Table of minimum agent versions required per .NET Core version .NET Core Version Minimum Required .NET Agent Version .NET Core 2.0 > = 8.19.353.0 .NET Core 2.1 > = 8.19.353.0 .NET Core 2.2 > = 8.19.353.0 .NET Core 3.0 > = 8.21.34.0 .NET Core 3.1 > = 8.21.34.0 .NET 5.0 > = 8.35.0 The agent is not compatible with .NET Core versions 1.0 or 1.1. For .NET Core 2.1 or higher applications with tiered compilation enabled, the agent will disable tiered compilation. .NET Core 2.1 support requires .NET Core runtime 2.1.3 and .NET Core SDK 2.1.401 or higher due to a bug in the .NET Core profiling API. Target framework version The .NET agent only supports applications targeting .NET Core 2.0, 2.1, 2.2, 3.0, 3.1, and NET 5.0. You can find the target framework in your .csproj file: Supported: <TargetFramework>netcoreapp2.0</TargetFramework> Copy <TargetFramework>netcoreapp2.1</TargetFramework> Copy <TargetFramework>netcoreapp2.2</TargetFramework> Copy <TargetFramework>netcoreapp3.0</TargetFramework> Copy <TargetFramework>netcoreapp3.1</TargetFramework> Copy <TargetFramework>net5.0</TargetFramework> Copy Unsupported: <TargetFramework>net452</TargetFramework> Copy Important If you want to monitor an ASP.NET Core application targeting .NET Framework, ensure your install of the .NET agent has .NET Framework support enabled. App/web servers Ensure you use one of these app/web servers: Kestrel Kestrel with IIS reverse proxy via AspNetCoreModule Kestrel with IIS reverse proxy via AspNetCoreModuleV2 Kestrel with Nginx reverse proxy Kestrel with Apache reverse proxy Operating system The agent has been verified to work with the following operating systems: Operating system Supported versions Windows (32- and 64-bit Intel compatible architectures) Server 2008 R2 SP1 Server 2012 Server 2012 R2 Server 2016 Server 2019 Windows containers running on Server 2016 (NanoServer based images are not supported) Linux (64-bit Intel compatible only) All x64 Linux distributions supported by the .NET Core 2.0+/.NET 5 runtime are supported by the .NET agent. For a full list, refer to Microsoft's documentation for the version of the runtime you are using. Microsoft Azure For Azure-specific installation instructions, see: Install on Azure Cloud Services Install on Azure Service Fabric Install on Azure Web Apps Processor architectures The agent is available in both 32-bit (x86) and 64-bit (x64) versions on Windows as well as 64-bit (x64) on Linux. Permissions Installing and running the .NET agent requires these permissions: Component Necessary permissions Install the agent The process or user that installs the agent must have sufficient permissions to set environment variables and write access to the directory where the agent is installed. Run the agent The monitored process must have read/write access to the directory in which you installed the agent. The agent runs as a part of the monitored process and relies on those permissions to function. For applications using IIS via reverse proxy, the group IIS_IUSRS is often used. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Network requirements The agent requires your firewall to allow outgoing connections to specific networks and ports. Automatic instrumentation If your application is hosted in ASP.NET Core, the agent automatically creates and instruments transactions. The .NET agent will automatically instrument your application after install. If your app is not automatically instrumented, or if you want to add instrumentation, use custom instrumentation. App frameworks The .NET agent automatically instruments these application frameworks: ASP.NET Core MVC 2.0, 2.1, 2.2, 3.0, 3.1, and 5.0 (includes Web API) Datastores The .NET agent automatically instruments the performance of .NET application calls to these datastores: Datastore Instance details Notes Microsoft SQL Server Use System.Data.SqlClient version 4.3.1 or Microsoft.Data.SqlClient. PostgresSQL Use Npgsql 4.0. Prior versions of Npgsql may also be instrumented, but duplicate and/or missing metrics are possible. MongoDB Use driver version 2.3.x, 2.4.x, 2.5.x, or 2.6.x. Driver version 2.7.x: The .NET agent does not support API methods introduced by driver version 2.7.x, but does support pre-existing methods from previous versions. MySQL Use MySql.Data version 6.10.4 or later, or use the MySQL Connector StackExchange.Redis The .NET agent does not directly monitor datastore processes. Also, the .NET SQL parameter capture in a query trace does not list parameters for a parameterized query or a stored procedure. Collecting instance details for supported datastores is enabled by default. To request instance-level information from datastores not currently listed, get support at support.newrelic.com. External call libraries The .NET agent automatically instruments these external call libraries : Libraries Supported methods HttpClient The agent instruments these HttpClient methods: SendAsync GetAsync PostAsync PutAsync DeleteAsync GetStringAsync GetStreamAsync GetByteArrayAsync Messaging The agent automatically instruments these message systems: RabbitMQ 5.1.0 or higher: Puts and takes on messages and queue purge. When receiving messages using an IBasicConsumer, the EventingBasicConsumer is the only implementation that is instrumented by the .NET agent. BasicGet is instrumented, but the agent does not support distributed tracing for BasicGet. The following methods are instrumented: IModel.BasicGet IModel.BasicPublish IModel.BasicComsume IModel.QueuePurge EventingBasicConsumer.HandleBasicDeliver Unavailable features The following features are not available for the .NET agent: Memory usage on Linux due to an ongoing .NET Core issue (try using .NET performance metrics to get this information) Automatic brower monitoring script injection (API or manual instrumentation is required) The .NET agent does not support trim self-contained deployments and executables, because the compiler can potentially trim assemblies that the agent depends on. Infinite Tracing is not supported on Alpine Linux due to a GRPC compatibility issue. See this agent issue for more information. Connect the agent to other New Relic products In addition to APM, the .NET agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The browser monitoring JavaScript agent will not be injected by the .NET agent for ASP.NET core applications. However, you can inject the browser agent by using the .NET agent API or the browser agent's copy/paste method. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see browser monitoring and the .NET agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. Dashboards The .NET agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.07987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "sections": ".<em>NET</em> <em>agent</em>: compatibility and requirements for .<em>NET</em> Core",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " of the most popular parts of the .<em>NET</em> Core ecosystem, including frameworks, databases, and message queuing systems. After <em>installation</em>, the <em>agent</em> runs within the monitored process; there is not a separate process or service created by the <em>agent</em>. For frameworks and libraries that are not automatically"
      },
      "id": "603e8e7e196a675c41a83d9f"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/disablebrowsermonitoring-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getagent": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/getlinkingmetadata-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/iagent": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ignore-apdex": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.24002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ignore-transaction": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/incrementcounter-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.34221,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/index": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 897.69794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 569.4337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 569.3428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/ispan": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/itransaction": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3214,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/noticeerror-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordcustomevent-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordmetric-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/recordresponsetimemetric-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-application-name": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-transaction-uri": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/set-user-parameters": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    },
    {
      "sections": [
        "GetBrowserTimingHeader (.NET agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples",
        "With ASPX",
        "With Razor"
      ],
      "title": "GetBrowserTimingHeader (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "f12ddc677ed4387ce821e2b3868886ff97ef1f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/getbrowsertimingheader-net-agent-api/",
      "published_at": "2021-09-13T22:19:04Z",
      "updated_at": "2021-07-09T01:43:06Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Returns an HTML snippet used to enable browser monitoring. The snippet instructs the browser to fetch a small JavaScript file and start the page timer. You can then insert the returned snippet into the header of your HTML webpages. For more information, see Adding apps to Browser monitoring. Tip Compare DisableBrowserMonitoring(), which disables the browser script on a page. Parameters Parameter Description nonce string The per-request, cryptographic nonce used by Content-Security-Policy policies. Tip This API call requires updates to security allow lists. For more information about Content Security Policy (CSP) considerations, visit the browser monitoring compatibility and requirements page. Return values An HTML string to be embedded in a page header. Examples With ASPX <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()%> ... </head> <body> ... Copy <html> <head> <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")%> ... </head> <body> ... Copy With Razor <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> <body> ... Copy <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader(\"YOUR_NONCE_VALUE\")) ... </head> <body> ... Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.31796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "GetBrowserTimingHeader (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader() NewRelic.<em>Api.Agent</em>.NewRelic.GetBrowserTimingHeader(string nonce) Copy Generate a browser monitoring HTML snippet to instrument end-user browsers. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction"
      },
      "id": "603e9fea196a67a7f1a83ddc"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/settransactionname-net-agent-api": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/start-agent": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/net-agent-api/tracemetadata-net-agent-api-0": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.23866,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " New Relic&#x27;s .<em>NET</em> <em>agent</em> <em>API</em> on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "SetUserParameters (.NET agent)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples",
        "Record three user attributes",
        "Record two user attributes and one empty attribute"
      ],
      "title": "SetUserParameters (.NET agent)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "23e2d652abbd86b20905ee0296bbca03f95ca5a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/set-user-parameters/",
      "published_at": "2021-09-13T21:25:31Z",
      "updated_at": "2021-07-09T04:41:13Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all agent versions. Must be called inside a transaction. Description Tip This call only allows you to assign values to pre-existing keys. For a more flexible method to create key/value pairs, use AddCustomParameter(). Define user-related custom attributes to associate with a browser page view (user name, account name, and product name). The values are automatically associated with pre-existing keys (user, account, and product), then attached to the parent APM transaction. You can also attach (or \"forward\") these attributes to browser PageView events. Parameters Parameter Description $user_value string Required (can be null). Specify a name or username to associate with this page view. This value is assigned to the user key. $account_value string Required (can be null). Specify the name of a user account to associate with this page view. This value is assigned to the account key. $product_value string Required (can be null). Specify the name of a product to associate with this page view. This value is assigned to the product key. Examples Record three user attributes NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"MyAccountName\", \"MyProductName\"); Copy Record two user attributes and one empty attribute NewRelic.Api.Agent.NewRelic.SetUserParameters(\"MyUserName\", \"\", \"MyProductName\"); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.3422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "sections": "SetUserParameters (.<em>NET</em> <em>agent</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": "Syntax NewRelic.<em>Api.Agent</em>.NewRelic.SetUserParameters(string $user_value, string $account_value, string $product_value) Copy Create user-related custom attributes. AddCustomParameter() is more flexible. Requirements Compatible with all <em>agent</em> versions. Must be called inside a transaction. Description"
      },
      "id": "6043d56428ccbcb1ea2c60e4"
    },
    {
      "sections": [
        "AddCustomParameter (.NET agent API)",
        "Syntax",
        "Requirements",
        "Caution",
        "Description",
        "Important",
        "Parameters",
        "Examples",
        "Record a numeric value",
        "Record a string value",
        "Record both numeric and string value"
      ],
      "title": "AddCustomParameter (.NET agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "NET agent API"
      ],
      "external_id": "183f3bfa47ee43858ee248b2c1f6ca4a32eef670",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/net-agent-api/addcustomparameter-net-agent-api/",
      "published_at": "2021-09-13T22:18:07Z",
      "updated_at": "2021-07-09T02:08:14Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, string $value) NewRelic.Api.Agent.NewRelic.AddCustomParameter(string $key, IConvertible $value) Copy Attaches a custom attribute (a key/value pair) to the current transaction. Requirements Caution This API has been deprecated. Please use the AddCustomAttribute instead. Compatible with all agent versions. Must be called inside a transaction. Description Attaches a custom attribute (a key/value pair) to the current transaction. For the attribute value, you can report either a string or an IConvertible. (The call name is AddCustomParameter because \"custom attributes\" were previously called \"custom parameters.\") Custom attributes can be used to add more detail and context to errors and transaction traces that are being reported to New Relic. For example, you might add a user name attribute to a transaction to help you filter and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this API method counts as one \"user\" attribute.) You can also attach (or \"forward\") these attributes to browser monitoring's PageView events. For more information, see .NET agent attributes. Important If you want to use your custom parameters or attributes, avoid using any of the reserved terms used by NRQL. Parameters Parameter Description AddCustomParameter(string $key, string $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value string Required. The string value to add to the current transaction. There is a 255 character limit. Values that exceed this limit will be discarded. AddCustomParameter(string $key, IConvertible $value) Copy $key string Required. The key name to add to the transaction attributes. Only the first 255 characters are retained. $value IConvertible Required. The numeric value to add to the current transaction. For NRQL functions that require a numeric value (such as min(), max(), or histogram()), you must convert values to singles. Other numeric values will be converted to strings. There is a 255 character limit. Values that exceed this limit will be discarded. Examples Record a numeric value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserGuid\", (Single)1234); Copy Record a string value NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"UserName\", \"Data Nerd\"); Copy Record both numeric and string value To record attributes for a coupon code (string) and an item ID code (single), you could include this code in the parent method: NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Discount Code\", \"Summer Super Sale\"); NewRelic.Api.Agent.NewRelic.AddCustomParameter(\"Item Code\", (Single)31456); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.32138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "sections": "AddCustomParameter (.<em>NET</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>NET</em> <em>agent</em> <em>API</em>",
        "body": " and analyze your data. You can attach up to 64 attributes per transaction. (Each call to this <em>API</em> method counts as one &quot;user&quot; attribute.) You can also attach (or &quot;forward&quot;) these attributes to browser monitoring&#x27;s PageView events. For more information, see .<em>NET</em> <em>agent</em> attributes. Important If you"
      },
      "id": "6044116828ccbc34ee2c60a7"
    }
  ],
  "/docs/agents/net-agent/other-features/async-support-net": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-09-13T21:26:23Z",
      "updated_at": "2021-07-10T00:05:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.07736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-09-13T21:26:24Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.97794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    }
  ],
  "/docs/agents/net-agent/other-features/browser-monitoring-net-agent": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-09-13T21:26:24Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.97794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "35ad3dc2e183ec2658d288e185a63ed1c4b4521f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-09-13T21:27:23Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.97794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "603ea2f628ccbc9822eba77b"
    }
  ],
  "/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-09-13T21:26:23Z",
      "updated_at": "2021-07-10T00:05:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.07736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".Net Performance Metrics",
        "CPU Metrics",
        "Memory Metrics",
        "Garbage Collection Metrics",
        "Tip",
        "Important",
        "Overall Metrics",
        "Generation - 0 Heap",
        "Generation - 1 Heap",
        "Generation - 2 Heap",
        "Large Object Heap (LOH)",
        "Managed Thread Pool Metrics",
        "Worker Threads",
        "Completion Threads",
        "Throughput"
      ],
      "title": ".Net Performance Metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "e5f9bd93b19834319b08c0b64afb53fb1cdba0dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/net-performance-metrics/",
      "published_at": "2021-09-13T21:26:24Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's .Net Agent collects metrics from the .Net runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool resource contention. The full suite of .Net Performance Metrics is available .Net Agent versions 8.20 and higher. To view these metrics, create a custom dashboard. CPU Metrics The following CPU Metrics are collected: CPU/User/Utilization The percentage of CPU that is consumed by this process. CPU/User Time The amount of time the process has spent executing application code. Memory Metrics The following Memory Metrics are collected: Memory/Physical The amount of private (physical) memory, in MB, allocated to the process. Memory/WorkingSet Amount of physical memory allocated to the process. Garbage Collection Metrics The .Net Garbage collector runs in the background and is responsible for identifying and reclaiming memory tied to objects that are no longer referenced by an application. The following metrics may be useful in identifying patterns of object allocation and potential over-allocation scenarios. This article further explains the fundamentals of garbage collection in .Net. Tip Garbage collection metrics are available for: All versions of the .Net Framework .Net Core 3.0 and above. Important For .Net Framework applications, the Windows User under which your application runs must have access to windows performance counter data. Usually this is accomplished by adding the user to \"Performance Monitor Users\" and \"Performance Log Users\" groups. Insufficient permissions will result in the agent not collecting garbage collection metrics. Overall Metrics Additionally, the following Garbage collection metrics are collected: GC/Handles The number of references to objects. GC/Induced Normally, the runtime performs garbage collection automatically. This metric identifies the number of times that Garbage Collection was manually invoked by an explicit call to GC.Collect from within application code. GC/PercentTimeInGC (.Net Framework only) The percentage of elapsed time that the .Net runtime has spent performing garbage collection since the last garbage collection cycle. Generation - 0 Heap The following GC Gen0 metrics are collected: GC/Gen0/Size The amount of memory (in MB) that is available to be allocated in Generation 0. This does not indicate the amount of memory that is being used by Generation 0, but the maximum available to be allocated. GC/Gen0/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen0 to Gen1. Memory survives garbage collection when there is an active reference to it. GC/Gen0/Collections The number of times Generation 0 Garbage Collection was executed by the garbage collector. Generation - 1 Heap The following GC Gen1 metrics are collected: GC/Gen1/Size The amount of memory (in MB) that is used in the Generation 1 heap. This differs from Gen0/Size which measure the maximum amount of memory available for the generation 0 heap. GC/Gen1/Promoted The amount of memory (in MB) that has survived garbage collection and has been promoted from Gen1 to Gen2. Memory survives garbage collection when there is an active reference to it. GC/Gen1/Collections The number of times Generation 1 Garbage Collection was executed by the garbage collector. Generation - 2 Heap The following GC Gen2 metrics are collected: GC/Gen2/Size The amount of memory (in MB) that is being used by the Gen2 Heap. GC/Gen2/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. GC/Gen2/Collections The number of times Generation 2 Garbage Collection was executed by the garbage collector. Large Object Heap (LOH) The following GC LOH metrics are collected: GC/LOH/Size The amount of memory (in MB) that is being used by the Large Object Heap (LOH). In .Net Core, the Large Object Heap is sometimes referred to as Gen3. GC/LOH/Survived (.Net Core Only) The amount of memory (in MB) that has survived garbage collection. Memory survives garbage collection when there is an active reference to it. Unlike Gen0 and Gen1, memory that survives garbage collection is not promoted. Managed Thread Pool Metrics The .Net runtime manages a pool of threads. The following metrics provide visibility into the performance of an application in terms of the thread pool and may help identify areas of thread pool starvation. Thread pool starvation/contention occurs when there are not enough threads available to process the requests made by an application. The following article describes the various features of the managed thread pool. Please note that these metrics do not include information about threads that are not managed by the thread pool. Worker Threads Worker threads are CPU-bound threads that are employed to perform work on behalf of a process. Threadpool/Worker/Available Identifies the number of managed threads available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Worker/InUse Identifies the number of worker threads that are currently in use by the process. Completion Threads Completion threads, sometimes referred to as I/O threads, are employed to monitor the completion of I/O operations. Threadpool/Completion/Available This metric identifies the number of threads that are currently available to the process. Consistently low numbers indicate a potential starvation scenario. Threadpool/Completion/InUse This metric identifies the number of completion threads currently in use by the process. Throughput Throughput metrics measure how much work has been requested to be performed on a different thread, the amount of work that has been started, and how much work is waiting for a thread pool resource to become available. Threadpool/Throughput/Requested Identifies the number of times that work has been requested to be run on a different thread pool managed thread. Threadpool/Throughput/Started Identifies the number of work items requested to be run on a separate thread that have started execution. Threadpool/Throughput/QueueLength Identifies the number of work items that have been requested, but are waiting to start. Numbers that consistently increase indicate a potential thread pool starvation situation. The following article describes how to modify the number of threads that are available to an application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.97794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>Net</em> Performance Metrics",
        "sections": ".<em>Net</em> Performance Metrics",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "New Relic&#x27;s .<em>Net</em> <em>Agent</em> collects metrics from the .<em>Net</em> runtime about the performance of your application. These metrics can provide insight into how much CPU and memory an application consumes as well as how the performance of an application may be impacted by garbage collection and thread pool"
      },
      "id": "603eb36864441fdc6d4e88a2"
    }
  ],
  "/docs/agents/net-agent/other-features/net-performance-metrics": [
    {
      "sections": [
        "Browser monitoring and the .NET agent",
        "Auto-instrumentation",
        "Important",
        "Manual instrumentation via agent API",
        ".NET Web Forms view engine",
        "Other view engines such as Razor",
        ".NET MVC",
        "Disable instrumentation",
        "Disable auto-instrumentation",
        "Disable auto-instrumentation on a particular view",
        "Disable both automatic and manual instrumentation on a particular view",
        "Troubleshooting"
      ],
      "title": "Browser monitoring and the .NET agent",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "746e8fe73518ac456d3dea8c3524822766fe5e74",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/browser-monitoring-net-agent/",
      "published_at": "2021-09-13T21:26:23Z",
      "updated_at": "2021-07-10T00:05:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the .NET agent, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .NET agent, refer to the .NET agent release notes, and make sure you have the installed the latest .NET agent release. Follow the .NET agent requirements to install browser monitoring. Then follow the procedures in this document to manually instrument the .NET agent. Auto-instrumentation Important This feature is not available for asp.net core applications whether they are monitored by the .NET Framework or Core agent. Browser auto-instrumentation is enabled by default. With browser auto-instrumentation, the .NET Framework agent automatically injects the browser JavaScript header into any page that has a content-type of text/html and also has <head> tag within the page. The <head> tag search starts at the beginning of the DOM. The .NET agent injects the JavaScript header through the addition of an HttpModule that modifies the page using HTTP response filters before streaming the content to the user. The first time you enable auto-instrumentation, you may need to clean your asp.net cache directory so that aspx pages are recompiled. Use the following command: flush_dotnet_temp.cmd Copy With this injection, previously functioning pages may stop working if a content-type is not set correctly. To correct, review and update the content-types in your app or disable auto-instrumentation. Manual instrumentation via agent API If you cannot enable auto-instrumentation, you can still include the browser agent manually by using the New Relic .NET agent API and including appropriate code in your pages. To download the NewRelic.Api.agent.dll, re-run the installation and reference the .dll: From the New Relic .NET agent directory, select the New Relic.Net agent section, then select API Assembly. NuGet: Install and reference the .dll by running Install-package NewRelic.Agent.Api. To set up your web application to call the New Relic .NET agent API, add a reference to NewRelic.Api.Agent.dll to your project. Optional: If you are modifying the deployed application directory on the web server, copy NewRelic.Api.Agent.dll into the application's bin directory. Call the API in your <head> tag. If a meta-tag with the X-UA-COMPATIBLE http-equiv attribute exists, set it after that meta tag. .NET Web Forms view engine When using .NET Web Forms view engine, be sure to use = and not :. That way the view engine will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. If you are using .NET ASP Web Forms with master pages, add the header manually by calling GetBrowserTimingHeader() in your master page under the <head> tag: <%= NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader() %> Copy Import the namespace with: <%@ Import Namespace=\"NewRelic.Api.Agent\" %> Copy Other view engines such as Razor For other view engines such as Razor, you can use the GetBrowserTimingHeader() method to generate the header string. Here is a Razor-based view example: <!DOCTYPE html> <html lang=\"en\"> <head> @Html.Raw(NewRelic.Api.Agent.NewRelic.GetBrowserTimingHeader()) ... </head> </html> Copy .NET MVC When using .NET MVC, call the Html.Raw helper. That way, .NET MVC will recognize the string of HTML returned from the API as HTML / JavaScript and render it appropriately. Disable instrumentation To disable instrumentation: Disable auto-instrumentation To fully disable auto-instrumentation, edit newrelic.config and set the autoInstrument flag to false: <!-- disable auto instrumentation --> <browserMonitoring autoInstrument=\"false\"/> Copy Important If you change the flag or uninstall the .NET agent, be sure to flush your cache again so that references to the agent are removed from compiled files. Disable auto-instrumentation on a particular view To disable only auto-instrumentation on a particular view, use the agent API call DisableBrowserMonitoring(). Add this call in any view where browser scripts are not needed or wanted. Put this API call as close as possible to the top of the view where you want it disabled. Disable both automatic and manual instrumentation on a particular view To disable both auto-instrumentation and manual instrumentation for individual webpages, use the agent API call DisableBrowserMonitoring(true). Troubleshooting Follow the troubleshooting procedures if you are unable to view any browser timing data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.07736,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "sections": "Browser monitoring and the .<em>NET</em> <em>agent</em>",
        "tags": "<em>Other</em> <em>features</em>",
        "body": "With the .<em>NET</em> <em>agent</em>, you can add browser monitoring instrumentation to your webpages. Before you use browser with your .<em>NET</em> <em>agent</em>, refer to the .<em>NET</em> <em>agent</em> release notes, and make sure you have the installed the latest .<em>NET</em> <em>agent</em> release. Follow the .<em>NET</em> <em>agent</em> requirements to install browser"
      },
      "id": "6043d3b664441f6d66378ed5"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.16727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Limit log disk space with log rolling"
      ],
      "title": "Limit log disk space with log rolling",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other features"
      ],
      "external_id": "35ad3dc2e183ec2658d288e185a63ed1c4b4521f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-features/limit-log-disk-space-log-rolling/",
      "published_at": "2021-09-13T21:27:23Z",
      "updated_at": "2021-03-16T14:58:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To balance the need for logs while considering disk usage, each .NET agent will limit disk usage to 250MB using log rolling. The agent will first log to the file newrelic_agent_UNIQUENAME.log and create the file if it doesn't exist. Once that file reaches 50MB in size, the agent will: Create a new log file. Roll each existing log file to a new, sequentially numbered name (up to four archived files). Delete the fourth archive. To roll the log files, the old newrelic_agent_UNIQUENAME.log becomes the new newrelic_agent_UNIQUENAME.log(1). Then, the old newrelic_agent_UNIQUENAME.log(1) becomes the new newrelic_agent_UNIQUENAME.log(2), and so on. The old newrelic_agent_UNIQUENAME.log(4) is deleted.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.97794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Other</em> <em>features</em>",
        "body": "To balance the need for logs while considering disk usage, each .<em>NET</em> <em>agent</em> will limit disk usage to 250MB using log rolling. The <em>agent</em> will first log to the file newrelic_<em>agent</em>_UNIQUENAME.log and create the file if it doesn&#x27;t exist. Once that file reaches 50MB in size, the <em>agent</em> will: Create a new"
      },
      "id": "603ea2f628ccbc9822eba77b"
    }
  ],
  "/docs/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-09-14T10:37:19Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.361595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.4652,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "dd06632bf62131d96c30b411e2a085d87901dbbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-09-13T21:07:38Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.47117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "603ea701196a67c41ba83db7"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-09-14T10:37:19Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.361595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.4652,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "21ef5578bcf38440be72fcc2053de733d6aa95f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-09-13T21:07:39Z",
      "updated_at": "2021-07-09T11:00:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.92416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "60eefc2fe7b9d287e3fc109f"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-docker-container": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.465096,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "dd06632bf62131d96c30b411e2a085d87901dbbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-09-13T21:07:38Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.47116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "603ea701196a67c41ba83db7"
    },
    {
      "sections": [
        ".NET agent install resources",
        "Important",
        "Microsoft's .NET profiler",
        ".NET agent download library",
        "Zip files for manual .NET agent install (Windows)",
        "Caution",
        ".NET Framework environment variables for manual install",
        ".NET Core environment variables for manual install",
        "Need for custom instrumentation",
        "Install-related environment variables",
        "Scriptable installers (Windows only)",
        "Scriptable installer for .NET Framework",
        "Tip",
        "Scriptable installer for .NET Core",
        "Local install",
        "Global install"
      ],
      "title": ".NET agent install resources",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "21ef5578bcf38440be72fcc2053de733d6aa95f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/net-agent-install-resources/",
      "published_at": "2021-09-13T21:07:39Z",
      "updated_at": "2021-07-09T11:00:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains detailed descriptions of resources and procedures that are referenced in the New Relic .NET agent install procedures. Important This document is not meant to be read as a standalone document. For install instructions, see Introduction to .NET agent install. Microsoft's .NET profiler New Relic’s .NET agent relies on the Microsoft profiling API to report data from your .NET application. .NET monitoring solutions other than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .NET monitoring service in the past and haven’t completely disabled/removed it, the profiler may still be in use, which will cause profiler conflicts when you try to enable the .NET agent. .NET agent download library The New Relic .NET agent download library contains install file packages that are referenced in specific install procedures. For more on these files, see the download library’s ReadMe file. Zip files for manual .NET agent install (Windows) To manually install the agent using a ZIP file, choose the correct file for the application you wish to monitor: Go to the .NET agent download site and get the file matching your application's runtime and architecture: .NET Framework (32-bit): newrelic-agent-win-x86-VERSION.zip .NET Framework (64-bit): newrelic-agent-win-x64-VERSION.zip .NET Core (32-bit): newrelic-netcore20-agent-win-x86-VERSION.zip .NET Core (64-bit): newrelic-netcore20-agent-win-x64-VERSION.zip Unzip the agent folder in the desired location. Set environment variables for the process you wish to monitor. Caution We do not recommend setting these environment variables globally. Setting these environment variables globally can cause all .NET processes running on the system to get instrumented and report to New Relic. If you are installing the agent manually, we expect that you have the means to set these environment variables only for the processes you wish to monitor. .NET Framework environment variables for manual install For .NET Framework, the following variables are required: COR_ENABLE_PROFILING=1 COR_PROFILER={71DA0A04-7777-4EC6-9643-7D28B46A8A41} NEWRELIC_HOME=path\\to\\agent\\directory COR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy .NET Core environment variables for manual install For .NET Core, the following variables are required: CORECLR_ENABLE_PROFILING=1 CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} CORECLR_NEWRELIC_HOME=path\\to\\agent\\directory CORECLR_PROFILER_PATH=path\\to\\agent\\directory\\NewRelic.Profiler.dll Copy Restart your application. If using IIS, restart IIS. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Need for custom instrumentation After installing a .NET agent, most .NET application frameworks will automatically report data to your New Relic account. (See app framework compatibility: .NET Framework | .NET Core.) If your .NET application uses an application framework that is not automatically instrumented, or if the app has no framework (like a console app), after the install you will need to manually set up instrumentation of your app. Here are the steps to do that: Follow the relevant install instructions for your application and framework. Custom instrument your application to define what activity is reported to New Relic. Install-related environment variables A .NET agent install requires setting environment variables. For some install procedures (like for IIS-hosted .NET applications), these environment variables are set automatically. For other install procedures, you will have to manually set them. To see the required environment variables for both .NET Framework and .NET Core applications, see Environment variables. For installations requiring you to manually set environment variables, you can also set other configuration options via environment variables. Here's a look at two that are commonly set: License key. The environment variable for setting the New Relic license key is: NEW_RELIC_LICENSE_KEY = YOUR_LICENSE_KEY Copy You can also set this in the newrelic.config file or the app's config file. App name. Setting a meaningful application name is recommended, but you can also set this after install. The environment variable is: NEW_RELIC_APP_NAME = YOUR_APP_NAME Copy You can also set this via the newrelic.config, the app's config file, or the API. Scriptable installers (Windows only) The scriptable installers are ZIP archives containing a PowerShell script for installing the .NET agent. There is a separate zip archive for .NET Framework versus .NET Core. Important We recommend using the MSI installer over the scriptable installer. If you want to automate your install, consider running the MSI installer from the command line. Scriptable installer for .NET Framework To use the scriptable installer to install the .NET agent for a .NET Framework app: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation. Download the scriptable installer package for .NET Framework from the download site. By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package. Open a command shell and navigate into the unzipped package's folder. For a simple install with no options, use this command: .\\install.cmd -LicenseKey YOUR_LICENSE_KEY Copy To install with one or more additional options, use the format below. See table below for a description of the install options. install.cmd -LicenseKey YOUR_LICENSE_KEY [-NoIISReset] [-InstrumentAll] [-InstallPath PATH_TO_INSTALL] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description LicenseKey Required. Your New Relic license key. NoIISReset Optional. Use this option to prevent the installer from initiating an IIS reset. Important If you use this option, you need to do an IIS reset manually before New Relic starts instrumenting any IIS-hosted applications. InstrumentAll Optional. By default, the .NET agent will instrument all IIS-hosted applications. Use this option to enable instrumentation of other types of .NET applications. InstallPath Optional. Use this option to choose a different installation location. The default install location is C:\\Program Files\\New Relic. Uninstalling the agent with the scriptable uninstaller: Tip You can add the Force option to the uninstall script to force an uninstall without prompting to restart IIS. Execute the following command to uninstall the .NET Framework agent: .\\uninstall.cmd Copy Scriptable installer for .NET Core Important Before installing the agent: Understand the agent requirements, including the permissions requirements. Note that admin rights in an elevated shell are required (specifically for selecting a custom log directory and performing an IISReset). Caution For security reasons, it is necessary to execute the installAgent.ps1 script as shown below, by prepending ./ to the script filename, rather than by prepending powershell to the script. If you execute the script by prepending powershell, and any of your supplied arguments (e.g. the install path or custom log path) have spaces in them, these arguments will be corrupted, which would lead to the agent being installed to a location other than the intended location, which could be unsecure. To use the scriptable installer to install the .NET agent for a .NET Core application: Ensure you have administrator rights for your Windows admin group. For more details on this, see the permissions documentation Download the .NET Core agent's scriptable installer package from the .NET agent download site . By downloading or using one of these packages, you agree to and accept the license terms. Unzip the package in the desired location. Open a command shell and navigate into the unzipped package's folder. You can install the agent either locally or globally: Local install For a simple install, with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy Global install Important The global install will instrument all .NET Core processes on your system. Only choose the global install if you want all .NET Core processes monitored. For a simple install with no options, use this command: ./installAgent.ps1 -destination PATH -installType global -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\"] Copy To install with one or more additional options, use the same command with desired options. For option descriptions, see table below. ./installAgent.ps1 -destination PATH -installType local -licenseKey YOUR_LICENSE_KEY \\ [-appName \"YOUR_APPLICATION_NAME\" -logDir \"PATH_TO_CUSTOM_LOG_LOCATION\" -X86 -ResetIIS -Force] Copy If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears. Install options Description Destination Required. The location where the agent is installed. This can be an absolute or relative path. Wrapping quotes are required. InstallType Required. Determines whether this is a local (app-specific) or global (system-wide) install. LicenseKey Required. Your New Relic license key. AppName Optional. Sets the default application name associated with your agent installation. LogDir Optional. Sets a custom logging location for the agent. By default, the agent puts the logs directory in the install directory. X86 Optional. Installs the 32-bit version of the agent rather than the 64-bit version. New Relic does not recommend installing the 32-bit version of the agent globally. ResetIIS Optional. Performs an iisreset after the installation. Important Only use this if your .NET Core app is hosted via an IIS reverse proxy. Force Optional. Forces the installation process to overwrite a previous install or to install into an existing folder. Caution This overwrites any configuration customizations. New Relic recommends backing up your configuration file and any custom instrumentation files prior to forcing an over-install. Help Optional. Displays usage information for this script.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.92416,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "sections": ".<em>NET</em> <em>agent</em> <em>install</em> resources",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " profiler New Relic’s .<em>NET</em> <em>agent</em> relies on the Microsoft profiling API to report data from your .<em>NET</em> application. .<em>NET</em> monitoring solutions <em>other</em> than New Relic can use this profiling API. But only one service can use the profiler at a time. This means that if you have used a .<em>NET</em> monitoring service"
      },
      "id": "60eefc2fe7b9d287e3fc109f"
    }
  ],
  "/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-09-14T10:37:19Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.361595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.465096,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "dd06632bf62131d96c30b411e2a085d87901dbbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-09-13T21:07:38Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.47116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "603ea701196a67c41ba83db7"
    }
  ],
  "/docs/agents/net-agent/other-installation/net-agent-install-resources": [
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-09-14T10:37:19Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent \\ && rm -rf /var/lib/apt/lists/* # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.36159,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .<em>NET</em> <em>agent</em>. Examples are included for both Windows and Linux containers. Installing the .<em>NET</em> <em>agent</em> in a Docker container can be performed using the same procedures as a standard .<em>NET</em> <em>agent</em> install"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.46499,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Install .NET agent for ASP.NET Core",
        "ASP.NET Core apps targeting .NET Core",
        "ASP.NET Core apps targeting .NET Framework"
      ],
      "title": "Install .NET agent for ASP.NET Core ",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "dd06632bf62131d96c30b411e2a085d87901dbbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-aspnet-core/",
      "published_at": "2021-09-13T21:07:38Z",
      "updated_at": "2021-07-27T03:52:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document contains instructions for installing New Relic's .NET agent to monitor an ASP.NET Core application. These are additional caveats and instructions that supplement the standard installation procedures for Windows and Linux. ASP.NET Core apps targeting .NET Core New Relic automatically instruments ASP.NET Core apps targeting .NET Core that are hosted in IIS. For applications not using IIS, follow the standard installation procedures for Windows or Linux as applicable. In addition, you must enable the agent for your application and, if monitoring doesn't happen automatically, set up custom instrumentation: Enabling your app: See instructions for Windows and for Linux. Custom instrumentation: If you're not using Kestral, or if instrumentation doesn't happen by default for some other reason, you must custom instrument your app. ASP.NET Core apps targeting .NET Framework For applications not hosted in IIS, or for ASP.NET Core apps targeting .NET Framework, follow the standard installation procedure for Windows. In addition, you must follow these procedures to explicitly enable the .NET agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.47116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core ",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for ASP.NET Core",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document contains instructions for installing New Relic&#x27;s .<em>NET</em> <em>agent</em> to monitor an ASP.<em>NET</em> Core application. These are additional caveats and instructions that supplement the standard <em>installation</em> procedures for Windows and Linux. ASP.<em>NET</em> Core apps targeting .<em>NET</em> Core New Relic automatically"
      },
      "id": "603ea701196a67c41ba83db7"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/agent-changes-content-type-header-wcf-apps-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50935,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/azure-pipelines-wipes-out-newrelicazurewebsitesextension-directories": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5093,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/browser-injection-health-check-conflict": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5093,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/cocreate-errors-no-event-log": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/cocreateinstance-errors-no-profiler-log": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54733,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/debugging-net-core-agent-linux": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33907,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/generate-logs-troubleshooting-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33907,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54727,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50919,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/high-memory-usage-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54721,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50912,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/missing-couchbase-metrics-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54721,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50912,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/missing-net-async-metrics": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/monitor-short-lived-net-processes": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33876,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50906,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/net-agent-reports-handled-errors": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54709,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.509,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33861,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54709,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "Monitor short-lived .NET processes",
        "Problem",
        "Solution"
      ],
      "title": "Monitor short-lived .NET processes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "06b3ad374b16dfa3ae1688de82a35d174d8710ce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/monitor-short-lived-net-processes/",
      "published_at": "2021-09-14T10:38:21Z",
      "updated_at": "2021-09-14T10:38:21Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You have a .NET process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit and sendDataOnExitThreshold service elements in your newrelic.config. You must set the sendDataOnExitThreshold value to a lower amount of time than the process takes to complete.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.70891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor short-lived .<em>NET</em> processes",
        "sections": "Monitor short-lived .<em>NET</em> processes",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem You have a .<em>NET</em> process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit"
      },
      "id": "6043c8a728ccbc1b372c60c3"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-browser-data-appears-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54704,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-appears-after-disabling-tls-10": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33846,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54704,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50896,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-appears-net": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.3383,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-data-registry-key-permission-issues": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.3383,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet": [
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54698,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.5089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "Monitor short-lived .NET processes",
        "Problem",
        "Solution"
      ],
      "title": "Monitor short-lived .NET processes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "06b3ad374b16dfa3ae1688de82a35d174d8710ce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/monitor-short-lived-net-processes/",
      "published_at": "2021-09-14T10:38:21Z",
      "updated_at": "2021-09-14T10:38:21Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You have a .NET process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit and sendDataOnExitThreshold service elements in your newrelic.config. You must set the sendDataOnExitThreshold value to a lower amount of time than the process takes to complete.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.7088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor short-lived .<em>NET</em> processes",
        "sections": "Monitor short-lived .<em>NET</em> processes",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem You have a .<em>NET</em> process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit"
      },
      "id": "6043c8a728ccbc1b372c60c3"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/profiler-conflicts": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33815,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/resolve-net-scom-conflicts": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.33815,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "Technical support for .NET Framework 4.0 or lower",
        "Important",
        "Agent version requirements",
        "Agent configuration",
        "Instrumentation",
        "Web app",
        "Applications not hosted on IIS [#non-IIS apps]",
        "Network access and permissions",
        "Agent logs",
        "Framework version",
        "Full URL in OpenRasta requests"
      ],
      "title": "Technical support for .NET Framework 4.0 or lower",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "28059025244791aeeb54d2c2d23b1973e029302c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower/",
      "published_at": "2021-09-14T16:30:05Z",
      "updated_at": "2021-09-14T16:30:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important New Relic provides limited technical support for customers using .NET Framework 4.0 or earlier. This level of support includes ensuring that the following areas are configured as expected: Agent configuration System settings Network access Permissions settings You can perform most troubleshooting checks by using New Relic Diagnostics, with the exception of a few checks that must be done manually. If a New Relic Diagnostics check does find an issue, information on additional troubleshooting and potential resolutions will appear in your terminal. Agent version requirements To get the most out of your New Relic .NET Framework agent, make sure you follow New Relic's compatibility and requirements guidelines. Important Applications running on .NET Framework version 4.0 or lower require a New Relic .NET agent version lower than 7.0. Download and run the appropriate install package for your architecture: 32-bit installer 64-bit installer Agent configuration Limited technical support to troubleshoot your basic installation and configuration includes: Check if the .NET agent is present and has valid configuration files. If the agent is installed, check for the agent's core .dll. If the config file is valid, check for expected elements. For example, include a manual check that it conforms to the standards laid out in the .xsd. Instrumentation Limited technical support to troubleshoot if instrumentation is possible includes: Check if WAS registry keys and required values are present and valid. Check W3SVC registry keys and required values are present and valid. Check ENV (non-IIS/global environment variables) reg keys and required values are present and valid. Verify if instrumentation is possible by using these key checks to determine what types of apps can be monitored. Confirm that the process has the necessary environment variables loaded. For example, use a tool such as the Microsoft Sysinternals Process Explorer. Web app Some checks require elevated permissions. For best results, run New Relic Diagnostics from an Admin shell. Limited technical support to troubleshoot running web apps with the .NET agent installed includes: Check for any running W3WP processes, and get their pid. Check for key .dll required for instrumentation. For example, if there are any W3WP processes, check if the New Relic profiler .dll and mscorelib.dll are loaded into the process. Applications not hosted on IIS [#non-IIS apps] Limited technical support to troubleshoot apps not hosted on IIS includes: When using the MSI, ensure the Instrument all option has been enabled. Check that the custom instrumentation file has been created, is in the proper place, and is accurate. If applicable, include a manual check that it conforms to the standards laid out in the .xsd. Network access and permissions Limited technical support to troubleshoot system network access and permissions applies to any agent version, and includes: Check system network access and permissions. Run collector tests. For example, check whether the URL https://collector.newrelic.com/status/mongrel is up and the server can connect to it. Check whether the config file contains any proxy settings, if proxy info has been passed to New Relic Diagnostics, and if these settings allow for connection to New Relic collectors. Check if New Relic Diagnostics is running as admin. New Relic Diagnostics must run as admin to help ensure accuracy of some other tests. Also, admin rights are required to install the .NET agent. Agent logs Limited technical support to troubleshoot information available from .NET agent logs includes: Gather any available agent logs. Check the log level. Check for known issues noted in the logs. Troubleshooting log files may require you to work directly with New Relic Support. Framework version Limited technical support depends on which .NET agent version you are using. New Relic Support will check what framework versions of the .NET agent are installed on the system. Full URL in OpenRasta requests When using OpenRasta instrumentation, the full URL may be captured on instrumented requests. This may result in query strings being collected that may contain sensitive information. See security bulletin NR19-01.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.54692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "sections": "Technical support for .<em>NET</em> Framework 4.0 or lower",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": " for your architecture: 32-bit installer 64-bit installer <em>Agent</em> configuration Limited technical support to <em>troubleshoot</em> your basic installation and configuration includes: Check if the .<em>NET</em> <em>agent</em> is present and has valid configuration files. If the <em>agent</em> is installed, check for the <em>agent</em>&#x27;s core .dll"
      },
      "id": "60440f1364441fdf90378ed4"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    }
  ],
  "/docs/agents/net-agent/troubleshooting/technical-support-net-framework-40-or-lower": [
    {
      "sections": [
        "No stack traces (.NET)",
        "Problem",
        "Solution",
        "No stack traces for 500 errors",
        "Cause"
      ],
      "title": "No stack traces (.NET)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "cad08a2b523f84e83ba43a7b5e386d2406394a86",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/no-stack-traces-dotnet/",
      "published_at": "2021-09-19T16:04:25Z",
      "updated_at": "2021-09-19T15:23:03Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .NET app. Solution Depending on the situation, follow these troubleshooting procedures. No stack traces for 500 errors This is normal behavior for how the .NET agent handles 500 errors. To force stack traces to be reported, call the New Relic .NET API from your own code. Running the NewRelic.NoticeError(Exception) method will cause an error to be reported along with the stack backtrace represented by the Exception. For more information about this method and its overloads, see New Relic's .NET agent API on GitHub. Cause Returning a 500 error means that the application server itself detected an error and set the HTTPS 500 status code. If the error condition was detected and handled by application logic, there was no exception object and thus, no stack. If there was an exception object at some point, but it was handled internally by the application code that set the 500 status on the response, then the exception never became visible to the .NET agent. There is no stack available for the .NET agent to report. When stack traces are reported, the error results from an exception that was not caught and handled within the application server logic. The .NET agent sees the unhandled exception during a monitored transaction, so it reports the stack trace. However, no stack traces appear for the 500 errors because the application server is handling the errors and then setting the status code. The application code itself does not retain any stack traces.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No stack traces (.<em>NET</em>)",
        "sections": "No stack traces (.<em>NET</em>)",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem Depending on the situation, you may find error traces in the APM UI that do not include stack traces for your .<em>NET</em> app. Solution Depending on the situation, follow these <em>troubleshooting</em> procedures. No stack traces for 500 errors This is normal behavior for how the .<em>NET</em> <em>agent</em> handles 500"
      },
      "id": "614755d7e7b9d2b4ebb6f21d"
    },
    {
      "sections": [
        "New Relic for .NET status monitor",
        "Important",
        "View the status of monitored apps",
        "Repair installations"
      ],
      "title": "New Relic for .NET status monitor",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "5827145411de961dea183ff1bfd20492413a448d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/new-relic-net-status-monitor/",
      "published_at": "2021-09-14T14:49:16Z",
      "updated_at": "2021-09-14T14:49:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of .NET agent release 6.20, New Relic's.NET status monitor is deprecated and no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor is a deprecated diagnostic and status tool for New Relic's .NET agent. It is designed to: Give you visibility into the current status of the .NET agent running on your server. Help you fix common installation issues. Provide a quick link to each of your instrumented applications in newrelic.com. Provide quick access to the New Relic log file for each instrumented application. For additional help, view the New Relic .NET agent's troubleshooting documentation. View the status of monitored apps Important As of .NET agent release 6.20, New Relic's.NET status monitor is no longer available. For .NET agent versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility into which applications are currently being instrumented by the .NET agent and the status of each application. You will not see any data on an application unless there has been traffic on it recently. In order to conserve your system resources, the status monitor does not automatically refresh. To launch the status monitor: From your Windows Start menu or Start screen, search for Status monitor. OR Right-click the New Relic icon in the Windows task bar status area (system tray), then select Monitored applications. To view whether an application is being instrumented, make sure all of its checkboxes are green. After you select a specific application, select any of the available options to view the app in New Relic, view log files, repair the installation if errors are found, or refresh and then view the latest status for your monitored processes and applications. Repair installations New Relic's .NET agent installation is robust and simple to use. However, there are certain scenarios when previous installations may conflict with the latest version. To fix common problems, repair your installation: From the status monitor's list of apps, select an app, then select Repair installation. OR From the Windows system tray, select the New Relic icon, then select Tools > Repair installation. After the installation repair is finished: From the command line, perform an IISRESET.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.50879,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic for .<em>NET</em> status monitor",
        "sections": "New Relic for .<em>NET</em> status monitor",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": ", view the New Relic .<em>NET</em> <em>agent</em>&#x27;s <em>troubleshooting</em> documentation. View the status of monitored apps Important As of .<em>NET</em> <em>agent</em> release 6.20, New Relic&#x27;s.<em>NET</em> status monitor is no longer available. For .<em>NET</em> <em>agent</em> versions 6.20 or higher, use New Relic Diagnostics. The status monitor provides visibility"
      },
      "id": "6043f88c28ccbc95632c6062"
    },
    {
      "sections": [
        "Monitor short-lived .NET processes",
        "Problem",
        "Solution"
      ],
      "title": "Monitor short-lived .NET processes",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Troubleshooting"
      ],
      "external_id": "06b3ad374b16dfa3ae1688de82a35d174d8710ce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/troubleshooting/monitor-short-lived-net-processes/",
      "published_at": "2021-09-14T10:38:21Z",
      "updated_at": "2021-09-14T10:38:21Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You have a .NET process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit and sendDataOnExitThreshold service elements in your newrelic.config. You must set the sendDataOnExitThreshold value to a lower amount of time than the process takes to complete.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.70868,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor short-lived .<em>NET</em> processes",
        "sections": "Monitor short-lived .<em>NET</em> processes",
        "tags": "<em>NET</em> <em>agent</em>",
        "body": "Problem You have a .<em>NET</em> process that runs for less than 60 seconds and are not seeing data reported for that process. Solution The APM harvest cycle is 60 seconds. For this reason, processes that run for shorter periods of time may not report data. To fix this, use the sendDataOnExit"
      },
      "id": "6043c8a728ccbc1b372c60c3"
    }
  ],
  "/docs/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api": [
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.80048,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>API</em>",
        "sections": "Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " and the <em>Node.js</em> <em>agent</em> <em>API</em> documentation on Github. Request names The <em>Node.js</em> <em>agent</em> captures the HTTP method along with a potentially parameterized path (such as &#x2F;user&#x2F;:id) or a regular expression (such as &#x2F;^&#x2F;user&#x2F;([-0-9a-f]+)$&#x2F;). These pieces of information become part of the request name. If you have support"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.343666,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> <em>API</em>. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.598946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    }
  ],
  "/docs/agents/nodejs-agent/api-guides/nodejs-agent-api": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> <em>API</em>. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.59891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Guide to using the Node.js agent API",
        "Requirements",
        "Instrument missing sections of your code with transactions",
        "Time specific methods using segments",
        "Enhance the metadata of a transaction",
        "Instrument asynchronous work",
        "Instrument calls to external services",
        "Collect or ignore errors",
        "Send custom event and metric data from your app",
        "Control the browser agent",
        "Extend custom instrumentation"
      ],
      "title": "Guide to using the Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "0c26c1cc3ef128c47758c020985c2d4942db7fdb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/guide-using-nodejs-agent-api/",
      "published_at": "2021-09-13T21:20:05Z",
      "updated_at": "2021-03-11T08:08:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent API allows you to extend the agent's standard functionality. You can use this API to: Create custom transaction parameters Report custom errors and metrics You can also use the API for custom instrumentation. For supported frameworks, the agent instruments most activity automatically. Custom instrumentation lets you extend that monitoring to frameworks without default instrumentation. Other resources: The Node.js agent API documentation on GitHub has more detail and practical tutorials. You can also adjust the Node.js agent's default behavior with configuration settings. To see all available New Relic APIs, see Intro to APIs. Requirements To use the Node.js agent API, make sure you have the latest Node.js agent release. In addition, see: Node.js agent API requirements Getting started procedures on GitHub Instrument missing sections of your code with transactions To instrument your app, New Relic separates each path through your code into its own transaction. New Relic times (or \"instruments\") the parent method in these transactions to measure your app's overall performance, and collects transaction traces from long-running transactions for additional detail. Use these methods when New Relic is not instrumenting a particular part of your code at all: If you want to... Do this... Start timing a method New Relic is not instrumenting automatically Create a new transaction. See newrelic.startWebTransaction(). Stop timing a method after its work is completed Use either of these options: Return a promise from the callback handed to newrelic.startWebTransaction. Call end on a handle returned from newrelic.getTransaction. Prevent a transaction from reporting to New Relic Ignore the transaction using any of these options: See Rules for ignoring requests. Call ignore() on a handle returned from newrelic.getTransaction. Time specific methods using segments If a transaction is already visible in New Relic, but you don't have enough data about a particular method that was called during that transaction, you can create segments to time those individual methods in greater detail. For example, you might want to time a particularly critical method with complex logic. Use this method when you want to instrument a method within an existing transaction: If you want to... Do this... Time a particular method See newrelic.startSegment(). For more information about timing, see the instrumentation tutorial on GitHub. Enhance the metadata of a transaction Sometimes the code you are targeting is visible in New Relic, but some details of the method are not useful. For example: The default name might not be helpful. (Perhaps it is causing a metric grouping issue.) You want to add custom attributes to your transactions so you can filter them . Use these methods when you want to change how New Relic instruments a transaction that's already visible in New Relic: If you want to... Do this... Change the name of a transaction See newrelic.setTransactionName and rules.name. Add metadata (such as your customer’s account name or subscription level) to your transactions Use custom attributes. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Create a new transaction for background work See newrelic.startBackgroundTransaction(). Create a new web transaction Use newrelic.startWebTransaction(). Prevent a transaction from affecting your Apdex score See Rules for naming and ignoring requests, including the ignoring rules example. Record other performance data, such as timing or computer resource data Use the custom metrics API. Instrument asynchronous work For supported frameworks and supported Node.js versions, New Relic's Node.js agent usually correctly instruments async work. However, if your app uses another framework, or if the default async instrumentation is inaccurate, you can explicitly track async work. If you want to... Do this... Trace an async method that New Relic is already instrumenting See newrelic.startSegment. Trace an async method that New Relic is not instrumenting See newrelic.startSegment. Trace a transaction that got lost See newrelic.startSegment. You can also create your own custom instrumentation for libraries that are losing your transactions. Trace a lost transaction state A common issue is the loss of transaction state while using uninstrumented libraries. For more information, see the transaction preservation tutorial on GitHub. Instrument calls to external services Once the request naming API loads, New Relic's Node.js agent can automatically identify external service calls. You can also use these methods to collect data about your app's connections to other apps or databases: If you want to... Do this... Time a call to an external resource (such as an external service, database server, or message queue) Use any of these as appropriate: Custom instrumentation API Message queues Also see the tutorials on GitHub for datastore shims and message shims. Connect activity to another app instrumented by a New Relic agent Use cross application tracing. Collect or ignore errors Usually the agent detects errors automatically. However, you can manually mark an error with the agent. You can also mark errors as ignored. If you want to... Do this... Report an error the agent does not report automatically See newrelic.noticeError(). Send custom event and metric data from your app New Relic includes a number of ways to record arbitrary custom data. For an explanation of New Relic data types, see Data collection. If you want to... Do this... Send data about an event so you can analyze it in New Relic Create a custom event. See newrelic.recordCustomEvent(). Tag your events with metadata to filter and facet them Add custom attributes if needed. (Custom attribute collection is enabled by default in the Node.js agent.) See newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). Report custom performance data Create a custom metric. See newrelic.recordMetric() and newrelic.incrementMetric(). To view the data, use the data explorer. Control the browser agent Usually the browser agent is added automatically to your pages or deployed by copy/pasting the JavaScript snippet. For more information about these recommended methods, see Add browser apps to New Relic. You can also control the browser agent via APM agent API calls. For more information, see Browser monitoring and the Node.js agent. Extend custom instrumentation The newrelic.instrument() provides additional flexibility for custom instrumentation. For more information, including tutorials and examples, see the shims documentation on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.52692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "sections": "<em>Guide</em> to using the Node.js <em>agent</em> <em>API</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> <em>API</em> allows you to extend the <em>agent</em>&#x27;s standard functionality. You can use this <em>API</em> to: Create custom transaction parameters Report custom errors and metrics You can also use the <em>API</em> for custom instrumentation. For supported frameworks, the <em>agent</em> instruments most activity"
      },
      "id": "60440faae7b9d29ea8579a05"
    }
  ],
  "/docs/agents/nodejs-agent/attributes/nodejs-agent-attributes": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.18126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "<em>Attributes</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " headers are limited to those defined in <em>Node.js</em> <em>agent</em> <em>attributes</em>. Type Boolean Default false Caution Any header-related include&#x2F;exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.12022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "newrelic.recordCustomEvent(eventType, <em>attributes</em>)",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.59891,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/apollo-server-plugin-nodejs": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/message-queues": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-09-13T21:34:44Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.30573,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-metrics": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-v1-custom-instrumentation-legacy": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vm-measurements": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js VMs statistics page",
        "What you need",
        "View Node VM statistics",
        "Analyze performance issues",
        "GC pause time",
        "GC pause frequency",
        "GC pause time by type",
        "Memory usage",
        "CPU utilization",
        "Event loop — ticks per minute",
        "Event loop — max CPU time per tick",
        "View clusters of multiple processes"
      ],
      "title": "Node.js VMs statistics page",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "b1c5ecf7ca24b63c50ed1021f020d62e513f8455",
      "image": "https://docs.newrelic.com/static/b0ab0aacf7b062b687be29a94ff96a43/8c557/vm-dashboard.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-03-16T15:01:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In New Relic's APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of your application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the Node.js agent. For installation instructions, see Node VM Measurements. View Node VM statistics one.newrelic.com > APM > (select an app) > Node VMs: When multiple servers are reporting to the same application, the page breaks charts down by server. You can view data for an individual server and obtain additional details by selecting a server from the Servers filter at the top of the page. To correlate spikes or upward trends in any of these measurements with specific transactions: Go to one.newrelic.com > APM > (select an app) > Node VMs. Select the time period by clicking and dragging within any of the charts. Navigate to the Transactions page or any other page. As you go to other pages, the time picker selection will remain the same. Analyze performance issues Here is a summary of the data available on individual Node VM charts. By using all of the charts together, you can troubleshoot performance issues. For example: When the application starts using more objects, memory usage will increase, and garbage collection (GC) will run more frequently. CPU utilization will increase due to time spent in GC. Abnormally long synchronous code execution can increase CPU utilization. This will show spikes in the Event loop max CPU time per tick chart. GC pause time The amount of time spent in garbage collection. For a single server, the chart shows average, max, and total time per minute. For multiple servers, the chart shows total time grouped by server. Typically, spikes in GC time or frequency indicate a potential issue. GC pause frequency The number of times GC runs were executed per minute. For a single server, the chart is broken down by the type of GC. For multiple servers, the chart shows total number of GC calls (all types combined) grouped by server. GC pause time by type This chart shows the total time spent in garbage collection per minute, broken down by GC type. It is only shown when viewing a single server. You might see the following types depending on your version of Node.js and app activity: Value Description Scavenge The most common garbage collection method. Node.js will typically trigger one of these every time the VM is idle. MarkSweepCompact The heaviest type of garbage collection V8 may do. If you see many of these happening you will need to either keep fewer objects around in your process or increase V8's heap limit. IncrementalMarking A phased garbage collection that interleaves collection with application logic to reduce the amount of time the application is paused. Only in Node.js v6 or higher. ProcessWeakCallbacks After a garbage collection occurs, V8 will call any weak reference callbacks registered for objects that have been freed. This measurement is from the start of the first weak callback to the end of the last for a given garbage collection. Only in Node.js v6 or higher. Memory usage This chart shows the amount of memory consumed by the Node.js process. For multiple servers, the chart shows total memory grouped by server. For a single server, the chart is segmented by the following types of memory: Value Description Non-heap The memory allocated to data outside V8's heap (for example, buffers, sockets). V8 heap (used) The amount of memory being used by V8 (for example, JavaScript objects). V8 heap (free) The amount of memory set aside by V8 for memory pooling. This memory isn't being actively used, but is set aside for V8 to freely allocate more as needed. CPU utilization This chart shows the CPU utilization of the Node process. For multiple servers, the chart shows total CPU utilization grouped by server. For a single server, the chart is segmented by the following: Value Description User The time spent executing the user code, divided by wall-clock time. System The time spent in the system kernel on behalf of the Node process, divided by wall-clock time. Event loop — ticks per minute This chart shows the number of event loop ticks per minute. A tick is a single turn of the event loop, in which functions that are ready to be executed are run. As a part of each event loop turn, Node waits for pending I/O to complete. Once any I/O events are received, the event loop executes callbacks associated with it. Therefore, the number of ticks per minute corresponds to how frequently I/O events occur. Event loop — max CPU time per tick This chart shows the maximum time spent in a single tick per minute. This is useful with detecting an abnormally long event loop tick, which indicates long synchronous code execution. View clusters of multiple processes When multiple Node.js processes on the same server report to the same New Relic application, these charts will show aggregated data. This is because each worker process in a cluster has its own separate Node.js runtime and collects separate data. Clusters Comments Sum across all workers The following charts show a sum across all workers: GC pause time - Total time per minute GC pause frequency GC pause time by type CPU utilization Event loop ticks per minute Average from all workers The following charts show an average from all workers: Memory usage GC pause time — average Max across all workers The following charts show max across all workers: GC pause time — max Event loop — max CPU time per tick",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "In New Relic&#x27;s APM, the Node VMs page provides useful runtime data for troubleshooting performance issues and monitoring the health of <em>your</em> application. What you need Some of the charts on the Node VMs page require you to install the New Relic Native Metrics Module in addition to the <em>Node.js</em> <em>agent</em>"
      },
      "id": "603ea123e7b9d2eb022a0811"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    }
  ],
  "/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-vms-statistics-page": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 140.16936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add <em>Node.js</em> data. <em>Extend</em> <em>your</em> <em>instrumentation</em> After installing the <em>Node.js</em> <em>agent</em>, <em>extend</em> <em>your</em> <em>instrumentation</em>: <em>Extend</em> <em>your</em> <em>instrumentation</em> Comments Customization Implement <em>Node.js</em> custom <em>instrumentation</em>. Collect"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js custom instrumentation",
        "Agent version requirements",
        "Instrument unsupported web frameworks",
        "Instrument unsupported message service clients",
        "Instrument unsupported datastores",
        "Instrument web transactions",
        "Custom web transaction example: Instrument three transactions in socket.io",
        "Instrument background transactions",
        "Custom background transaction example: Instrument within setInterval",
        "Expand instrumentation within transactions",
        "Important",
        "Example: Instrument a callback",
        "Example: Instrument asynchronous functions using callbacks",
        "Example: Instrument asynchronous functions using promises",
        "Example: Instrument async functions",
        "Example: Instrument a synchronous function"
      ],
      "title": "Node.js custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "284f422639e1af4a65c26edd4d3f5bc53106e51a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/nodejs-custom-instrumentation/",
      "published_at": "2021-09-13T21:35:42Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Node.js automatically instruments most standard web requests, but sometimes you want expanded instrumentation. With the agent's custom instrumentation API, you can create instrumentation for otherwise unsupported web frameworks, datastores, and message service clients. The Node.js agent's custom instrumentation API also allows you to: Create web transactions (useful for things like web sockets, where transactions can't be automatically created). Create non-web background transactions (useful for recording background jobs). Target specific sections of your code for deeper analysis. Agent version requirements The custom instrumentation methods in this document are available as of Node.js agent version 2.0.0. For information on instrumentation using the custom instrumentation API v1.x, see the documentation for legacy Node.js custom instrumentation. Instrument unsupported web frameworks Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional web frameworks. For more information, including a tutorial, see the documentation for Node.js web framework instrumentation on GitHub. Instrument unsupported message service clients Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional message service libraries. For more information, including a tutorial, see the documentation for Node.js message service client instrumentation on GitHub. Instrument unsupported datastores Beginning with Node.js agent version 2.0.0, New Relic provides an API to expand instrumentation for additional datastore libraries. For more information, including a tutorial, see the documentation for Node.js datastore instrumentation on GitHub. Instrument web transactions In order to create custom web transactions, call startWebTransaction to start the transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startWebTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom web transaction example: Instrument three transactions in socket.io This example instruments a /websocket/ping transaction, a /websocket/update transaction, and a /websocket/new-message transaction within socket.io. The /ping example is synchronous, while the /new-message and /update examples are asynchronous. var nr = require('newrelic') var app = require('http').createServer() var io = require('socket.io')(app) io.on('connection', function (socket) { socket.on('ping', function (data) { nr.startWebTransaction('/websocket/ping', function transactionHandler() { // Ended automatically after synchronously returning socket.emit('pong') }) }) socket.on('update', function (data) { nr.startWebTransaction('/websocket/update', function transactionHandler() { // Using API#getTransaction var transaction = nr.getTransaction() updateChatWindow(data, function transactionHandler() { socket.emit('update-done') transaction.end() }) }) }) socket.on('new-message', function (data) { nr.startWebTransaction('/websocket/new-message', function transactionHandler() { // Returning a promise return new Promise(function (resolve, reject) { addMessageToChat(data, function () { socket.emit('message-received') resolve() }) }) }) }) }) Copy This method only gives basic timing data for the transaction created. To create more intricate timing data and transaction naming for a particular framework, see the Node.js API documentation and the related tutorial on GitHub. Instrument background transactions You can use custom transactions to instrument non-web transactions (background tasks); for example: Periodic jobs within your app Work that continues after a request completes To instrument background tasks, call startBackgroundTransaction in your handler to start a background transaction. To end the transaction, use any of these options: Ending the transaction Comments Promise If the handler passed to startBackgroundTransaction returns a promise, the agent will end the transaction when the returned promise resolves or rejects. Manual If you call getTransaction in the context of the new transaction, this notifies the agent that the transaction will be handled manually. If getTransaction is called in the handler, then you must end the transaction by calling transaction.end(). Synchronous If neither of these options are fulfilled, the transaction will be ended when the handler returns synchronously. Custom background transaction example: Instrument within setInterval This example instruments update:cache within setInterval: var nr = require('newrelic') var redis = require('redis').createClient() // Using API#getTransaction to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('update:cache', function transactionHandler() { var newValue = someDataGenerator() var transaction = nr.getTransaction() redis.set('some:cache:key', newValue, function () { transaction.end() }) }) }, 30000) // Every 30s //Using a promise to manage ending the transaction setInterval(function () { nr.startBackgroundTransaction('flush:cache', function transactionHandler() { return new Promise(function(resolve, reject) { flushCache(redis, function afterFlush(err) { if (err) { return reject(err) } resolve() }) }) }) }, 60*60*1000) Copy Expand instrumentation within transactions You can create instrumentation using the instrumentation registration methods on the API. Writing instrumentation using the instrumentation API allows you to specify metrics and naming in greater detail by \"monkey patching\" methods (replacing functions) on relevant objects. Other options can offer visibility into web transactions that are already instrumented, or gain insight into databases and other in-transaction work that is not automatically instrumented. To do this, wrap your callbacks in custom tracers. Custom tracers create and collect specific metrics for an additional segment within an existing transaction, such as a particular function or a database call. To instrument individual callbacks, call startSegment() inside the callback, and move the main callback logic to the handler function. To instrument a function that is called inside an asynchronous function, wrap both the target function and its parent asynchronous function with startSegment(). Important These examples must be placed in code that is running under a transaction. The origin of the transaction, custom or automatically created, does not matter. Example: Instrument a callback This example tracks a single callback: // Wrap the method in a segment. nr.startSegment('db:createObject', true, function(cb) { // This is recorded as the `db:createObject` segment. db.createObject(cb) }, function(err, result) { // This is recorded as the callback to the `db:createObject` segment. if (util.handleError(err, res)) { return } res.write(JSON.stringify(result.rows[0].id)) res.write('\\n') res.end() }) Copy Example: Instrument asynchronous functions using callbacks This example tracks both pg.connect and client.query. This is because client.query is called by an asynchronous parent function (pg.connect). Otherwise, you would not get any data from client.query. This allows startSegment() to propagate the active transaction across those asynchronous boundaries. nr.startSegment('pg:connect', true, function(cb) { pg.connect(config.db_string, cb) }, function(err, client, done) { if (util.handleError(err, '500', res)) { return done() } nr.startSegment('pg:query', true, function(cb) { client.query('SELECT count(*) FROM test_count'), cb) }, function(err, result) { if (util.handleError(err, '500', res)) { return done() } res.write(result.rows[0].count) res.write('\\n') }) }) Copy Example: Instrument asynchronous functions using promises This example is the same as the callback one, but for interacting with a promise-based API. For promises, simply return the promise and call then after startSegment to continue your execution. nr.startSegment('pg:connect', true, function() { // This `pg:connect` segment will time until the returned promise // either resolves or rejects. return pg.connect(config.db_string) }).then(function(client) { // The transaction context is propagated into following promises. return nr.startSegment('pg:query', true, function() { return client.query('SELECT count(*) FROM test_count')) }).then(function(result) { res.write(result.rows[0].count) res.write('\\n') res.end() }, function(err) { // Error from querying. util.handleError(err, '500', res) }).finally(function() { return client.release() }) }, function(err) { // Error from connecting. util.handleError(err, '500', res) }) Copy Example: Instrument async functions This example shows how to instrument code using async/await to control asynchronous work. This requires using Node 8 or higher, as well as the New Relic for Node.js agent v2.3.0 or higher. try { const client = await nr.startSegment('pg:connect', true, async () => { // Async functions simply return promises, so this example is // very similar to the promise one. return await pg.connect(config.db_string) }) // The transaction context is propagated into the code following `await`. try { const result = await nr.startSegment('pg:query', true, async () => { return await client.query('SELECT count(*) FROM test_count')) }) res.write(result.rows[0].count) res.write('\\n') res.end() } catch(err) { // Error from querying. util.handleError(err, '500', res) } finally { await client.release() } } catch(err) { // Error from connecting. util.handleError(err, '500', res) } Copy Example: Instrument a synchronous function This example shows how startSegment can be used to record a synchronous function that is responsible for assigning its return value to a variable. var result = nr.startSegment('calculateTotal', true, function() { return calculateTotal(outerVar1, outerVar2) }) Copy Important The startSegment function is available of the Node Agent 3.3.0 release.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.31519,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js custom <em>instrumentation</em>",
        "sections": "Node.js custom <em>instrumentation</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": " analysis. <em>Agent</em> version requirements The custom <em>instrumentation</em> methods in this document are available as of <em>Node.js</em> <em>agent</em> version 2.0.0. For information on <em>instrumentation</em> using the custom <em>instrumentation</em> API v1.x, see the documentation for legacy <em>Node.js</em> custom <em>instrumentation</em>. <em>Instrument</em> unsupported web"
      },
      "id": "603ec39964441f02dc4e8882"
    },
    {
      "sections": [
        "Browser monitoring and the Node.js agent",
        "Insert the JavaScript header",
        "Framework examples",
        "Express and jade",
        "Express and Swig",
        "Hapi.js and handlebars",
        "Disable header generation",
        "Caution"
      ],
      "title": "Browser monitoring and the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Extend your instrumentation"
      ],
      "external_id": "8b8cba2d5ce2acdc55df2621d850329cf4796bbd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/extend-your-instrumentation/browser-monitoring-nodejs-agent/",
      "published_at": "2021-09-13T21:34:44Z",
      "updated_at": "2021-03-16T09:02:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Node.js agent, you can add browser instrumentation to your web pages. To use browser monitoring with your Node.js agent, ensure you have the latest release of the Node.js agent. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the Node.js agent. Insert the JavaScript header Instrumentation for the Node.js agent can continue beyond your application into end users' browsers. The newrelic module can generate script headers which, when inserted into your HTML templates, will capture the end users' page load times. The headers must be manually injected, but no extra configuration is necessary. At the beginning of your html page's head tag, insert the results of newrelic.getBrowserTimingHeader() after any CHARSET meta tags. Exception: For maximum Internet Explorer compatibility, insert the results of newrelic.getBrowserTimingHeader() after any X-UA-COMPATIBLE HTTP-EQUIV meta tags. Call the header once for every request. Do not cache the header. Generating headers is fast, and it does not require your application to make extra requests to New Relic. Framework examples Here are some examples of how to set up browser monitoring with different frameworks and templates. Express and jade This example uses Express, a web application framework, and jade, a template module. Although the specifics are different with other frameworks, this general approach should work in most cases. The simplest way to insert browser timing headings is to pass the newrelic module into your template, and then call newrelic.getBrowsertimingHeader() from within the template. In your app.js: var newrelic = require('newrelic'); var app = require('express')(); // in express, this lets you call newrelic from within a template app.locals.newrelic = newrelic; app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your layout.jade: doctype html html head != newrelic.getBrowserTimingHeader() title= title link(rel='stylesheet', href='stylesheets/style.css') body block content Copy Express and Swig This example uses Express with Swig. In your app.js: var newrelic = require('newrelic'); var http = require('http') var path = require('path') var swig = require('swig') var app = require('express')(); app.locals.newrelic = newrelic; //taken from http://paularmstrong.github.io/swig/docs/#express app.engine('html', swig.renderFile); app.set('view engine', 'html'); app.set('views', __dirname + '/views'); app.get('/user/:id', function (req, res) { res.render('user'); }); app.listen(process.env.PORT); Copy In your views/user.html: <!DOCTYPE html> <html> <head> {{ newrelic.getBrowserTimingHeader() }} <title>Hello</title> </head> <body> <h1>Hello World</h1> </body> </html> Copy Hapi.js and handlebars This example uses hapi.js and handlebars. Other similar templating languages typically require triple brackets; for example, using mustache with hogan-express. This helps prevent escaping of the script content. Using hapi, in your app.js: var newrelic = require('newrelic'); var Hapi = require('hapi'); var server = new Hapi.Server(parseInt(PORT), '0.0.0.0', { views: { engines : {html: 'handlebars' }, path : __dirname + '/templates' } }); function homepage(request, reply) { var context = { // pass in the header each request nreum : newrelic.getBrowserTimingHeader(), content : ... }; reply.view('homepage', context); }; server.route({ method : 'GET', path : '/', handler : homepage }); server.start(); Copy In your templates/homepage.html: <!DOCTYPE html> <html> <head> {{{ nreum }}} <title>Hello</title> </head> <body> {{ content }} </body> </html> Copy Disable header generation By default, calls to newrelic.getBrowserTimingHeader() should return valid headers. To disable header generation without removing your template code: In your newrelic.js file, add: browser_monitoring : { enable : false } Copy You can also set the environment variable NEW_RELIC_BROWSER_MONITOR_ENABLE=false. Caution Always leave ssl between the agent and the New Relic collector when using browser monitoring. You can safely leave the API calls in place even if you are not using browser monitoring or the newrelic module. If browser monitoring is disabled, or if there is an error so that working headers cannot be generated, the newrelic module generates an innocuous HTML comment. If you disable the newrelic module completely, no content will be generated.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.30573,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the Node.js <em>agent</em>",
        "sections": "Browser monitoring and the Node.js <em>agent</em>",
        "tags": "<em>Extend</em> <em>your</em> <em>instrumentation</em>",
        "body": "With the <em>Node.js</em> <em>agent</em>, you can add browser <em>instrumentation</em> to <em>your</em> web pages. To use browser monitoring with <em>your</em> <em>Node.js</em> <em>agent</em>, ensure you have the latest release of the <em>Node.js</em> <em>agent</em>. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>"
      },
      "id": "603e8376e7b9d2b7472a07f7"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/apm-agent-security-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-09-13T21:37:36Z",
      "updated_at": "2021-08-27T04:47:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.80241,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.45726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.18692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " such as Heroku or Microsoft Azure. <em>Node.js</em> <em>agent</em> environment variables always <em>start</em> with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via"
      },
      "id": "603e87a728ccbc4653eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent": [
    {
      "sections": [
        "Introduction to New Relic for Node.js",
        "Why it matters",
        "Installation",
        "Extend your instrumentation",
        "Troubleshoot your installation",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Node.js",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "8e664d52df4f0ccf1c91301e3b620699a0770850",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs/",
      "published_at": "2021-09-13T21:37:33Z",
      "updated_at": "2021-07-27T11:00:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pinpoint and solve issues down to the line of code with Node.js monitoring from New Relic. With features like service maps and error analytics, our Node.js agent helps you get the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution is different. New Relic for Node.js assumes it can group requests to your application into transactions instead of HTTP requests. Transactions are defined by giving one or more request paths a name. These names are used to: Visualize where your app is spending its time (in transaction breakdowns). Identify slow requests. Group metrics. Show you which portions of your application are suffering from slow database performance. Installation To install our agent, you need to sign up for New Relic first. Once you're logged in, follow the instructions or use our launcher to get data flowing in. Review the system requirements. Read the install docs. Go directly to the New Relic UI to add Node.js data. Extend your instrumentation After installing the Node.js agent, extend your instrumentation: Extend your instrumentation Comments Customization Implement Node.js custom instrumentation. Collect custom metrics via an API call. Use our Node.js agent API to control, customize, or extend the agent's functionality. Open source telemetry To create your own integrations, use our Node Telemetry SDK. To gain visibility into your GraphQL payloads, use our Apollo Server plugin. Traces Enable distributed tracing. VM measurements Collect key metric timeslice data from the Node.js virtual machine. View detailed VM statistics in the New Relic UI. End-user activity Integrate the Node.js agent with browser monitoring. Gain visibility into user activity with browser monitoring's page load timing process. Troubleshoot your installation If you encounter issues with your Node.js agent, see our troubleshooting information: Large memory usage: If you've installed the Node.js agent and your memory usage has increased, check out these possible solutions. Troubleshooting your Node.js installation: Try these steps if you don't see any data, cannot log files, or encounter other installation problems with the Node.js agent. Troubleshooting browser instrumentation: If you encounter problems with browser data, see these additional tips for Node.js. You can also view all troubleshooting docs. If you need additional assistance, get support at support.newrelic.com. Check the source code Our Node.js agent is open source software. You can browse the source code and send improvements, or create your own fork and build it. For more information, see the node-newrelic README on GitHub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.45726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Pinpoint and solve issues down to the line of code with <em>Node.js</em> monitoring from New Relic. With features like service maps and error analytics, our <em>Node.js</em> <em>agent</em> helps you <em>get</em> the full picture of your app environment. Why it matters Many Node application requests are based on raw URLs. Our solution"
      },
      "id": "6043d881196a67be9f960f7a"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.18692,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " such as Heroku or Microsoft Azure. <em>Node.js</em> <em>agent</em> environment variables always <em>start</em> with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40049,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs": [
    {
      "sections": [
        "Compatibility and requirements for the Node.js agent",
        "Node.js version support",
        "Tip",
        "Support for new Node.js releases",
        "End of support for Node.js releases reaching EOL",
        "Node.js 12 errors",
        "Supported Node.js frameworks",
        "Operating systems",
        "Datastores",
        "Instance details",
        "Messages queues",
        "Hosting services",
        "Process managers",
        "Security requirements",
        "Connect the agent to other New Relic features"
      ],
      "title": "Compatibility and requirements for the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Getting started"
      ],
      "external_id": "dd144d7ffce53c47f9dd6d872f61905157023f6f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent/",
      "published_at": "2021-09-13T21:37:36Z",
      "updated_at": "2021-08-27T04:47:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. Before you install the Node.js agent, make sure your application meets the following system requirements. If you haven't already, create a New Relic account. It's free, forever. Node.js version support Tip For best performance, use the latest active long term support (LTS) version of Node.js. Support for new Node.js releases We will support the latest even versions of Node.js releases by the beginning of the following active long term support schedule. The version support policy does not replace the general agent and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. Node.js version Active long term support (LTS) start date Initial release date of Node.js agent with support 18 October 2022 April-October 2022 16 October 2021 July 26, 2021 with Node.js agent v8.0.0 End of support for Node.js releases reaching EOL When support for a new long term support agent version is made available, support for the Node.js agent version that reaches end-of-life during the same time period will simultaneously drop. The following are proposed time ranges. The actual release date may vary. Node.js version End of life (EOL) date Initial release date of Node.js agent dropping support 12 April 2022 April-October 2022 10 April 2021 As of July 26, 2021, we have discontinued support for Node.js 10 with v8 of the Node.js agent. For more details, including how you can easily prepare for this transition, see our Explorers Hub post. Node.js 12 errors For Node.js 12, the following change affects the Node.js agent: Errors resulting in unhandled rejections are not scoped to the transaction that was active when the rejected promise was created. This is because the promise responsible for triggering the init async hook is no longer passed through on the promise wrap instance. This breaks the linkage that associates a given promise rejection with the transaction it was scheduled in. Supported Node.js frameworks Express 4.6.0 or higher Restify Connect Hapi Koa 2.0.0 or higher (external module loaded with the agent) If you are using a supported framework with default routers, the Node.js agent can read these frameworks' route names as-is. However, if you want more specific names than are provided by your framework, you may want to use one or more of the tools New Relic provides with the Node.js transaction naming API. Operating systems Linux SmartOS macOS 10.7 and higher Windows Server 2008 and higher Datastores The Node.js agent monitors the performance of Node.js application calls to these datastores: Cassandra Memcached MongoDB MySQL (via mysql and mysql2 packages) Redis Postgres (including the native and pure JavaScript packages) Instance details We collect instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your agent version. New Relic's Node.js agent version 1.31.0 or higher supports the following: Database npm module name Minimum module version Minimum agent version PostgreSQL pg 4.0.0 1.31.0 Redis redis 2.0.0 1.31.0 MongoDB mongodb 2.1.0 1.32.0 MySQL mysql 2.4.1 1.32.0 Memcached memcached 1.0.0 1.33.0 To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Messages queues Message queue instrumentation is only available with the New Relic Node.js agent v2 or higher. Currently supported message queue instrumentation: amqplib For other message queue libraries, use custom instrumentation. Hosting services Google App Engine (GAE) flexible environment AWS EC2 Microsoft Azure Heroku Process managers In general, process managers that handle starting, stopping, and restarting of Node.js (like Forever) should be compatible with the Node.js agent. If you are using PM2, the minimum supported version of PM2 is 2.0. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The Node.js agent integrates with other features to give you full-stack observability: Product Integration Browser monitoring The Node.js agent automatically injects the browser monitoring agent when you enable auto-instrumentation. After enabling browser monitoring injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Node.js agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic dashboards The Node.js agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.8024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Node.js <em>agent</em>",
        "sections": "Compatibility and requirements for the Node.js <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " not replace the general <em>agent</em> and plugin end-of-life (EOL) policy. The following are proposed time ranges. The actual release date may vary. <em>Node.js</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Node.js</em> <em>agent</em> with support 18 October 2022 April-October 2022 16 October 2021"
      },
      "id": "6043d8dae7b9d2d4415799df"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.186874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " such as Heroku or Microsoft Azure. <em>Node.js</em> <em>agent</em> environment variables always <em>start</em> with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.40044,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment": [
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables",
        "For more help"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "83ad47cdad2739c3137c7a3b060d6d78f1884463",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-09-14T05:26:50Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables. For more help Additional documentation resources include: Node.js agent configuration (changing the default values in your agent configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.3423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "603e881528ccbc2501eba7a0"
    },
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation",
        "For more help"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5a5a3dc52312ca8d70d4bb08c4b15df3209764a3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-03-11T09:41:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.184135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "6043d8dc28ccbcbd982c60a8"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34335,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior"
      },
      "id": "603e87a728ccbc4653eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.4993,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent on Microsoft Azure Web Apps",
        "What you need",
        "Installing the Node.js agent",
        "Adding app settings in Azure",
        "Optional: Adding app settings with the CLI",
        "Using environment variables",
        "For more help"
      ],
      "title": "Node.js agent on Microsoft Azure Web Apps",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "83ad47cdad2739c3137c7a3b060d6d78f1884463",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure/",
      "published_at": "2021-09-14T05:26:50Z",
      "updated_at": "2021-03-16T15:02:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a hosting service with New Relic's Node.js agent. What you need In addition to the Compatibility and requirements for the Node.js agent, this tutorial assumes you have a working installation of Node.js and the Windows Azure SDK for Node.js for your platform: Install the Azure SDK for Node.js. Ensure Git is installed. Installing the Node.js agent To add the New Relic Node.js agent to your Azure application: In your app's root, verify that there is a package.json file. If there is not, create one via the command line: touch package.json Copy Add the following to your package.json file: { \"name\": \"node\", \"version\": \"0.0.1\", \"dependencies\" : { \"newrelic\" : \"*\" }, \"engine\": { \"node\": \"10.18\" } } Copy Add require('newrelic'); to the top of the server.js file. For example: require('newrelic'); var http = require('http') var port = process.env.PORT || 1337; http.createServer(function(req, res) { res.writeHead(200, { 'Content-Type': 'text/plain' }); res.end('Hello New Relic Node.js agent!\\n'); }).listen(port); Copy Adding app settings in Azure After installation, you must configure your app in Azure Web Apps: Sign in to portal.azure.com. Select App Services > (select a Node.js app) > Configure. Add the following to the app settings: new_relic_app_name: Your Windows Azure website name new_relic_license_key: Your New Relic license key Save your settings. Restart your Node.js app. Generate some traffic to your app and wait a few minutes. After waiting, see your data by going to one.newrelic.com > APM > (select your app). Optional: Adding app settings with the CLI Optional: Here is an example of how to add the app settings by using the CLI (Node SDK): azure account download \"YOUR_SUBSCRIPTION_NAME\" azure account import \"PATH_TO_PUBLISH_SETTINGS_FILE\" azure site config add \"new_relic_app_name=REPLACE_WITH_YOUR_APP_NAME\" azure site config add \"new_relic_license_key=REPLACE_WITH_YOUR_LICENSE_KEY\" azure site restart AZURE_WEB_APP_NAME Copy Using environment variables If your agent runs in PaaS environments such as Heroku or Azure Web Apps, all of the configuration variables in newrelic.js have counterparts that can be set as environment variables. You can freely mix and match variables in the configuration file. Environment variables override your configuration file settings. For example, as a convenience to Azure users, the agent will use APP_POOL_ID as the application name (NEW_RELIC_APP_NAME) if it's set, so you can use the name you chose without setting it twice. For more information, see Configuring Node.js with environment variables. For more help Additional documentation resources include: Node.js agent configuration (changing the default values in your agent configuration file)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.3423,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "sections": "Node.js <em>agent</em> on Microsoft Azure Web Apps",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Read on to learn about special considerations for using Microsoft Azure Web Apps as a <em>hosting</em> service with New Relic&#x27;s <em>Node.js</em> <em>agent</em>. What you need In addition to the Compatibility and requirements for the <em>Node.js</em> <em>agent</em>, this tutorial assumes you have a working installation of <em>Node.js</em>"
      },
      "id": "603e881528ccbc2501eba7a0"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34331,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior"
      },
      "id": "603e87a728ccbc4653eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/hosting-services/nodejs-agent-microsoft-azure": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 196.4993,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent and Heroku",
        "Install the agent add-on",
        "Troubleshoot your installation",
        "Customize your configuration",
        "Upgrade from an existing New Relic installation",
        "For more help"
      ],
      "title": "Node.js agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "5a5a3dc52312ca8d70d4bb08c4b15df3209764a3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/nodejs-agent-heroku/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-03-11T09:41:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Node.js. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a hosting service with New Relic's Node.js agent. Install the agent add-on After deploying your Node.js app on Heroku, install the New Relic agent. Installing the add-on automatically creates a private New Relic account and configures access for Heroku servers. To install the New Relic add-on through the Heroku website's Add-on page for New Relic, you must be logged in to Heroku. From Heroku's Add-on page for New Relic, select the appropriate subscription plan. Then run this toolbelt command: heroku addons:create newrelic:$planlevel Copy From Select an app, select your New Relic app. Use this toolbelt command to give your app a descriptive name: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy If you are using environment variables instead of your newrelic.js config file settings to customize your Node.js agent configuration, use this toolbelt command: heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy Verify your New Relic app name, license key, and log setting: heroku config Copy Install the Node.js agent and save to your npm dependencies. npm install newrelic --save Copy To ensure that the newrelic package is properly included in your package.json file when you push to Heroku, install the New Relic Node.js agent package on your local system. Include New Relic on the first line of your app's main module: require ('newrelic'); Copy Run the following commands: git add . && git commit -m \"Add New Relic\" git push heroku master && heroku logs --tail Copy Restart your dyno. Generate some traffic to your app. New Relic will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Troubleshoot your installation If no data appears within a few minutes after you complete the installation procedures, follow the Node.js agent troubleshooting procedures. Customize your configuration You can customize the New Relic newrelic.js config file for your Node.js agent. You can also use New Relic's Node.js agent environment variables in the Heroku environment to override your config file values. Here is an example of using the Heroku command line to set environment variables instead of using your newrelic.js config file. $ heroku config:set NEW_RELIC_LICENSE_KEY=your license key $ heroku config:set NEW_RELIC_APP_NAME=your production app name $ heroku config:set NEW_RELIC_NO_CONFIG_FILE='true' Copy To confirm your settings from the command line, use: $ heroku config Copy Upgrade from an existing New Relic installation To upgrade your Node.js agent version if New Relic is already installed, use this toolbelt command: npm install newrelic --save Copy For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.184135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> and Heroku",
        "sections": "Node.js <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Heroku is a Platform as a Service (PaaS) solution for <em>hosting</em> web applications in various <em>agent</em> languages, including <em>Node.js</em>. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Here we describe special considerations for using Heroku as a <em>hosting</em> service with New"
      },
      "id": "6043d8dc28ccbcbd982c60a8"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34331,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the <em>Node.js</em> <em>agent</em> variables in the order they typically appear in the process_<em>host</em>: { section of your app&#x27;s newrelic.js configuration file. These options control behavior"
      },
      "id": "603e87a728ccbc4653eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/index": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34326,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.75603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    },
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.59859,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "With New Relic&#x27;s <em>Node.js</em> <em>agent</em>, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring"
      },
      "id": "6043d8da28ccbc08242c60a6"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.4828,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.93103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.82576,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.48267,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.93103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.2642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration": [
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.93103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.82576,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.2642,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/uninstall-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.48254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Update the Node.js agent",
        "Upgrade to Node.js agent version 8",
        "Node version support",
        "Tip",
        "Upgrade to Node.js agent version 7",
        "Upgrade to Node.js agent version 6",
        "Upgrade to Node.js agent version 5",
        "Feature flags as of v5",
        "Upgrade to Node.js agent version 4",
        "Upgrade https-proxy-agent from v0 to v2",
        "Upgrade to Node.js agent version 3",
        "Major changes with Node.js v3 agent",
        "Feature flags as of v3",
        "Upgrade to Node.js agent version 2",
        "Major changes with Node.js v2 agent",
        "Updated configuration options as of v2",
        "Deprecated API methods as of v2",
        "newrelic.createWebTransaction()",
        "newrelic.createBackgroundTransaction()",
        "newrelic.addCustomParameter()",
        "newrelic.addCustomParameters()",
        "New v2 agent API methods",
        "newrelic.getTransaction()",
        "newrelic.startWebTransaction()newrelic.startBackgroundTransaction()",
        "newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages()",
        "newrelic.addCustomAttribute()",
        "newrelic.addCustomAttributes()",
        "Node version support for v2",
        "npm version support as of v2",
        "Feature flags as of v2",
        "Framework minimum versions as of v2"
      ],
      "title": "Update the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "7534966716b25d9a64d3b1fe24fe9e72cfd15530",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent/",
      "published_at": "2021-09-14T09:20:16Z",
      "updated_at": "2021-08-02T07:54:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of New Relic's latest features, enhancements, and important security patches, we recommend you update your Node.js agent to the latest version. For additional information about specific agent updates, refer to the Node.js agent release notes. The release notes include a download link when applicable, plus instructions to download and install the latest version. If the newrelic module is listed in your package.json, run npm install. If you want to target just the newrelic module, run npm update newrelic. Recommendation: Test your updated version before moving it into production. If you have problems, follow the Node.js agent troubleshooting procedures. Upgrade to Node.js agent version 8 Before upgrading to Node.js version 8, review this information for major changes. Major changes with Node.js agent v8 Comments Added official parity support for Node 16. BREAKING: Dropped Node v10.x support. For further information see our support policy. BREAKING: Removed serverless_mode as a feature flag. The standard serverless_mode configuration still exists. BREAKING: The agent no-longer includes the New Relic certificate bundle automatically when using the 'certificates' configuration (commonly with proxies). If you find this breaking your current environment, you may leverage a feature-flag to temporarily restore this functionality. Example configuration: feature_flag: { certificate_bundle: true }. In this case, we recommend getting a certificate bundle for your environment such as the one from Mozilla. The New Relic bundle and feature flag will be fully removed in next major release. Defaulted config.feature_flags.certificate_bundle to false. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v4.0.1 @newrelic/koa v6.0.1 @newrelic/native-metrics v7.0.1 @newrelic/superagent v5.0.1 @newrelic/test-utilities v6.0.0 Node version support Node v12 is the earliest version supported by the New Relic Node.js v8 agent. Node 10 and 11 are not supported by v8. Customers running Node 11 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v8 agent's new features. Remain on New Relic Node.js v7 agent without the ability to use new features only available with update agent versions. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 12. Upgrade to Node.js agent version 7 Before upgrading to Node.js version 7, review this information for major changes. Major changes with Node.js agent v7 Comments BREAKING Removed deprecated httpResponseCode, response.status and httpResponseMessage http response attributes v6.4.2-v6.14.0: Starting in agent v6.4.2, these attributes were marked as deprecated but left in to give a transition period for the new attributes. v7: When http response attribute reporting is enabled, http.statusCode and http.statusText will be reported. BREAKING Removed deprecated setIgnoreTransaction API method v5 - v6: Starting in agent v5.0.0, this method was marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API method transactionHandle.ignore(). BREAKING Removed the api.custom_parameters_enabled configuration item and associated environment variable NEW_RELIC_API_CUSTOM_PARAMETERS. Applications must use the configuration api.custom_attributes_enabled or the associated environment variable NEW_RELIC_API_CUSTOM_ATTRIBUTES to enable newrelic.addCustomAttribute and newrelic.addCustomAttributes. BREAKING Removed deprecated Distributed Tracing API methods, createDistributedTracePayload() and acceptDistributedTracePayload() v6.4.0-v6.14.0: Starting in agent v6.4.0, these method were marked as deprecated but left in to give a transition period for the new methods. v7: Applications must use the API methods transactionHandle.insertDistributedTraceHeaders(headers) and transactionHandle.acceptDistributedTraceHeaders(transportType, headers) . With these methods, the Node agent will now accept W3C's traceparent and tracestate headers when calling transactionHandle.acceptDistributedTraceHeaders(headers) and include the W3C headers along with the New Relic distributed tracing header when calling transactionHandle.insertDistributedTraceHeaders(headers), unless the New Relic trace header format is disabled using distributed_tracing.exclude_newrelic_header:true. Update New Relic Dependencies to versions with updated Node version support @newrelic/aws-sdk v3.0.0 @newrelic/koa v5.0.0 @newrelic/native-metrics v6.0.0 @newrelic/superagent v4.0.0 @newrelic/test-utilities v5.0.0 Node version support Node v10 is the earliest version supported by the New Relic Node.js v7 agent. Node 8 and 9 are not supported by v7. Customers running Node 9 and earlier have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v7 agent's new features. Remain on New Relic Node.js v6 agent without the ability to use new features only available with update agent versions. Node 10 does not receive updates. Upgrade to a newer version of Node as soon as possible. Support for Node 10 has been discontinued with the New Relic Node.js agent v8. Upgrade to Node.js agent version 6 Before upgrading to Node.js agent version 6, review this information for major changes. Major changes with Node.js agent v6 Comments Upgraded official Koa framework instrumentation module to v3.0.0 v6: Added support for @koa/router up to v8.0.2. @koa/router v8.0.3 and greater are currently unsupported. v6: Added support for Node v12 and removed support for Node v6, 7, and 9. The minimum supported version is Node v8. Also see New Relic's Koa Release Notes on Github.. Removed deprecated max_samples_per_minute configuration parameter, which is replaced by max_samples_stored behavior v1 - v5: max_samples_per_minute defined the maximum number of events the agent collects per minute. If your application previously used max_samples_per_minute as an upper bound, you may need to lower the threshold to a valid maximum to avoid data being dropped on the server. We recommend less than 10k. v5: In agent v5 and lower, max_samples_stored defined the maximum number of events the agent stores if it's unable to communicate with the New Relic collector. v6: The new behavior of max_samples_stored defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. This usage of the configuration is consistent with the other APM agents. Troubleshooting tips: If you're missing event data, increase the value of max_samples_stored or revert to the default value. The value of max_samples_stored should not be over 10,000. Node version support Node 8 is the earliest version supported by the New Relic Node.js v6 agent. Node 6, 7 and 9 are not supported by v6. Customers running Node 6, 7 and 9 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v6 agent's new features. Remain on New Relic Node.js v5 agent without the ability to use new features only available with update agent versions. Node 8 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 8. Upgrade to Node.js agent version 5 Before upgrading to Node.js agent v5, review this information for major changes. Also see New Relic's Node.js v5 migration guide on GitHub. Major changes with Node.js v5 agent Comments Removed deprecated addCustomParameter methods. v2 - v4: Starting in agent v2.7.0, these methods were marked as deprecated but left in to give a transition period for the new methods. v5: Applications must use the API methods newrelic.addCustomAttribute() and newrelic.addCustomAttributes(). These are drop-in replacements for the old methods. Removed deprecated create*Transaction methods. v2 - v4: Starting in agent v2.0.2, these methods were marked as deprecated but left in to give a transition period to the new methods. v5: Applications must update to the API methods newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Troubleshooting tips: These new methods are not drop-in replacements for the old ones. Before moving to these new methods, review our custom instrumentation guide. Removed deprecated createTracer method. v3 - v4: Starting in agent v3.3.0, this method was marked as deprecated in favor of newrelic.startSegment(). v5: Applications must update to newrelic.startSegment(). Removed node-cassandra-cql instrumentation. v4: Applications using the npm package node-cassandra-cql would get datastore metrics for Cassandra. v5: Applications must migrate to the cassandra-driver package to get Cassandra datastore metrics. This module is actively maintained by the same developers. The node-cassandra-cql package was abandoned in February of 2014 in favor of the cassandra-driver package. Removed deprecated capture_params and ignored_params configurations. v2 - v4: Starting in agent v2.7.0, these configuration parameters caused a warning to be logged, and the values were automatically upgraded to the new attributes configurations. v5: A warning will still be logged but the configuration is ignored, and no automatic upgrading happens any more. Troubleshooting tips: If your application had parameters listed in the ignored_params configuration, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic Node.js v5 agent. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v5 agent's new features. Remain on New Relic Node.js v4 agent without the ability to use new features only available with update agent versions. Node 7 and 9 no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 6 and 7. Feature flags as of v5 As of New Relic for Node.js v5: custom_instrumentation: This feature is no longer configurable. custom_metrics: This feature is no longer configurable. synthetics: This feature is no longer configurable. native_metrics: This feature is now controlled by the plugins.native_metrics.enabled configuration value. Upgrade to Node.js agent version 4 Before upgrading to Node.js agent v4, review this information for major changes. Also see New Relic's Node.js v4 migration guide on GitHub. Upgrade https-proxy-agent from v0 to v2 Major changes with Node.js v4 agent include an upgrade of the https-proxy-agent from v0 to v2. This dependency has been updated due to a security issue in the https-proxy-agent that the New Relic Node.js agent used. Because https-proxy v2 is incompatible with node v0.10 and v0.12, New Relic has deprecated those agent versions. There is no required action to migrate from v3 to v4 of New Relic's Node.js agent. Node version support Node 4 is the earliest version supported by the New Relic Node.js v4 agent. Node 0.10 and 0.12 are not supported by v4. Customers running Node 0.10 or 0.12 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v4 agent's new features. Remain on the New Relic Node.js v3 agent without the ability to use new features only available with updated agent versions. Node 4, 5, and 7 also no longer receive updates, but New Relic will continue to support these versions of Node for the time being. Tip Upgrade to a newer version of Node as soon as possible. The next major version of the New Relic Node.js agent will likely remove support for Node 4 and 5. Upgrade to Node.js agent version 3 Before upgrading to Node.js agent agent v3, review this information for major changes. Also see New Relic's Node.js v3 migration guide on GitHub. Major changes with Node.js v3 agent Major changes with Node.js v3 agent Comments Removed SSL configuration v2: With the v2 agent, it was possible to configure the agent to connect to New Relic without encryption. v3: Node.js agent v3 always connects to New Relic servers using TLS encryption to protect communications. If the agent is configured to disable this, a warning is logged and the setting is ignored. Request parameters now prefixed with request.parameters. v2: The v2 agent collects request parameters, such as route parameters (/users/:userId) and query parameters (/users?userId=123), as the parameter name (userId). v3: The v3 agent prefixes all request parameters with the string request.parameters.. For example,userId appears as request.parameters.userId. Troubleshooting tips: If you have dashboards, alert policies, or other NRQL queries based on request parameters, update them with the new parameter names. Feature flags as of v3 As of New Relic Node.js agent v3, the send_request_uri_attribute feature is no longer configurable. Upgrade to Node.js agent version 2 Before upgrading to Node.js agent v2, review this information for major changes. Also see New Relic's Node.js v2 migration guide on GitHub. Major changes with Node.js v2 agent Major changes with Node.js v2 agent Comments Reversed naming and ignore rules v1: With the v1 agent, rules defined in the config properties rules.name and rules.ignore were applied in reverse order; the first rule in the list was applied last. v2: Node.js agent v2 applies rules in the order they are defined, so the first rule in the list is applied first. Troubleshooting tips: If you used naming rules in the v1 agent and notice problems, reverse the order of your rules in your configuration. De-duplicated HTTP request transactions v1: The v1 agent started a new transaction for each listener on an HTTP server's request event. In applications with multiple listeners on the request event, this resulted in extraneous transactions being created that almost always did not get named correctly. v2: The v2 agent only creates a single transaction for each request event emitted. Troubleshooting tips: If you used multiple request event listeners and added a call to newrelic.ignoreTransaction() to remove the extra transactions, remove those calls. Stopped swallowing outbound request errors v1: The v1 agent swallowed unhandled error events emitted by outbound HTTP request objects. v2: The v2 agent removes this behavior. Instead, the v2 agent does not change normal Node execution. This means the error event will always be emitted. Troubleshooting tips: If you are making outbound requests and currently do not listen for the error event, add a listener and handle the error as appropriate for your application. Updated configuration options as of v2 In newrelic.js, edit the Node.js agent configuration properties you use for compatiblity with the latest versions: Deprecated property New property capture_params attributes.enabled: false By default, request attributes are not sent to New Relic. Set attributes.enabled: true to include agent-defined or custom attributes in traces. The capture_params property has been deprecated. ignored_params attributes.exclude: [] Add any request attribute keys to the attributes.exclude list. Now, instead of having to be an exact match, wildcards (*) may be appended to each item for broader filtering. The ignored_params property has been deprecated. These Node.js agent configuration properties also have overrides for specific destinations, including: transaction_tracer transaction_events error_collector browser_monitoring For example, if the root attributes.enabled is true and you set transaction_tracer.attributes.enabled: false, this will restrict attributes from being collected in transaction traces, while still allowing them for all others. Deprecated API methods as of v2 The following methods from the Node.js agent have been deprecated, and New Relic has deleted them in v5 of the agent. Each has an easy replacement that accomplishes the same task in a more flexible and reliable way. newrelic.createWebTransaction() Replace with newrelic.startWebTransaction() and newrelic.getTransaction(). newrelic.createBackgroundTransaction() Replace with newrelic.startBackgroundTransaction() and newrelic.getTransaction(). newrelic.addCustomParameter() Replace with newrelic.addCustomAttribute(). newrelic.addCustomParameters() Replace with newrelic.addCustomAttributes(). New v2 agent API methods The following API methods are new with the New Relic Node.js v2 agent. newrelic.getTransaction() This method gets a reference to the currently running transaction. Use in conjunction with: newrelic.startWebTransaction newrelic.startBackgroundTransaction Callback-based message consumer services for troubleshooting message consumers newrelic.startWebTransaction()newrelic.startBackgroundTransaction() These new API methods replace the older create*Transaction methods. They are easier to use and seamlessly work with promises. Unlike the v1 method, the provided callback is invoked immediately. newrelic.instrument()newrelic.instrumentDatastore()newrelic.instrumentWebframework()newrelic.instrumentMessages() Use these methods to add custom instrumentation for third party modules, including those already instrumented by the New Relic Node.js agent. For more information, see New Relic's Node.js instrumentation tutorials on GitHub. newrelic.addCustomAttribute() Use this method to add a custom trace attribute. newrelic.addCustomAttributes() Use this method to add multiple custom trace attributes. Node version support for v2 The earliest version of Node supported by the New Relic Node.js v2 agent is 0.10. Node 0.8, which has not been updated since July of 2014, is not supported by v2. Customers running Node 0.8 have two options: Upgrade to a supported version of Node and take advantage of the New Relic Node.js v2 agent's new features. Remain on New Relic Node.js v1 agent without the ability to use new features only available with updated agent versions. Node 0.10 also no longer receives updates, but New Relic will continue to support this version of Node for the time being. Recommendation: Upgrade to a newer version of Node as soon as possible. npm version support as of v2 The New Relic Node.js agent now requires npm version 2.0.0 or higher. This version of npm comes packaged with Node 0.10.44 or higher. If you are using an earlier version of Node 0.10 you will need to first install npm 2.0.0 or higher, or upgrade to a newer version of Node. To install npm version 2: $ npm install --global npm@2 Copy Feature flags as of v2 As of New Relic Node.js agent v2: express_segments: This feature is no longer configurable. cat: This feature is now controlled by the cross_application_tracer.enabled configuration value. Framework minimum versions as of v2 As of New Relic Node.js agent v2: Module V2 minimum Minimum before v2 express 4.6.0 2.0.0 mysql 2.0.0 0.9.0",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.93102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the Node.js <em>agent</em>",
        "sections": "Update the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " in the ignored_params <em>configuration</em>, you will need to move them to attributes.exclude. Node version support Node 6 is the earliest version supported by the New Relic <em>Node.js</em> v5 <em>agent</em>. Node 4 and 5 are not supported by v5. Customers running Node 4 or 5 have two options: Upgrade to a supported version of Node"
      },
      "id": "6043d374e7b9d258435799e9"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.82574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    }
  ],
  "/docs/agents/nodejs-agent/installation-configuration/update-nodejs-agent": [
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.48254,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": " The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. <em>Configuration</em> methods and precedence The primary method to configure the <em>Node.js</em> <em>agent</em> is the <em>agent</em> <em>configuration</em> file (newrelic.js). You can also"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent",
        "Important",
        "Keep your Node.js agent up-to-date",
        "Troubleshooting"
      ],
      "title": "Install the Node.js agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "5877d4bc24ac6201ac15fd7dd909ce85213e6680",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-08-02T02:17:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Node.js agent is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic Node.js agent installation. Add Node.js data Install the Node.js agent Important If you're using the agent in a Docker container, install the agent in each container. To install the Node.js agent: Create a New Relic account. Don't have one? Sign up for free! No credit card required. Ensure you meet the system requirements. In particular, make sure you use a supported Node version. Use the command npm install newrelic --save for each application you want to monitor. From node_modules/newrelic, copy newrelic.js into the root directory of your app. Configure agent via the newrelic.js file or via environment variable: Customize the license_key setting with your license key. Customize the app_name setting with one or more meaningful app names. Add require('newrelic'); as the first line of your app's main module. Optional: For additional Node.js runtime-level statistics, ensure the @newrelic/native-metrics package is installed. Generate some traffic, then wait a few minutes for data to appear in the APM UI. You can further customize your agent behavior via newrelic.js or an environment variable. To keep the agent configuration separate from your app, edit the NEW_RELIC_HOME environmental variable. Keep your Node.js agent up-to-date To ensure that you have the most up-to-date version of New Relic, refer to the Node.js release notes. When applicable, the release notes include a download link with instructions on how to update the Node.js agent. Troubleshooting After you update the agent, generate some traffic and wait a few minutes. If no data appears in the New Relic UI, see the troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.82574,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em>",
        "sections": "<em>Install</em> the Node.js <em>agent</em>",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": "Our <em>Node.js</em> <em>agent</em> is publicly available on the Node Package Manager (npm) repository as well as on GitHub. You can use our launcher, or follow the instructions in this document to complete a basic <em>Node.js</em> <em>agent</em> <em>installation</em>. Add <em>Node.js</em> data Install the <em>Node.js</em> <em>agent</em> Important If you&#x27;re using"
      },
      "id": "603e962e28ccbcf759eba75b"
    },
    {
      "sections": [
        "Install the Node.js agent for Docker",
        "Instrument your container",
        "Other configuration options",
        "Caution"
      ],
      "title": "Install the Node.js agent for Docker",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "e8c8820b46d5d7ed0983a5001f83235f3bbd09b7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/install-nodejs-agent-docker/",
      "published_at": "2021-09-13T21:38:33Z",
      "updated_at": "2021-07-27T04:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can use our Node.js agent to instrument Node.js applications deployed in Docker containers. This document explains how to build, configure, and deploy your Dockerized Node.js application that has been instrumented with New Relic. Instrument your container With just a few additions your existing Dockerfile can be used with our Node.js agent. You'll configure the agent by running your new Docker image with environment variables set. Add newrelic to your package.json: \"newrelic\": \"latest\", Copy Install a specific version, or use any of the other options provided by the package.json format. Check the Node.js agent release notes for information about past agent versions. In the first line of your app's main module, add require('newrelic');. Add this line to your Dockerfile so the agent can run without a configuration file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image the way you normally do. To run your Docker app with the agent enabled, add your license key and app name to your docker run command as environment variables: docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ your_image_name:latest Copy Other configuration options Caution Do not include your license key in your Dockerfile or Docker image. For more information, see our documentation on license key security. In addition to setting your application name or license key, you can set other configuration options by starting your container with the -e option. For example, to enable distributed tracing, use: $ docker run -e NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ -e NEW_RELIC_APP_NAME=\"Your Application Name\" \\ -e NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ your_image_name:latest Copy You can also set configuration options in your Dockerfile using ENV directives: ENV NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true \\ NEW_RELIC_LOG=stdout # etc. Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 162.26419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "sections": "<em>Install</em> the Node.js <em>agent</em> for Docker",
        "tags": "<em>Installation</em> <em>and</em> <em>configuration</em>",
        "body": ". Check the <em>Node.js</em> <em>agent</em> release notes for information about past <em>agent</em> versions. In the first line of your app&#x27;s main module, add require(&#x27;newrelic&#x27;);. Add this line to your Dockerfile so the <em>agent</em> can run without a <em>configuration</em> file: ENV NEW_RELIC_NO_CONFIG_FILE=true Copy Build your Docker image"
      },
      "id": "6043d3b728ccbcd4b82c60ce"
    }
  ],
  "/docs/agents/nodejs-agent/troubleshooting/generate-trace-log-troubleshooting-nodejs": [
    {
      "sections": [
        "Install New Relic Node.js agent in GAE flexible environment",
        "Use native deploy",
        "Build a custom runtime",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure and deploy",
        "Optional: Disable health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Node.js agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Hosting services"
      ],
      "external_id": "28df1194ff848b2c26e5c966843d2bf5f0adbf9e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/hosting-services/install-new-relic-nodejs-agent-gae-flexible-environment/",
      "published_at": "2021-09-14T02:43:28Z",
      "updated_at": "2021-09-14T02:43:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Node.js agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime Use native deploy To use Google App Engine's \"native mode\" installation with your Node.js app: Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Optional: Set environment variables to configure the Node.js agent's GAE app.yaml file. Use the Google Cloud SDK's gcloud command line tool to deploy GAE apps. To deploy your Node.js app to your initialized GAE flexible environment, run the following command: gcloud --project new-relic-apm-nodejs app deploy Copy Google App Engine automatically includes your Node.js app's newrelic.js configuration file in the deployed package. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. You can deploy the app without any special configuration. For more information about deploying and configuring your Node.js app in the GAE flexible environment, see: Google App Engine's documentation for Node.js Google App Engine's tutorial to deploy a Node.js app 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Node.js agent, including your license key. Be sure to save the newrelic module to the package.json file. Follow Google App Engine procedures for Node.js to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy Optional: Set environment variables. 3. Configure and deploy The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the Dockerfile, build the container, and deploy your app, follow the GAE procedures for Node.js. Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Optional: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. If you notice performance issues, disable GAE health checks. In your app.yaml, add: health_check: enable_health_check: False Copy Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Node.js agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.41419,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install New Relic Node.js <em>agent</em> in GAE flexible environment",
        "sections": "Get New Relic <em>agent</em> <em>troubleshooting</em> logs from GAE",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " these resources to <em>troubleshoot</em> your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic <em>Node.js</em> <em>agent</em> logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console&#x27;s Log Viewer."
      },
      "id": "6043d8da28ccbc08242c60a6"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Important",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "6776895960bd4803e98f4c7260c0563c89c09f70",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-09-14T20:52:23Z",
      "updated_at": "2021-09-14T20:52:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Important The license_key setting is required. We highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array Default 404 Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.34313,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> configuration",
        "sections": "Node.js <em>agent</em> configuration",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": "You can tailor the <em>Node.js</em> <em>agent</em> to your app&#x27;s requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the <em>Node.js</em> <em>agent</em> API. Important"
      },
      "id": "603e87a728ccbc4653eba75b"
    },
    {
      "sections": [
        "Node.js agent API",
        "Request names",
        "Tip",
        "Requirements",
        "Avoid metric grouping issues",
        "Guidelines",
        "URL pattern matching",
        "Load the request naming API",
        "Request API calls",
        "newrelic.setTransactionName(name)",
        "newrelic.setControllerName(name, \\[action])",
        "Custom instrumentation API calls",
        "newrelic.instrument(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentDatastore(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentLoadedModule(moduleName, moduleInstance)",
        "Important",
        "newrelic.instrumentMessages(moduleName, onRequire \\[, onError])",
        "newrelic.instrumentWebframework(moduleName, onRequire \\[, onError])",
        "newrelic.startWebTransaction(url, handle)",
        "newrelic.startBackgroundTransaction(name, \\[group], handle)",
        "newrelic.getTransaction()",
        "newrelic.endTransaction()",
        "newrelic.startSegment(name, record, handler, callback)",
        "Custom metrics API calls",
        "newrelic.recordMetric(name, value)",
        "newrelic.incrementMetric(name, \\[amount])",
        "Custom events API calls",
        "newrelic.recordCustomEvent(eventType, attributes)",
        "Recording a custom event",
        "Transaction handle methods",
        "transactionHandle.end(\\[callback])",
        "transactionHandle.ignore()",
        "transactionHandle.insertDistributedTraceHeaders(headers)",
        "Generating distributed trace headers",
        "transactionHandle.acceptDistributedTraceHeaders(transportType, headers)",
        "Accept incoming distributed trace headers",
        "transactionHandle.createDistributedTracePayload()",
        "Caution",
        "Link a nested background transaction",
        "Place payload on an outgoing request",
        "transactionHandle.acceptDistributedTracePayload(payload)",
        "transactionHandle.isSampled()",
        "Other API calls",
        "newrelic.addCustomAttribute(name, value)",
        "Add custom attribute",
        "newrelic.addCustomAttributes(attributes)",
        "Adding custom attributes",
        "newrelic.addCustomSpanAttribute(name, value)",
        "Add custom span attribute",
        "newrelic.addCustomSpanAttributes(attributes)",
        "Add custom span attributes",
        "newrelic.getBrowserTimingHeader()",
        "newrelic.setIgnoreTransaction(ignored)",
        "newrelic.noticeError(error, \\[customParameters])",
        "newrelic.shutdown(\\[options], callback)",
        "newrelic.getLinkingMetadata()",
        "newrelic.getTraceMetadata()",
        "Rules for naming and ignoring requests",
        "rules.name",
        "Optional rules attributes [#optional-rules]",
        "Testing your naming rules [#testing-rules]",
        "Naming rule examples [#examples-rules]",
        "Match full URL",
        "Replace first match in URL",
        "Replace all matches in any URL",
        "Match group references",
        "rules.ignore",
        "Naming rule example",
        "Ignoring rule example",
        "API calls for rules",
        "newrelic.addNamingRule(pattern, name)",
        "newrelic.addIgnoringRule(pattern)"
      ],
      "title": "Node.js agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "API guides"
      ],
      "external_id": "dd0838adbfafc7e5988ed77ad3ad039cdce29ec0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/nodejs-agent/api-guides/nodejs-agent-api/",
      "published_at": "2021-09-14T10:38:22Z",
      "updated_at": "2021-09-14T10:38:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers several tools to help obtain the information needed to provide useful metrics about your Node.js application. These include: Reading the route names (if used) from the Express and Restify routers Using the API to name the current request, either with simple names or groups of controllers with actions Support rules that are stored in your agent's configuration that can mark requests to be renamed or ignored based on regular expressions matched against the request's raw URLs (also available as API calls) The number of names that New Relic tracks needs to be small enough so that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the Node.js agent configuration documentation and the Node.js agent API documentation on Github. Request names The Node.js agent captures the HTTP method along with a potentially parameterized path (such as /user/:id) or a regular expression (such as /^/user/([-0-9a-f]+)$/). These pieces of information become part of the request name. If you have support for slow transaction traces and have enabled capture_params in your config file, the transaction trace will also have the request's parameters and their values attached to it. If you are dissatisfied with the request names that the Node.js agent uses, you can use API calls to create more descriptive names. Tip If grouping your requests under the generic name, then /* is sufficient, and you do not need to customize your configuration file or API calls. Requirements New Relic uses request names to group requests for many charts and tables. The value of these visualizations will drop as the number of different request names increases. For example, do not include potentially dynamic data like GUIDs, numerical IDs, or timestamps in the request names you create. If your request is slow enough to generate a transaction trace, that trace will contain the original URL. If you enable parameter capture, the parameters will also be attached to the trace. Tip Avoid having more than 50 different transaction names. For example, if you have more than a couple hundred different request names, rethink your naming strategy. Avoid metric grouping issues The request naming API helps New Relic avoid problems with trying to handle too many metrics, which sometimes is referred to as \"metric explosion.\" New Relic has several strategies to deal with these issues; the most severe is simply to add offending applications to your deny list. The main reason for you to be careful in using these request-naming tools is to prevent that from happening to your applications. For more information, see Metric grouping issues. Guidelines Define your configuration rules from the most specific to the most general. The first rules listed in your config file or added with the Node.js transaction naming API will be applied first and should be narrowly targeted. More general \"fall-through\" rules should be added toward the end of the list, because they will be evaluated in the order they were configured or added using the Node.js transaction naming API. URL pattern matching An online retailer has a URL pattern like this: /user/customers/all/prospects /user/customers/all/current /user/customers/all/returning /user/customers/John /user/customers/Jane Copy The retailer could create rules like this: // newrelic.js exports.config={ //other configuration rules:{ name:[ { pattern: \"/user/customers/all/prospects/\", name: \"/user/customers/all/prospects\" }, { pattern: \"/user/customers/all/.*\", name: \"/user/customers/all\" }, { pattern: \"/user/customers/.*\", name: \"/user/customers/:customer\" } ] } } Copy With these rules, the retailer would create three transaction names: /user/customers/:customer /user/customers/all /user/customers/all/prospects If the retailer reversed the order, the rules would catch all transactions in :customer, which would not be as useful. Load the request naming API Make sure that loading the New Relic module is the first thing your application does, as it needs to bootstrap itself before the rest of your application loads: var newrelic = require('newrelic'); Copy This returns the request naming API. You can safely require the module from multiple modules in your application, as it only initializes itself once. Request API calls Here is a summary of the Request API calls for New Relic's Node.js agent. newrelic.setTransactionName(name) newrelic.setTransactionName(name) Copy Name the current request, following the request naming requirements. You can call this function anywhere within the context of an HTTP request handler, at any time after handling of the request has started, but before the request has finished. In general, if the request and response objects are in scope, you can set the name. Explicitly calling newrelic.setTransactionName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. newrelic.setControllerName(name, \\[action]) newrelic.setControllerName(name, \\[action]) Copy Name the current request using a controller-style pattern, optionally including the current controller action. If the action is omitted, New Relic will include the HTTP method (GET, POST, etc.) as the action. The rules for when you can call newrelic.setControllerName() are the same as they are for newrelic.setTransactionName(), including the request naming requirements. Explicitly calling newrelic.setControllerName() will override any names set by Express or Restify routes. Also, calls to newrelic.setTransactionName() and newrelic.setControllerName() will overwrite each other. The last one to run before the request ends wins. Custom instrumentation API calls Use these API calls to expand your instrumentation with custom instrumentation. newrelic.instrument(moduleName, onRequire \\[, onError]) newrelic.instrument(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a specific module. The provided onRequire callback will be fired when the given module is loaded with require. The moduleName parameter should be the string that will be passed to require; for example, 'express' or 'amqplib/callback_api'. The optional onError callback is called if the onRequire parameters throws an error. This is useful for debugging your instrumentation. Use this method to: Add instrumentation for modules not currently instrumented by New Relic. Instrument your own code. Replace the Node.js agent's built-in instrumentation with your own. For more information, see New Relic's Node.js instrumentation tutorial on Github. newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) newrelic.instrumentDatastore(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a datastore module. This method is just like newrelic.instrument(), except it provides a datastore-specialized shim. For more information, see New Relic's Node.js datastore instrumentation tutorial on Github. newrelic.instrumentLoadedModule(moduleName, moduleInstance) newrelic.instrumentLoadedModule(moduleName, moduleInstance) Copy The instrumentLoadedModule method allows you to add stock instrumentation to specific modules in situations where it's impossible to have require('newrelic'); as the first line of your app's main module. // load the agent const newrelic = require('newrelic') // module loaded before newrelic const expressModule = require('express') // instrument express _after_ the agent has been loaded newrelic.instrumentLoadedModule( 'express', // the module's name, as a string expressModule // the module instance ); Copy Important This method cannot instrument any arbitrary module. Its purpose is to add modules that were missed because the agent was not loaded as the first thing in your program. The instrumentLoadedModule method can only instrument modules the agent would normally instrument. You can see a list of these modules in the agent's lib/instrumentations module. newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) newrelic.instrumentMessages(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a message service client module. This method is just like newrelic.instrument(), except it provides a message-service-specialized shim. For more information, see New Relic's Node.js message service instrumentation tutorial on Github. newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) newrelic.instrumentWebframework(moduleName, onRequire \\[, onError]) Copy Sets an instrumentation callback for a web framework module. This method is just like newrelic.instrument(), except it provides a web-framework-specialized shim. For more information, see New Relic's Node.js web framework instrumentation tutorial on Github. newrelic.startWebTransaction(url, handle) newrelic.startWebTransaction(url, handle) Copy Instrument the specified web transaction. Using this API call, you can instrument transactions that New Relic does not automatically detect. The url defines the transaction name and needs to be static. Do not include variable data such as user ID. The handle defines the function you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startWebTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.startBackgroundTransaction(name, \\[group], handle) newrelic.startBackgroundTransaction(name, \\[group], handle) Copy Instrument the specified background transaction. Using this API call, you can expand New Relic's instrumentation to capture data from background transactions. The name defines the transaction name and needs to be static. Do not include variable data such as user ID. The group is optional, and it allows you to group similar jobs together via the transaction type in the user interface. Like name, the group needs to be static. The handle defines a function that includes the entire background job you want to instrument. New Relic will capture any metrics that would be captured by auto-instrumentation, as well as manual instrumentation via startSegment(). You must handle custom transactions manually by calling newrelic.getTransaction() at the start of your transaction, and then call transaction.end() when you are finished. New Relic begins timing the transaction when newrelic.startBackgroundTransaction() is called and ends the transaction when transaction.end() is called. You can also return a promise to indicate the end of the transaction. Please note that if this promise rejects, it does not automatically hook into New Relic’s error tracking. This needs to be done manually with noticeError(). newrelic.getTransaction() newrelic.getTransaction() Copy Returns a handle on the currently executing transaction. This handle can then be used to interact with a given transaction safely from any context. It is best used with newrelic.startWebTransaction() and newrelic.startBackgroundTransaction(). Please refer to the transaction handle section for more details. newrelic.endTransaction() newrelic.endTransaction() Copy End the current web or background custom transaction. This method requires being in the correct transaction context when called. This API call takes no arguments. newrelic.startSegment(name, record, handler, callback) newrelic.startSegment(name, record, handler, callback) Copy Instrument a particular method to improve visibility into a transaction, or optionally turn it into a metric. The name defines a name for the segment. This name will be visible in transaction traces and as a new metric in the New Relic UI. The record flag defines whether the segment should be recorded as a metric. The handler is the function you want to track as a segment. The optional callback is a function passed to the handler to fire after its work is done. The agent begins timing the segment when startSegment is called. The segment is ended when either the handler finishes executing, or callback is fired, if it is provided. Custom metrics API calls Use these API calls to record additional arbitrary metrics: newrelic.recordMetric(name, value) newrelic.recordMetric(name, value) Copy Use recordMetric to record an event-based metric, usually associated with a particular duration. The name must be a string following standard metric naming rules. The value will usually be a number, but it can also be an object. When value is a numeric value, it should represent the magnitude of a measurement associated with an event; for example, the duration for a particular method call. When value is an object, it must contain count, total, min, max, and sumOfSquares keys, all with number values. This form is useful to aggregate metrics on your own and report them periodically; for example, from a setInterval. These values will be aggregated with any previously collected values for the same metric. The names of these keys match the names of the keys used by the platform API. newrelic.incrementMetric(name, \\[amount]) newrelic.incrementMetric(name, \\[amount]) Copy Use incrementMetric to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount, defaulting to 1. Custom events API calls Use these API calls to record additional events: newrelic.recordCustomEvent(eventType, attributes) newrelic.recordCustomEvent(eventType, attributes) Copy Use recordCustomEvent to record an event-based metric, usually associated with a particular duration. The eventType must be an alphanumeric string less than 255 characters. The attributes must be an object of key and value pairs. The keys must be shorter than 255 characters, and the values must be string, number, or boolean. Recording a custom event The following example demonstrates recording a custom event with multiple attributes. const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.recordCustomEvent('MessagingEvent', attributes) Copy Transaction handle methods This section details the methods provided by the TransactionHandle class instance that can be obtained through newrelic.getTransaction(). Use these methods to interact directly with the current transaction: transactionHandle.end(\\[callback]) transactionHandle.end(\\[callback]) Copy Use transactionHandle.end to end the transaction referenced by the handle instance. The callback is invoked when the transaction has fully ended. The finished transaction passed to the callback as the first argument. transactionHandle.ignore() transactionHandle.ignore() Copy Use transactionHandle.ignore to ignore the transaction referenced by the handle instance. transactionHandle.insertDistributedTraceHeaders(headers) transactionHandle.insertDistributedTraceHeaders(headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call acceptDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.insertDistributedTraceHeaders is used to implement distributed tracing. It modifies the headers map that is passed in by adding W3C Trace Context headers and New Relic Distributed Trace headers. The New Relic headers can be disabled with distributed_tracing.exclude_newrelic_header: true in the config. This method replaces the deprecated createDistributedTracePayload method, which only creates New Relic Distributed Trace payloads. Generating distributed trace headers In the following example, by calling insertDistributedTraceHeaders with an empty object, the appropriate Distributed Trace headers and W3C Trace Context headers will be generated for the transaction. // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() // This could be a header object from an incoming request as well const headersObject = {} newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // generate the headers transaction.insertDistributedTraceHeaders(headersObject) }) Copy transactionHandle.acceptDistributedTraceHeaders(transportType, headers) transactionHandle.acceptDistributedTraceHeaders(transportType, headers) Copy Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call insertDistributedTraceHeaders, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTraceHeaders is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting a payload generated by insertDistributedTraceHeaders or generated by some other W3C Trace Context compliant tracer. This method accepts the headers of an incoming request, looks for W3C Trace Context headers, and if not found, falls back to New Relic distributed trace headers. This method replaces the deprecated (and now removed as of version 7.0.0) acceptDistributedTracePayload method, which only handles New Relic distributed trace payloads. transportType should be one of the following strings: AMQP HTTP HTTPS IronMQ JMS Kafka Other Queue Unknown headers should be an object containing all the headers in the incoming request. The keys must be lowercase. Accept incoming distributed trace headers The following example demonstrates adding distributed trace headers retrieved from a Kafka message. In this example, we assume that the incoming Kafka message has Distributed Trace headers inserted. // incoming Kafka message headers const headersObject = message.headers // Call newrelic.getTransaction to retrieve a handle on the current transaction. const transactionHandle = newrelic.getTransaction() newrelic.startBackgroundTransaction('background task', function executeTransaction() { const transaction = newrelic.getTransaction() // accept the headers transaction.acceptDistributedTraceHeaders('Kafka', headersObject) }) Copy transactionHandle.createDistributedTracePayload() transactionHandle.createDistributedTracePayload() Copy Caution This method is deprecated and was removed in version 7.0.0! Please use insertDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For instructions on how to use this call, along with its partner call acceptDistributedTracePayload, see Enable distributed tracing with agent APIs. This call is used to implement distributed tracing. It generates a payload that is read by the receiving application with acceptDistributedTracePayload. Important Note: In order to maintain proper ordering of spans in a trace, you must generate the payload in the context of the span that sends it. The DistributedTracePayload object has two available methods used for generating the payload in different formats: DistributedTracePayload#text: returns a JSON representation of the payload. Link a nested background transaction // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() var jsonPayload = payload.text() newrelic.startBackgroundTransaction('background task', function executeTransaction() { var backgroundHandle = newrelic.getTransaction() // Link the nested transaction by accepting the payload with the background transaction's handle backgroundHandle.acceptDistributedTracePayload(jsonPayload) }) Copy DistributedTracePayload#httpSafe: returns a base64 encoded JSON representation of the payload. Place payload on an outgoing request // Call newrelic.getTransaction to retrieve a handle on the current transaction. var transactionHandle = newrelic.getTransaction() var payload = transactionHandle.createDistributedTracePayload() // Place the base64 encoded value on an outbound request header. req.headers[myTracingHeader] = payload.httpSafe() Copy transactionHandle.acceptDistributedTracePayload(payload) transactionHandle.acceptDistributedTracePayload(payload) Copy Caution This method is deprecated and was removed in version 7.0.0! Please use acceptDistributedTraceHeaders. Important This API requires distributed tracing to be enabled. For context on how to use this call and its partner call createDistributedTracePayload, first read Enable distributed tracing with agent APIs. transactionHandle.acceptDistributedTracePayload is used to instrument the called service for inclusion in a distributed trace. It links the spans in a trace by accepting the payload generated by createDistributedTracePayload. transactionHandle.isSampled() transactionHandle.isSampled() Copy Returns whether this trace is being sampled. Other API calls New Relic's Node.js agent includes additional API calls. newrelic.addCustomAttribute(name, value) newrelic.addCustomAttribute(name, value) Copy Set a custom attribute value to be displayed along with the transaction trace in the New Relic UI. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in APM's transaction trace detail view and in errors for the transaction. Add custom attribute newrelic.addCustomAttribute('attribute1', 'value1') Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomAttributes(attributes) newrelic.addCustomAttributes(attributes) Copy Set multiple custom attribute values to be displayed along with the transaction trace in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of a transaction so it has a place to set the custom attributes. Custom attributes will appear in the transaction trace detail view and in errors for the transaction. Adding custom attributes const attributes = { attribute1: 'value1', attribute2: 2 } newrelic.addCustomAttributes(attributes) Copy Caution If you want to use your custom attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttribute(name, value) newrelic.addCustomSpanAttribute(name, value) Copy Set a custom span attribute value to be displayed along with a transaction trace span in the New Relic UI. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attribute newrelic.addCustomSpanAttribute('attribute1', 'value') Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.addCustomSpanAttributes(attributes) newrelic.addCustomSpanAttributes(attributes) Copy Set multiple custom span attribute values to be displayed along with the transaction trace spans in the New Relic UI. The attributes should be passed as a single object. This must be called within the context of an active segment/span so it has a place to set the custom span attributes. Custom span attributes will appear in the Attributes section of the span detail view. Add custom span attributes const attributes = { attribute1: 'value1', attribute2: 'value2' } newrelic.addCustomSpanAttributes(attributes) Copy Important This API requires distributed tracing and span events to be enabled. Caution If you want to use your custom span attributes, avoid using any of the reserved terms used by NRQL when naming them. newrelic.getBrowserTimingHeader() newrelic.getBrowserTimingHeader() Copy Returns the HTML snippet to be inserted into the header of HTML pages to enable browser monitoring. The HTML will instruct the browser to fetch a small JavaScript file and start the page timer. newrelic.setIgnoreTransaction(ignored) newrelic.setIgnoreTransaction(ignored) Copy Tell the module whether or not to ignore a given request. This allows you to explicitly filter long-polling, irrelevant routes or requests you know will be time-consuming. This also allows you to gather metrics for requests that otherwise would be ignored. To ignore the transaction, set the parameter to true will ignore the transaction. To prevent a transaction from being ignored with this function, pass the parameter false. Passing null or undefined will not change whether the transaction is ignored. Caution This method is deprecated and was removed in version 7.0.0. Please use transactionHandle.ignore() newrelic.noticeError(error, \\[customParameters]) newrelic.noticeError(error, \\[customParameters]) Copy Use this call if your app is doing its own error handling with domains or try/catch clauses, but you want all of the information about how many errors are coming out of the app to be centrally managed. Unlike other Node.js calls, this can be used outside of route handlers, but it will have additional context if called from within transaction scope. Caution Errors recorded using this method do not obey the ignore_status_codes configuration value. newrelic.shutdown(\\[options], callback) newrelic.shutdown(\\[options], callback) Copy Use this method to gracefully shut down the agent. options options.collectPendingData - type boolean - Tell the agent whether to send any pending data to the New Relic collector before shutting down. options.timeout - type number (ms) - The default time before forcing a shutdown. When collectPendingData is true, the agent will wait for a connection before shutting down. This timeout is useful for short lived processes, like AWS Lambda, in order to keep the process from staying open too long, while trying to connect. Example: newrelic.shutdown({collectPendingData: true, timeout: 3000}, (error) => { process.exit() }) Copy newrelic.getLinkingMetadata() newrelic.getLinkingMetadata() Copy Returns key/value pairs which can be used to link traces or entities. It will only contain items with meaningful values. For instance, if distributed tracing is disabled, trace.id will not be included. newrelic.getTraceMetadata() newrelic.getTraceMetadata() Copy Returns and object containing the current trace ID and span ID. Important This API requires distributed tracing to be enabled or an empty object will be returned. Rules for naming and ignoring requests If you do not want to put calls to the New Relic module directly into your application code, you can use pattern-based rules to name requests. There are two sets of rules: one for renaming requests, and one to mark requests to be ignored by New Relic's instrumentation. Here is the structure for rules in New Relic's Node.js agent. rules.name A list of rules of the format {pattern : \"pattern\", name : \"name\"} for matching incoming request URLs to pattern and naming the matching New Relic transaction's name. This acts as a regex replace, where you can set the pattern either as a string, or as a JavaScript regular expression literal, and both pattern and name are required. When passing a regex as a string, escape backslashes, as the agent does not keep them when given as a string in a pattern. Define your configuration rules from the most specific to the most general, as the patterns will be evaluated in order and are terminal in nature. For more information, see the naming guidelines. This can also be set with the environment variable NEW_RELIC_NAMING_RULES, with multiple rules passed in as a list of comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy Optional rules attributes [#optional-rules] Additional optional attributes are available: Optional rules attributes Description terminate_chain Default: true When set to true (default), no further rules will be evaluated if this rule is a match. Setting this to false is useful when multiple rules should be used together. For example, one rule could be replacing a common pattern in many different URLs, while subsequent rule(s) would be more specific. replace_all Default: false When set to true, all matches of the pattern will be replaced. Otherwise, only the first match will be replaced. Using the g flag with regular expression literal will have the same effect. For example: pattern: '[0-9]+', replace_all: true Copy This has the same effect as pattern: /[0-9]+/g. precedence By default the rules are evaluated in order, from first to last. If you prefer to have complete control over the order, you can give each rule a precedence attribute. The precedence is an integer number, and rules are evaluated in ascending order. If precedence is not explicitly defined, it will be set to 500 by default. Additional attributes are ignored. Testing your naming rules [#testing-rules] The Node.js agent comes with a command-line tool for testing naming rules. For more information, run the following command in terminal window in a directory where your app is installed: node node_modules/.bin/newrelic-naming-rules Copy Naming rule examples [#examples-rules] Here are some examples of naming rules and the results. Match full URL pattern: \"^/items/[0-9]+$\", name: \"/items/:id\" Copy will result in: /items/123 => /items/:id /orders/123 => /orders/123 (not replaced since the rule is a full match) Copy Replace first match in URL pattern: \"[0-9]+\", name: \":id\" Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id /orders/123/items/123 => /orders/:id/items/123 Copy Replace all matches in any URL pattern: \"[0-9]+\", name: \":id\", replace_all: true Copy will result in: /orders/123/items/123 => /orders/:id/items/:id Copy Match group references Using regular expression match group references: pattern: '^/(items|orders)/[0-9]+$', name: '/\\\\1/:id' Copy will result in: /orders/123 => /orders/:id /items/123 => /items/:id Copy rules.ignore This can also be set via the environment variable NEW_RELIC_IGNORING_RULES, with multiple rules passed in as a list of comma-delimited patterns. Currently there is no way to escape commas in patterns. NEW_RELIC_IGNORING_RULES='^/socket\\.io/\\*/xhr-polling,ignore_me' Copy Here are full examples of how rules are included in the configuration file: Naming rule example // newrelic.js exports.config = { // other configuration rules : { name : [ { pattern: \"/tables/name-here\", name: \"/name-hererule1\" } ] } Copy Ignoring rule example If you are using socket.io, you will have a use case for ignoring rules right out of the box. To keep socket.io long-polling from dominating your response-time metrics and affecting the Apdex metrics for your application, add a rule such as: // newrelic.js exports.config = { // other configuration rules : { ignore : [ '^\\/socket\\.io\\/.*\\/xhr-polling' ] } }; Copy API calls for rules Here are the API calls for naming and ignoring rules with New Relic's Node.js agent. newrelic.addNamingRule(pattern, name) Programmatic version of rules.name. Once naming rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. Both parameters are required. newrelic.addIgnoringRule(pattern) Programmatic version of rules.ignore. Once ignoring rules are added, they cannot be removed until the Node process is restarted. They can also be added via the Node.js agent's configuration. This parameter is required.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.755905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> API",
        "sections": "Node.js <em>agent</em> API",
        "tags": "<em>Nodejs</em> <em>agent</em>",
        "body": " that the user experience is robust. It also needs to be large enough to provide the right amount of information (without overwhelming you with data) so that you can identify problem spots in your applications more easily. For more information, see the <em>Node.js</em> <em>agent</em> configuration documentation"
      },
      "id": "6043daa7196a67e488960f4f"
    }
  ]
}