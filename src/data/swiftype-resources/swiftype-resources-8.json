{
  "/docs/apm/applications-menu/features/request-queue-server-configuration-examples": [
    {
      "sections": [
        "Configure request queue reporting",
        "HTTP header",
        "Tip",
        "C SDK",
        "Go agent",
        "Java, Node.js, Python, Ruby agents",
        ".NET agent",
        "PHP agent"
      ],
      "title": "Configure request queue reporting",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "3226477ad8d63af87fd5947589af31d0d679b89b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/configure-request-queue-reporting/",
      "published_at": "2021-12-25T08:14:39Z",
      "updated_at": "2021-03-16T08:18:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Request queuing occurs before the request reaches your application (where the agent resides). This is why you need to do some straightforward configuration of the agent and your production hosts to take advantage of this feature. HTTP header In order to report request queuing, most New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). You can configure these front-end servers to set the timestamp in the HTTP header that represents when the request first entered your production infrastructure. Tip Set this header as soon after the request enters your infrastructure as possible so that you are less likely to miss performance problems in your infrastructure that occur before the header is set. Most New Relic agents will interpret an X-Queue-Start or X-Request-Start header and use it to calculate Request Queuing. The agents treat these headers identically. Include a value in the format t=MICROSECONDS_SINCE_EPOCH where MICROSECONDS_SINCE_EPOCH is an integer value of the number of microseconds that have elapsed since the beginning of the Unix epoch (for example, January 1, 1970). Nearly any front-end HTTP server or load balancer can be configured to add this header. Additional details depend on your specific agent and server configuration. For more information, see the request queue configuration examples. C SDK The C SDK does not support request queuing. Go agent With the Go agent, set either header to record a metric for it. Java, Node.js, Python, Ruby agents The most recent versions of the Java, Node.js, Python, and Ruby agents provide more flexibility in the format of the X-Request-Start or X-Queue-Start header. These agents allow the timestamp to be submitted in seconds, milliseconds, or microseconds as an integer or floating point value. These agents also allow the leading t= in the header value to be omitted. Based on the order of magnitude, these agents automatically interpret the time unit as seconds, milliseconds, or microseconds. New Relic can do this reliably since a millisecond timestamp, interpreted as microseconds, would result in a queue time over 40 years. Python agent only: When using Apache/mod_wsgi 3.4 or higher, mod_wsgi will automatically insert an equivalent to the X-Queue-Start header into the WSGI environ dictionary for each request. This will mark the specific point in time where Apache first accepted the request. The value set by mod_wsgi will be picked up and used by the Python agent if no separate X-Request-Start or X-Queue-Start header has been manually configured into a web server's front end or in Apache itself. .NET agent The .NET agent does not require (and will ignore) any configuration of HTTP headers to calculate queue time. It works by instrumenting the IIS-queuing mechanism directly and reports queue time as the difference between when the HttpContext constructor executes and when the HttpApplication.BeginRequest event fires. Request queue time is only reported for .NET Framework applications hosted on IIS (for example: ASP.NET applications). It is not reported for ASP .NET Core applications (targeting .NET Core or Framework), nor for self-hosted OWIN applications. PHP agent The PHP agent only supports the X-Request-Start header. This identifies the timestamp in microseconds as an integer, with an optional t= in the header value. To ensure that the header is read properly, check your phpinfo() under the PHP Variables section, and verify that _SERVER[\"HTTP_X_REQUEST_START\"] exists and is in the expected format. If you are using Nginx, see Request queue server configuration examples for additional information on setting the header.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.33864,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>"
      },
      "id": "603eb8ba28ccbc4b1deba769"
    },
    {
      "sections": [
        "Request queuing and tracking front-end time",
        "Use request queuing to identify scaling problems",
        "Apdex calculations",
        "Clock skew"
      ],
      "title": "Request queuing and tracking front-end time",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "73285326db3b9d5e7d6477e83e45aeac1b541efa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/features/request-queuing-tracking-front-end-time/",
      "published_at": "2021-12-25T06:11:35Z",
      "updated_at": "2021-03-16T06:46:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request's life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue that requests enter. It may also represent other functions (such as load balancing or internal network latency). Use request queuing to identify scaling problems Tracking time spent in request queuing is useful for identifying certain types of performance and scaling problems; for example: When your front-end web server is spending time waiting for application workers to become available When extra time is spent warming up application workers after a deploy or restart You must configure your New Relic agent and server to report request queuing. Then the information will appear in the selected application's Requests time chart for web transactions (from APM's Applications list, select the app), as well as other places in the user interface. The chart's legend indicates which color represents request queueing. Apdex calculations Request queuing is the time from when the browser requests content to the time it receives the content. Since your Apdex score will reflect these calculations, you can select whether to report request queue time separately or not. For more information, see Agent configuration. Clock skew If the front-end web server (such as Nginx) and your application do not reside on the same physical server, reported request queuing may be affected by clock skew. NTP provides an excellent way to keep server clocks in sync. However, they still will drift relative to each other. Since New Relic agents rely on a timestamp set by the front-end server, it may over- or under-report request queuing if the clock on that server is not closely synchronized with the clock on the app server. This may seem like a major problem with the feature; however, clock skew is unlikely to result in sudden spikes in reported request queuing. Sudden spikes generally occur when an app is restarted or becomes overloaded with requests. Our experience is that request queue reporting can be useful to identify real performance problems, but be sure to consider clock skew when interpreting this data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.33759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": "<em>APM</em> tracks the time after a request enters your production systems and before it reaches your application. We call this portion of your request&#x27;s life cycle request queuing. Depending on the specifics of your production systems, this measurement of time may or may not include an actual queue"
      },
      "id": "603eb84a196a678358a83dcc"
    },
    {
      "sections": [
        "Analyze database and instance-level performance issues",
        "Compatibility and requirements",
        "Use datastore instance details to monitor and troubleshoot your app",
        "Slow query trace details example",
        "Transaction trace details example",
        "Service map details example",
        "Query builder example",
        "Alerting on custom metrics for instance performance example"
      ],
      "title": "Analyze database and instance-level performance issues",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "4efb3a35990363daed553979c33794903c48266e",
      "image": "https://docs.newrelic.com/static/9ced0e1b692a1b3d3ed83ab5276ddfb5/8c557/icapm-slow-sql.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/features/analyze-database-instance-level-performance-issues/",
      "published_at": "2021-12-25T06:10:35Z",
      "updated_at": "2021-03-13T05:51:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When you are part of a development, operations, or devops team, database issues need to be investigated quickly. To resolve performance problems and errors with a slow or failing app, you need to be able to analyze whether the underlying cause is related to database performance, one or more hosts or services, or both. Using APM's transaction traces, slow query traces, and service maps, you can examine the specific query, database instance (host and port), and database name for the problem. APM's instance-level metrics can help you drill down to the specific instance or instances that are involved. This helps you quickly assess the impact and resolve the issue. Compatibility and requirements New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your database driver and agent version: C SDK: See C SDK compatibility for datastore segments. Go: See Go agent instance-level compatibility for datastores. Java: See Java agent instance-level compatibility for databases. .NET: See .NET agent instance-level compatibility for datastores. Node.js: See Node.js agent instance-level compatibility for datastores. PHP: See PHP agent instance-level compatibility for databases. Python: See Python agent instance-level compatibility for databases and packages. Ruby: See Ruby agent instance-level compatibility for ORMs and gems. To request instance-level information from datastores currently not listed for your agent, get support at support.newrelic.com. Use datastore instance details to monitor and troubleshoot your app Use these examples as starting points to monitor and troubleshoot the performance of connections between your applications and associated datastore instances. The examples describe the New Relic capabilities that can help you determine whether the underlying cause behind app performance problems relates to your applications, a database instance configuration problem (such as a missing index), your organizations resources, or a combination. Slow query trace details example Your Apdex is falling, and you want to determine what is affecting your end users' experience with your app. On the APM Database page, you notice some slow queries, and you want to investigate further with your database vendor tools. To do this, you need to know the database name and the instance where the slow query occurred, since the issue may be specific to the instance. For example, the problem may be a missing index. Use APM's slow query traces to review query performance, locate the database name and instance, and identify any poorly written or inefficient queries. one.newrelic.com > APM > (select an app) > Databases > (select a database operation) > (select a slow query) > Trace details: Here is an example of a slow query trace identifying a specific database and instance. Transaction trace details example Your app has a performance issue, and you have used the APM Transactions page to identify a suspect transaction. When you select a transaction trace for the slow transaction, you notice that the database time is the key contributor to the transaction performance. From the selected transaction trace Details, you select the Database icon to review the Database query information. This shows both the query details and the specific instance where the query was executed. From here you can use your database vendor tools to further diagnose the issue. one.newrelic.com > APM > (select an app) > Monitor > Databases > (select a trace) > Trace details: To view information about a specific database and instance that may be contributing to an app's performance problem, select the Database icon. Service map details example Your environment has performance issues, and you want to troubleshoot and assess the impact of a performance problem between a calling application and a specific database instance. Use the APM Service maps page for a quick overview of your app's connections and dependencies, including databases and external services. Each datastore type has its own node on the map. From the selected service map details, you can: Review the color-coded health status of the connections between your applications or external services and datastore instances. (New Relic uses a simple baseline technique to compare the performance over the past 15 minutes with the average over the past week.) Select particular apps or instance types from their time series chart on the service map, then review their Response time or Requests per minute (throughput) for unexpected spikes in performance. (This can help you more easily identify outliers or \"noisy neighbors\" affecting resources or throughput time with other services.) Select a datastore node to filter the chart by enabling or disabling individual instances (100 instances maximum). Your selections are saved when you save the map. Identify outliers that may be causing unexpected impact on performance. Once you identify the databases or instances with problems with service maps, you can use transaction traces and slow query traces as well as your database vendor tools to further diagnose the issue. one.newrelic.com > APM > (select an app) > Monitor > Service map > (select a map) > (select a datastore node): By selecting an Instances node, you can drill down even further into performance problems. Within a selected node, you can enable or disable individual instances, and your selections are saved when you save the map. Query builder example If you are using a APM agent that supports database instance details, you can use query builder to report on metrics, such as response time and throughput. Alerting on custom metrics for instance performance example To be notified about a performance issue between your app and a database instance before it adversely impacts your customers' experience, use Alerts. You can create alert policies that automatically notify appropriate personnel via PagerDuty, webhooks, etc. when problems escalate to the Critical thresholds you define. As part of the alert policy configuration, create a condition with custom metrics for a specific instance, using this format: Datastore/instance/vendor/host/port Copy For example: Datastore/instance/MySQL/msql-agent-1/12345 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.28813,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>APM</em> <em>UI</em> <em>pages</em>",
        "body": " query trace details example Your Apdex is falling, and you want to determine what is affecting your end users&#x27; experience with your app. On the <em>APM</em> Database <em>page</em>, you notice some slow queries, and you want to investigate further with your database vendor tools. To do this, you need to know"
      },
      "id": "6044074828ccbc60ef2c6075"
    }
  ],
  "/docs/apm/distributed-tracing/trace-api/troubleshooting-missing-trace-api-data": [
    {
      "sections": [
        "How New Relic distributed tracing works",
        "Tip",
        "Trace sampling",
        "Head-based sampling (standard distributed tracing)",
        "Language agents: adaptive sampling",
        "Language agents: limits and sampling",
        "Trace rate limiting",
        "Lambda trace sampling",
        "Tail-based sampling (Infinite Tracing)",
        "Architecture",
        "Tail-based sampling algorithms",
        "No sampling",
        "Browser and mobile trace reporting",
        "Trace API",
        "How trace data is structured",
        "How trace data is stored",
        "How trace context is passed between applications",
        "Important",
        "Scenario 1: Trace touching three agent types",
        "Scenario 2: Trace with W3C New Relic and middleware",
        "Scenario 3: Trace with any W3C-compliant agent and a New Relic agent."
      ],
      "title": "How New Relic distributed tracing works",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Get started"
      ],
      "external_id": "4dbe0119017f78ad4db2a2b8a9ca2d287222753a",
      "image": "https://docs.newrelic.com/static/406c9f3af4012dab16df681c8feab256/c1b63/new-relic-distributed-tracing-trace-structure.png",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/concepts/how-new-relic-distributed-tracing-works/",
      "published_at": "2021-12-25T05:43:56Z",
      "updated_at": "2021-12-19T15:31:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some technical details about how New Relic distributed tracing works: How trace sampling works How we structure trace data How we store trace data How trace context is passed between applications Tip For instructions about setting up distributed tracing, see Overview: Enable distributed tracing. Trace sampling How your traces are sampled will depend on your setup and the New Relic tracing tool you're using. For example, you may be using a third-party telemetry service (like OpenTelemetry) to implement sampling of traces before your data gets to us. Or, if you're using Infinite Tracing, you'd probably send us all your trace data and rely on our sampling. We have a few sampling strategies available: Head-based sampling (standard distributed tracing) Tail-based sampling (Infinite Tracing) No sampling Head-based sampling (standard distributed tracing) With the exception of our Infinite Tracing feature, most of our tracing tools use a head-based sampling approach. This applies filters to individual spans before all spans in a trace arrive, which means decisions about whether to accept spans are made at the beginning (the \"head\") of the filtering process. We use this sampling strategy to capture a representative sample of activity while avoiding storage and performance issues. Here are some details about how head-based sampling is implemented in our standard distributed tracing tools: Language agents: adaptive sampling Our APM language agents use adaptive sampling to capture a representative sample of system activity. The following is an explanation of how adaptive sampling works. For the first service in a distributed trace, 10 requests are chosen to be sampled. The throughput to that service is used to adjust how frequently requests are sampled. This is explained in more detail below. The first service we monitor in a distributed trace is called the trace origin. The trace origin chooses requests at random to be traced. That decision propagates to the downstream services touched by that request. When the request has completed, all of the spans touched by that request that we've detected are made available in the UI as a complete trace (though agent limits may result in fragmented traces). APM agents have a limit on the number of transactions collected per minute (this can vary, depending on agent) and a limit on the number of spans collected per minute (1000 per agent instance). To adhere to these limits, the default number of traces at the trace origin is 10 traces per minute. An APM agent spreads out the collection of these 10 traces over a minute in order to get a representative sample over time. The exact sampling rate depends on the number of transactions in the previous minute. The rate responds to changes in transaction throughput, going up or down. For example, if the previous minute had 100 transactions, the agent would anticipate a similar number of transactions and select 1 out of every 10 transactions to be traced. Language agents: limits and sampling An APM language agent instance using head-based sampling has a limit of 1000 spans per minute. The agent attempts to keep all spans that are marked to be sampled as part of a distributed trace. In many distributed systems, the average microservice may generate 10 to 20 spans per request. In those cases, the agent span limit can accommodate all spans chosen, and that service will have full detail in a trace. However, some requests to services will generate many spans, and the agent span limit will be reached. As a result, some traces will not have full detail for that service. One solution to this would be to custom instrument an agent to report less activity and therefore report fewer spans. To read about how browser monitoring of trace data may vary from our language agents, see Browser traces. Trace rate limiting If the above sampling methods still result in too much trace data, we may limit incoming data by sampling traces after they're received. By making this decision at the trace level, it avoids fragmenting traces (accepting only part of a trace). This process works similarly to adaptive sampling. The total spans received in a minute are totaled. If too many spans are received, fewer spans may be accepted in the following minute, in order to achieve a floating-average throughput rate. For other details about limits, see New Relic data usage limits and policies. Lambda trace sampling Our AWS Lambda monitoring uses its own sampling process. Tail-based sampling (Infinite Tracing) Our Infinite Tracing feature uses a tail-based sampling approach. \"Tail-based sampling\" means that trace-retention decisions are done at the tail end of processing after all the spans in a trace have arrived. With Infinite Tracing, you can send us 100% of your trace data from your application or third-party telemetry service, and Infinite Tracing will figure out which trace data is most important. And you can configure the sampling to ensure the traces important to you are retained. Architecture For Infinite Tracing, agents or integrations send 100% of all instrumented spans to a trace observer. The trace observer is a distributed tracing service residing in a cluster of services on AWS called New Relic Edge. Tip Only your spans go to the trace observer—all other data such as metrics, custom events, and transaction traces are sent the normal route to New Relic and are subject to local sampling. You configure a unique trace observer endpoint for the AWS region you want to send data to. You can request multiple endpoints, one per AWS region. The endpoint represents a trace observer for a particular workload. For example, all spans from a single trace (request) must go to that endpoint. Here are two architectural diagrams: one showing how data flows if you use APM agents and another if you use New Relic integrations like OpenTelemetry exporters: The trace observer holds traces open while spans for that trace arrive. Once the first span in a trace arrives, a session is kept open for 10 seconds. Each time a new span for that trace arrives, the expiration time is reset to 10 seconds. Traces that haven't seen a span arrive within the last 10 seconds will automatically expire. Tail-based sampling algorithms By default, each trace observer offers traces to three samplers: one looking for duration outliers, one looking for traces with errors, and one trying to randomly sample across all trace types. Each sampler keeps a target percentage of traces that match their criteria. Here are details about each sampler: Sampler Matching criteria Target percent Duration Traces with an outlier duration, using two algorithms: Gaussian (Assumes a normal distribution and a threshold at the 99th percentile) Eccentricity (Assumes no distribution and a threshold based on cluster) 100% Error Traces having at least one span with an error 100% Random All traces 1% (This is configurable. See Infinite Tracing: Random trace filter) If the matching criteria matches the trace, each sampler looks at the trace’s shape. A trace’s shape is the unique combination of the root span’s entity name and span name. This is a simple way to separate traces using the entry point of the request. Once the shape is determined, the sampler makes a decision to keep or reject the trace based on its target sampling percent. If it’s 100%, the trace is automatically kept. If it’s anything less, the probability the sampler keeps a given trace is determined by the target percent. For example, the default target percent is 1 for random traces, so 1% of those traces are kept. If you prefer, you can change the random filter percentage. Because the trace observer uses percentages of throughput, the number of traces selected will vary with that throughput. No sampling Some of our tools don't use sampling. Sampling details for these tools: Browser and mobile trace reporting Browser monitoring distributed tracing and mobile monitoring report all spans. Our APM language agents are often used in conjunction with browser and mobile monitoring, and our language agents use sampling. This means that there will likely be many more browser and mobile spans than back-end spans, which can result in browser and mobile app spans disconnected from back-end spans. For tips on querying for traces that contain front and back-end spans, see Find browser span data. Trace API If you don't have Infinite Tracing enabled, our Trace API does no sampling (unless the default data limits are exceeded). It's expected that you set up the Trace API to send us the traces you think are important. How trace data is structured Understanding the structure of a distributed trace can help you: Understand how traces are displayed in our UI Help you query trace data A distributed trace has a tree-like structure, with \"child\" spans that refer to one \"parent\" span. This diagram shows some important span relationships in a trace: This diagram shows how spans in a distributed trace relate to each other. This diagram shows several important concepts: Trace root. The first service or process in a trace is referred to as the root service or process. Process boundaries. A process represents the execution of a logical piece of code. Examples of a process include a backend service or Lambda function. Spans within a process are categorized as one of the following: Entry span: the first span in a process. Exit span: a span is a considered an exit span if it a) is the parent of an entry span, or b) has http. or db. attributes and therefore represents an external call. In-process span: a span that represents an internal method call or function and that is not an exit or entry span. Client spans. A client span represents a call to another entity or external dependency. Currently, there are two client span types: Datastore. If a client span has any attributes prefixed with db. (like db.statement), it's categorized as a datastore span. External. If a client span has any attributes prefixed with http. (like http.url) or has a child span in another process, it's categorized as an external span. This is a general category for any external calls that are not datastore queries. Trace duration. A trace's total duration is determined by the length of time from the start of the earliest span to the completion of the last span. You can query span relationship data with the NerdGraph GraphiQL explorer at api.newrelic.com/graphiql. How trace data is stored Understanding how we store trace data can help you query your trace data. We save trace data as: Span: A span represents operations that are part of a distributed trace. The operations that a span can represent include browser-side interactions, datastore queries, calls to other services, method-level timing, and Lambda functions. One example: in an HTTP service, a span is created at the start of an HTTP request and completed when the HTTP server returns a response. Span attributes contain important information about that operation (such as duration, host data, etc.), including trace-relationship details (such as traceId, guid). For span-related data, see span attributes. Transaction: If an entity in a trace is monitored by an agent, a request to that entity generates a single Transaction event. Transactions allow trace data to be tied to other New Relic features. For transaction-related data, see transaction attributes. Contextual metadata. We store metadata that shows calculations about a trace and the relationships between its spans. To query this data, use the NerdGraph GraphiQL explorer. How trace context is passed between applications We support the W3C Trace Context standard, which makes it easier to trace transactions across networks and services. When you enable distributed tracing, New Relic agents add HTTP headers to a service's outbound requests. HTTP headers act like passports on an international trip: They identify your software traces and carry important information as they travel through various networks, processes, and security systems. The headers also contain information that helps us link the spans together later: metadata like the trace ID, span ID, the New Relic account ID, and sampling information. See the table below for more details on the header: Item Description accountId This is your New Relic account ID. However, only those on your account and New Relic Admins can associate this Id with your account information in any way. appId This is the application ID of the application generating the trace header. Much like accountId, this identifier is not going to provide any information unless you're a user on the account. guid With Distributed Tracing, each segment of work in a trace is represented by a span, and each span has a guid attribute. The guid of the last span within the process is sent with the outgoing request so that the first segment of work in the receiving service can add this guid as the parentId attribute which connects data within the trace. Parent type The source of the trace header, as in mobile, browser, Ruby app, etc. This becomes the parent.type attribute on the transaction triggered by the request this header is attached to. Priority A randomly generated priority ranking value that helps determine which data is sampled when sampling limits are reached. This is a float value set by the first New Relic agent that’s part of the request so all data in the trace will have the same priority value. Sampled A boolean value that tells the agent if traced data should be collected for the request. This is also added as an attribute on any span and transaction data collected. If you want to read more about this sampling process, this guide goes into more detail. Timestamp Unix timestamp in milliseconds when the payload was created. traceId The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. This also is added as an attribute on the span and transaction data. transactionId The unique identifier for the transaction event. Trusted acount key This is a key that helps identify any other accounts associated with your account. So if you have multiple sub-accounts that the trace crosses, we can confirm that any data included in the trace is coming from a trusted source, and tells us what users should have access to the data. Version and data key This identifies major/minor versions, so if an agent receives a trace header from a version with breaking changes from the one it is on, it can reject that header and report the rejection and reason. This header information is passed along each span of a trace, unless the progress is stopped by something like middleware or agents that don't recognize the header format (see Figure 1). Figure 1 To address the problem of header propagation, we support the W3C Trace Context specification that requires two standardized headers. Our latest W3C New Relic agents send and receive these two required headers, and by default, they also send and receive the header of the prior New Relic agent: W3C (traceparent): The primary header that identifies the entire trace (trace ID) and the calling service (span id). W3C (tracestate): A required header that carries vendor-specific information and tracks where a trace has been. New Relic (newrelic): The original, proprietary header that is still sent to maintain backward compatibility with prior New Relic agents. This combination of three headers allows traces to be propagated across services instrumented with these types of agents: W3C New Relic agents Non-W3C New Relic agents W3C Trace Context-compatible agents Important If your requests only touch W3C Trace Context-compatible agents, you can opt to turn off the New Relic header. See the agent configuration documentation for details about turning off the newrelic header. The scenarios below show various types of successful header propagation. Scenario 1: Trace touching three agent types This shows the flow of headers when a request touches three different agent types: Scenario 2: Trace with W3C New Relic and middleware This shows the combination of headers sent by a W3C New Relic agent to some middleware. Scenario 3: Trace with any W3C-compliant agent and a New Relic agent. This shows the two required W3C headers from another vendor accepted by a W3C New Relic agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.39522,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How New Relic <em>distributed</em> <em>tracing</em> works",
        "sections": "How New Relic <em>distributed</em> <em>tracing</em> works",
        "tags": "<em>Understand</em> <em>dependencies</em>",
        "body": " don&#x27;t have Infinite <em>Tracing</em> enabled, our <em>Trace</em> <em>API</em> does no sampling (unless the default data limits are exceeded). It&#x27;s expected that you set up the <em>Trace</em> <em>API</em> to send us the traces you think are important. How <em>trace</em> data is structured Understanding the structure of a <em>distributed</em> <em>trace</em> can help you"
      },
      "id": "6072a66664441f14089d856c"
    },
    {
      "sections": [
        "Overview: Set up distributed tracing",
        "New Relic integrations",
        "New Relic integrations for third-party telemetry tools",
        "Set up your own solution with our Trace API",
        "Tip"
      ],
      "title": "Overview: Set up distributed tracing",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "cd81f363a9ee07640029b514cafe1f84ac04ef99",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/overview-enable-distributed-tracing/",
      "published_at": "2021-12-25T05:43:56Z",
      "updated_at": "2021-12-04T21:47:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We offer a variety of ways to capture distributed tracing data, including: New Relic integrations (including APM, AWS Lambda, browser, and mobile monitoring) New Relic integrations for third-party telemetry tools New Relic Trace API New Relic integrations We offer a range of agents to capture trace data from your applications: Product Description Language agents See telemetry data from applications instrumented with our language-specific agents: C, Go, Java, .NET, Node.js, PHP, Python, and Ruby. Monitoring for AWS Lambda See Lambda function activity, and examine the functions in your traces. Browser See users' browser-side traces. Mobile See users' mobile traces. New Relic integrations for third-party telemetry tools If you are collecting data with these telemetry tools, you can send your data to New Relic: OpenTelemetry Kamon AWS X-Ray Set up your own solution with our Trace API Send data from your telemetry tool directly to New Relic without using an integration that exports the data. Tip Note that this may require more manual configuration than using an integration. Data format Description Trace API: New Relic format Convert your trace data to the New Relic format and send it to New Relic for viewing. Trace API: Data in Zipkin format Send your Zipkin trace data to New Relic for viewing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.82697,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Overview: Set up <em>distributed</em> <em>tracing</em>",
        "sections": "Overview: Set up <em>distributed</em> <em>tracing</em>",
        "tags": "<em>Understand</em> <em>dependencies</em>",
        "body": "We offer a variety of ways to capture <em>distributed</em> <em>tracing</em> data, including: New Relic integrations (including APM, AWS Lambda, browser, and mobile monitoring) New Relic integrations for third-party telemetry tools New Relic <em>Trace</em> <em>API</em> New Relic integrations We offer a range of agents to capture <em>trace</em>"
      },
      "id": "6072a666196a67a2bf64a758"
    },
    {
      "sections": [
        "Enable distributed tracing for our telemetry tool integrations",
        "Sampling considerations",
        "Set up integrations"
      ],
      "title": "Enable distributed tracing for our telemetry tool integrations",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Enable and configure"
      ],
      "external_id": "ca05c9c79d80af7bc4f16230459e9811a23a94b6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/enable-configure/integrations-enable-distributed-tracing/",
      "published_at": "2021-12-25T05:44:45Z",
      "updated_at": "2021-12-04T21:47:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use the telemetry tools Kamon, OpenTelemetry, or AWS X-Ray, you can get that data into New Relic with our telemetry integrations. Sampling considerations Because distributed systems can generate a lot of trace data, telemetry tools rely on data sampling (filtering). When you install a telemetry integration that reports trace data, you'll have an option to enable Infinite Tracing. Choosing Infinite Tracing has implications for how you configure sampling in your telemetry tool: Standard installation without Infinite Tracing: A standard installation assumes you want your telemetry tool to sample trace data before it's sent to us. (If your trace data exceeds our Trace API limits, we may also do additional sampling.) Install with Infinite Tracing: If you choose Infinite Tracing (read requirements), we assume your telemetry tool's sampling is set to 100%, so that all of that tool's trace data is sent to us. The trace observer selects the most important and actionable traces using tail-based sampling, and then that data is ingested via our Trace API. Set up integrations To set up your telemetry tool for sending distributed traces to New Relic, follow the instructions for your tool: OpenTelemetry Kamon AWS X-Ray",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 208.28226,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable <em>distributed</em> <em>tracing</em> for our telemetry tool integrations",
        "sections": "Enable <em>distributed</em> <em>tracing</em> for our telemetry tool integrations",
        "tags": "<em>Understand</em> <em>dependencies</em>",
        "body": " to sample <em>trace</em> data before it&#x27;s sent to us. (If your <em>trace</em> data exceeds our <em>Trace</em> <em>API</em> limits, we may also do additional sampling.) Install with Infinite <em>Tracing</em>: If you choose Infinite <em>Tracing</em> (read requirements), we assume your telemetry tool&#x27;s sampling is set to 100%, so that all of that tool"
      },
      "id": "6072a66664441f271c9d8557"
    }
  ],
  "/docs/apm/errors-inbox/errors-inbox-ui": [
    {
      "image": "https://developer.newrelic.com/static/31a54fffa55465d7c2b36f21218a43d6/0086b/filters-pane.png",
      "url": "https://developer.newrelic.com/automate-workflows/error-inbox/manage-errors/",
      "sections": [
        "Manage your triaged errors",
        "lab",
        "View triaged errors",
        "Tip",
        "Optional: Integrate Errors Inbox with Slack, Jira, and CodeStream",
        "Summary",
        "Homework"
      ],
      "published_at": "2021-12-26T01:38:07Z",
      "title": "Manage your triaged errors",
      "updated_at": "2021-12-19T01:46:41Z",
      "type": "developer",
      "external_id": "fb7cac4eab154359e99dfdfb32af2536f217b82b",
      "document_type": "page",
      "popularity": 1,
      "info": "Managed your triaged errors in Errors Inbox",
      "body": "lab This procedure is part of a lab that teaches you how to manage errors using Errors Inbox. Each procedure in the lab builds upon the last, so make sure you've triaged your errors before starting this one. You're now observing Geek's Movie Shop's errors in Errors Inbox, and you're trying to debug your application before pushing your site live. With your errors triaged, you can track their progress, look at who's working on a bug, or even create tasks in Jira to resolve them. View triaged errors Change the filter in Errors Inbox to view your triaged errors Step 1 of 3 In Errors Inbox, find the filter pane below the top navigation bar. Step 2 of 3 Click Unresolved to change the filter value. Here, you see three options in the dropdown: Resolved Unresolved Ignored Step 3 of 3 Select Resolved. Errors Inbox now shows you all your resolved error groups. If you only resolved pika.exceptions:ChannelWrongStateError, you don't see any resolved errors here because Errors Inbox unresolved that one when it saw another occurrence. Tip If you want to observe your ignored error groups instead of resolved ones, filter by Ignored. Optional: Integrate Errors Inbox with Slack, Jira, and CodeStream Being able to view resolved and ignored errors is useful, but you're trying to squash the bugs in your application before you deploy it to production. To help you manage this, connect your inbox to Slack, Jira, and CodeStream. Summary In this lab, you set up Errors Inbox to proactively observe and catch errors from across your stack. You analyzed the errors in full context and triaged them before they could affect your customers. You also managed your errors in Errors Inbox and integrated your inbox with Jira, CodeStream, and Slack to help you collaborate and resolve errors faster. Once you resolve your high priority errors, you'll be more confident in your production release. But Errors Inbox is helpful even when you're in production, because you'll be able to see, triage, and manage errors that come from your customers as well. Homework Now that you know how to track and triage errors using Errors Inbox, here are some other resources you can use to familiarize yourself even more with Errors Inbox. Read our documentation on Errors Inbox Read our blog Collaborate and fix errors quickly with Errors Inbox and workloads Read our blog Error Tracking Across Your Entire Stack with New Relic Errors Inbox",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 292.95847,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage your <em>triaged</em> <em>errors</em>",
        "sections": "Optional: <em>Integrate</em> <em>Errors</em> <em>Inbox</em> with Slack, Jira, <em>and</em> CodeStream",
        "info": "Managed your <em>triaged</em> <em>errors</em> <em>in</em> <em>Errors</em> <em>Inbox</em>",
        "body": " resolve your high priority <em>errors</em>, you&#x27;ll be more confident in your production release. But <em>Errors</em> <em>Inbox</em> is helpful even when you&#x27;re in production, because you&#x27;ll be able to see, <em>triage</em>, and manage <em>errors</em> that come from your customers as well. Homework Now that you know how to <em>track</em> and <em>triage</em> <em>errors</em>"
      },
      "id": "61be8f01196a67e048eef29c"
    },
    {
      "image": "",
      "url": "https://developer.newrelic.com/automate-workflows/error-inbox/",
      "sections": [
        "Resolve Errors Faster with Full Stack Error Tracking",
        "Important",
        "Learning Objectives",
        "Requirements",
        "Procedures",
        "1. Spin up your application",
        "2. Set up Errors Inbox",
        "3. Triage your errors",
        "4. Manage your triaged errors"
      ],
      "published_at": "2021-12-26T01:38:06Z",
      "title": "Resolve Errors Faster with Full Stack Error Tracking",
      "updated_at": "2021-12-19T01:46:41Z",
      "type": "developer",
      "external_id": "a96d1a5e8ac7b53af9924ab519c673f316780d13",
      "document_type": "page",
      "popularity": 1,
      "info": "Use New Relic to qucikly track errors in your application with the help of Errors Inbox.",
      "body": "You're one of the developers of an eCommerce website called Geek's Movie Shop, and recently, you introduced some new features. Before you push your changes to production where all your users will have access to them, you want to discover as many errors as you can in your development environment. Then you can decide which ones to fix and which ones to ignore. Errors Inbox is the perfect tool to help you do this. Important Errors Inbox is not available in the EU region. Learning Objectives In this lab, you: Spin up Geek's Movie Shop in your development environment Set up a workload for Errors Inbox Resolve and ignore errors in your inbox Assign unresolved errors Filter errors in your inbox by status Integrate Errors Inbox with Jira, CodeStream, or Slack Requirements Create a free New Relic account in the US region Install Docker Procedures 1. Spin up your application Set up your your environment to deploy Geek's Movie Shop. 5 min 2. Set up Errors Inbox Set up Errors Inbox in New Relic 5 min 3. Triage your errors Track and triage errors across your stack with Errors Inbox 5 min 4. Manage your triaged errors Managed your triaged errors in Errors Inbox 5 min",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 248.61589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Resolve <em>Errors</em> <em>Faster</em> with Full Stack <em>Error</em> <em>Tracking</em>",
        "sections": "Resolve <em>Errors</em> <em>Faster</em> with Full Stack <em>Error</em> <em>Tracking</em>",
        "info": "Use New Relic to qucikly <em>track</em> <em>errors</em> <em>in</em> your application with the help of <em>Errors</em> <em>Inbox</em>.",
        "body": " environment to deploy Geek&#x27;s Movie Shop. 5 min 2. Set up <em>Errors</em> <em>Inbox</em> Set up <em>Errors</em> <em>Inbox</em> in New Relic 5 min 3. <em>Triage</em> your <em>errors</em> <em>Track</em> and <em>triage</em> <em>errors</em> across your stack with <em>Errors</em> <em>Inbox</em> 5 min 4. Manage your triaged <em>errors</em> Managed your triaged <em>errors</em> in <em>Errors</em> <em>Inbox</em> 5 min"
      },
      "id": "61be8f0128ccbce013e53496"
    },
    {
      "image": "https://docs.newrelic.com/static/b437d8747d80db2b7cc2a4ab110a8c70/c1b63/errors-ui.png",
      "url": "https://docs.newrelic.com/docs/errors-inbox/errors-inbox/",
      "sections": [
        "Error tracking with errors inbox",
        "Important",
        "Why it matters",
        "Set up errors inbox",
        "Monitor errors",
        "Error groups",
        "Troubleshooting: similar looking events do not group together",
        "Occurrences",
        "Sort By Filter",
        "Triage errors",
        "Errors status",
        "Error details",
        "Attributes",
        "Activity",
        "Discussions",
        "Assign errors",
        "Connect an inbox to Slack",
        "Connect errors inbox to CodeStream",
        "Connect an inbox to Jira"
      ],
      "published_at": "2021-12-26T01:39:57Z",
      "title": "Error tracking with errors inbox",
      "updated_at": "2021-12-02T01:43:36Z",
      "type": "docs",
      "external_id": "3dbd9bf9bda2abf4f6af60c03dc1f2168dc18f9d",
      "document_type": "page",
      "popularity": 1,
      "body": "Errors inbox is a single place to proactively detect, triage, and take action on all the errors before they impact customers. Receive alerts whenever a critical, customer-impacting error arises via your preferred communication channel, like Slack. Resolve errors faster with errors from across your stack, including all APM, browser (RUM), mobile, and serverless (AWS Lambda) data, displayed on one screen. Errors are grouped to cut down on noise, and collaborating across teams is easy with shared visibility to the same error data. Important Errors inbox is not available in the EU region. Why it matters Errors inbox provides a unified error tracking experience to detect and triage errors: View and triage issues across applications and services that your team cares about for faster error resolutions. Proactive notifications with detailed error information in Slack. Error profiles to show similarities between error events and surface the root cause by analyzing attributes. Analyze errors in context of the full stack and resolve errors with precision. APM, browser, mobile, and AWS Lambda Functions errors are all captured in the same inbox. Ready to get started? Make sure you have a New Relic account. It's free, forever! Set up errors inbox To enable errors inbox, follow these steps. Afterwards, errors groups should start to appear in your inbox. From one.newrelic.com select Errors inbox from the top nav. If this is your first time accessing errors inbox, you will be prompted to select a workload in the top left. If you have no workloads set up, you will be prompted to create one before you can use errors inbox. Once you select your workload, your inbox should populate with error groups. one.newrelic.com > More > Errors inbox Monitor errors Once you've set up your errors inbox, you can begin proactively monitoring all errors in your stack: Error groups Error groups are sets of events that make up a unique error. Error groups are stored long term and contain metrics, activity log, discussions, and basic information about the unique error. Error groups are tied to the entity, so making a change to the state of an error group in one errors inbox will impact all other inboxes that contain that entity. How error groups work Error events get grouped into an error group when they share the same fingerprint. As events are ingested by New Relic, we run the events through a set of managed rules that output a fingerprint. Every unique fingerprint has a single error group associated with it. The New Relic managed rules normalize the error data, identifying and ignoring unique values such as UUIDs, hex values, email addresses, etc. that would cause grouping “like” errors into unique groups. NR account ID, entity ID, error class, error message, stack trace and exception are all data that can impact a fingerprint. Troubleshooting: similar looking events do not group together If you see “like” error events grouped into different error groups incorrectly, try removing the unique identifier from the error class or message and store those as attributes instead. This will allow you to more easily facet on the attribute values and reduce the number of error groups. If you have a single application reporting as multiple entities in New Relic (i.e. running in different clusters, cells, etc), you might see duplicate error groups, since our grouping logic looks at account and entity IDs as part of the fingerprinting process. You can consider rolling up the multiple entities into a single entity and including only that rolled up entity as part of your errors inbox. You can also use the feedback tool in NR1 to share error groups that could use improved grouping. We’re continually updating our rules to improve the quality of error groups. Occurrences Your errors inbox displays the total number of occurrences of each error group within the selected timeframe. The corresponding sparkline chart displays the total number of occurrences per day over the selected timeframe as you hover over it. Sort By Filter Using the dropdown in the top right, you can sort the list of grouped errors by the number of occurrences or by the error that was last seen (latest first). Triage errors Errors status Errors inbox enables you to triage error groups directly from the main screen or from the error details page. Triaging helps remove the noise from your errors inbox, and lets you focus on the high impact errors that need attention. You can set one of three statuses, and filter your inbox by status. Unresolved: This is the default status of error groups. Resolved: Setting an error as resolved will hide it from the default inbox view unless filters are updated to include resolved errors. If events matching the error group fingerprint occur after marking an error group as resolved, it will automatically reset the status to Unresolved. This can be useful for identifying regressions. Ignored: Ignored will hide the error group from the inbox view unless filters are updated to include ignored errors, or until you stop ignoring the error group. Error details Clicking on a specific error group takes you to the error details page, where you will find full context of the issue. This context can assist in triaging the error and assigning it to the correct team or individual. Occurrences The Occurrences tab includes details like: Related account Stack trace Logs in context Error attributes Number and frequency of occurrences The detailed view also allows you to view specific errors. In the top right, you can navigate between the first instance of the error, the last, and any instance in-between. Attributes The Attributes tab enables you to quickly find commonalities between the related errors for faster resolution. Click on a specific attribute to open a sidebar with specific details. Activity The Activity tab displays a log of the status changes and user assignments of an error group. Discussions The Discussions tab provides room for detailed and organized collaboration. This is key to looping in collaborators and ensuring the entire team has the same context regardless of where they sit. Discussions includes: Threaded conversations: Reply directly to top level comments to tie replies to specific posts. Comment deletion: Delete comments. The content of the post will be removed unless it is the parent of a thread, in which case the box will remain with the message “Comment deleted by user.” Markdown support: Add styling and links to your comments in Markdown. Assign errors You can assign an error group to anyone. Simply select the user from the assign dropdown menu. You may also assign an error to any email address, even if they aren’t a New Relic user. You can update the filter in errors inbox to show only errors assigned to yourself, or a teammate. Important Currently assigning an error group to a user does not send a notification. Notifications of assignment and changes to error groups will be coming soon. Connect an inbox to Slack When connected to Slack, new and resurfaced error groups will be sent to a Slack channel within seconds of them occurring. This enables your team to quickly identify any new errors or regressions, and resolve them quickly with direct links to the stack trace. This short video shows how it works (1:24 minutes): To connect an inbox to Slack: If your Slack workspace does not have the New Relic app installed, do that first. From an inbox, select the Inbox Settings icon (looks like a gear) in the top right corner. Toggle the Slack button to on if it is off. If no workspaces are available, click the plus button to enable Slack with a one click Slack authentication. Once authenticated, you will be able to select a Workspace and specific Channel to send notifications to. Click Test to ensure messages are being sent to the right channel. Connect errors inbox to CodeStream To use CodeStream's Open in IDE integration with your APM stack trace errors, use environment variables to configure your APM agent with your application's commit sha and/or your release tag associated with the running version of your software. Once set up, you can jump from an error group directly to the offending code in your IDE by clicking the Open in IDE button. Learn more here. Connect an inbox to Jira Connect errors inbox to Jira to easily create tickets for your errors, allowing for faster collaboration and resolution. Jira templates allow you to quickly create a ticket containing error details and links directly to the stack trace and APM for quick access and resolution. We store a link to the the ticket alongside the associated error group for a period of time. If the error occurs again within that period, you can easily access associated tickets. Important New Relic currently supports Atlassian-Jira Classic (company-managed) projects. To connect an inbox to Jira: Click on the Jira integration icon on the far right side of the error group you want to connect to Jira. Clicking the Jira integration icon allows you to create a ticket based on a template, or create a template if you don't already have one. If you don’t already have a connection to Jira set up in your account, click Add JIRA Workspace from the dropdown. Fill in all the fields and click Test connection before saving to ensure that your details are correct. Next, set up a template. Templates determine what information will be sent to Jira. Find more information about specific fields here. Errors inbox does not currently support two-way communication with Jira, but you can select this option in case it is supported in the future. Once you have a template, click Send test notification to preview what the ticket looks like in Jira. If the preview looks good, click Update message to save the template. Note that a test notification will create a Jira ticket in your Jira workspace. Now your team can create Jira tickets by clicking the Jira integration icon on the far right side of the error group and selecting a template. Jira settings are associated with the account that owns the error group or entity. If you are using the cross-account errors inbox, you will need to set up a Jira connection multiple times.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 236.6189,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Error</em> <em>tracking</em> with <em>errors</em> <em>inbox</em>",
        "sections": "<em>Error</em> <em>tracking</em> with <em>errors</em> <em>inbox</em>",
        "body": "<em>Errors</em> <em>inbox</em> is a single place to proactively detect, <em>triage</em>, and take action on all the <em>errors</em> before they impact customers. Receive alerts whenever a critical, customer-impacting <em>error</em> arises via your preferred communication channel, like Slack. Resolve <em>errors</em> <em>faster</em> with <em>errors</em> from across your"
      },
      "id": "6174112928ccbc230ac6a4be"
    }
  ],
  "/docs/apm/index": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-25T19:39:51Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 41.023113,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "Manage <em>APM</em> agents",
        "body": " settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all <em>APM</em> agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "NerdGraph tutorial: APM agent configuration examples",
        "Configure server-side configuration",
        "Retrieve settings"
      ],
      "title": "NerdGraph tutorial: APM agent configuration examples",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "219a704e974c1c3cb1223fc90e50dcdf09709587",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/apm-config-nerdgraph/",
      "published_at": "2021-12-25T05:15:38Z",
      "updated_at": "2021-12-24T13:23:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This doc is a place for examples of configuring APM agents using our NerdGraph API. Configure server-side configuration Note that for APM agents to use configuration values changed via NerdGraph, server side configuration must be enabled. For requirements, see server-side config requirements. Here's an example query returning the status of the server side configuration setting for a given entity. query ExampleReadQuery { actor { entity(guid:\"ZjY1ODgxfEFQTXxBUFBYSUNBVElPTnz0ODEwMTY3NzZ\") { ...on ApmApplicationEntity { apmSettings { apmConfig { useServerSideConfig } } } } } } Copy Here's an example of disabling server-side configuration. Note that settings uses an array, which may be helpful if you want to update multiple entities. mutation ExampleUpdateQuery(settings: [{ guid: \"ZjY1ODgxfEFQTXxBUFBYSUNBVElPTnz0ODEwMTY3NzZ\", apmConfig: { useServerSideConfig: false }}] ) { apmSettings { apmConfig { useServerSideConfig } } errors { description } } } Copy For how to find an entity's GUID, see Find entity data. Retrieve settings Here's an example of returning an entity's transaction tracer settings: query ExampleReadQuery { actor { entity(guid:\"ZjY1ODgxfEFQTXxBUFBYSUNBVElPTnz0ODEwMTY3NzZ\") { ... on ApmApplicationEntity { guid name apmSettings { transactionTracer { enabled explainEnabled explainThresholdType explainThresholdValue } } } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 32.32446,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>APM</em> agent configuration examples",
        "sections": "NerdGraph tutorial: <em>APM</em> agent configuration examples",
        "body": "This doc is a place for examples of configuring <em>APM</em> agents using our NerdGraph API. Configure server-side configuration Note that for <em>APM</em> agents to use configuration values changed via NerdGraph, server side configuration must be enabled. For requirements, see server-side config requirements. Here"
      },
      "id": "61c5c9b928ccbcbd9607c57d"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-12-25T14:30:48Z",
      "updated_at": "2021-12-25T14:30:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region). You can also add your own custom tags. You can use tags in the UI to filter down to relevant data. Here is an example: Here you can see an accountId tag being used to filter workloads to a specific account. Tags help you to: Organize data coming from a large number of sources and/or to a large number of New Relic accounts. Identify teams, roles, environments, or regions to know who’s responsible for what (see example use cases). Better organize and search dashboards and workloads. Query and chart APM data. Tags are useful for organizing data at a high level. If you want to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events are a better solution. Tip Tags were previously called labels in the New Relic UI. You may sometimes see labelin our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters Allowed characters: Characters must be UTF-8. When using NerdGraph to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, review the following best practices tips to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Although tag searching is not case-sensitive in the UI and API, try to be consistent with capitalization. For example, avoid using both env: staging and env: Staging. Tips on cross-team implementation: Tags help improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Then: Keep this reference manual up to date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. For APM agents, restart your service. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration, both methods require you to restart your service. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. And check out this short video on querying APM tags (3:20 minutes). Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in the tag sources information, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 31.737673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> agent tags",
        "body": " use cases). Better organize and search dashboards and workloads. Query and chart <em>APM</em> data. Tags are useful for organizing data at a high level. If you want to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events are a better"
      },
      "id": "603ebd1228ccbc6278eba754"
    }
  ],
  "/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction": [
    {
      "sections": [
        "Change your Apdex settings",
        "Important",
        "App server Apdex settings",
        "End-user (Browser) Apdex settings",
        "Key transaction Apdex settings",
        "Apdex alerting",
        "Tip"
      ],
      "title": "Change your Apdex settings",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "8dfaa2e3566cb82aff0fa6f9bd7943aae25d148d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/change-your-apdex-settings/",
      "published_at": "2021-12-25T01:50:57Z",
      "updated_at": "2021-08-26T15:59:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Apdex T is the central value for Apdex. Apdex T is the response time above which a transaction is considered \"tolerable.\" You can define Apdex T values for each application, with separate values for app server and end-user browser performance. You can also define individual Apdex T thresholds for key transactions. Important You can only change Apdex thresholds for apps that are actively reporting data. For example, if one of your apps is not reporting, you won't see its Apdex setting options. App server Apdex settings The default Apdex T threshold for an application server is 0.5 seconds. To change the default application server threshold for web transactions: Go to one.newrelic.com > (select an app) > Settings > Application > Application settings. From the Application server section, set the Apdex T value (in seconds) for this application. Select Save application settings. After you change Apdex settings, a black vertical bar appears in the main chart on the APM Summary page. End-user (Browser) Apdex settings The default Apdex T threshold for browser monitoring is 7.0 seconds. To change the default end user threshold for Apdex T: Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From the Settings page, set the end user Apdex T value (in seconds). Select Save application settings. Key transaction Apdex settings You can set custom Apdex values for your key transactions. These values are independent of the APM and browser Apdex values for the key transaction's parent application. Key transactions will contribute to the overall Apdex score based on their own Apdex T values. The default values are inherited from the parent application. Apdex alerting You can also configure alert conditions for Apdex. When the Apdex score passes the threshold you define, New Relic sends an alert to the notification mechanism (channel). Tip For Apdex scores, set Warning (yellow) conditions higher than Critical (red) conditions for Apdex scores. This will help you monitor your customers' experience before the Apdex level falls below an unsatisfactory level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.531784,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change your <em>Apdex</em> settings",
        "sections": "Change your <em>Apdex</em> settings",
        "tags": "<em>APM</em>",
        "body": " change <em>Apdex</em> settings, a black vertical bar appears in the main chart on the <em>APM</em> Summary page. End-user (Browser) <em>Apdex</em> settings The default <em>Apdex</em> T threshold for browser monitoring is 7.0 seconds. To change the default end user threshold for <em>Apdex</em> T: Go to one.newrelic.com &gt; Browser &gt; (select an app"
      },
      "id": "60440808e7b9d21339579a00"
    },
    {
      "sections": [
        "View your Apdex score",
        "Tip",
        "View Apdex score in APM",
        "View transactions with highest Apdex dissatisfaction",
        "View Apdex score in browser",
        "Visualize Apdex data in query builder"
      ],
      "title": "View your Apdex score",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "b34782101a020897a16b6201cc9552afc298f2d9",
      "image": "https://docs.newrelic.com/static/812f8a389bc5e177470348dbe79dc536/01bf6/apdex_question_mark.png",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/view-your-apdex-score/",
      "published_at": "2021-12-25T04:54:14Z",
      "updated_at": "2021-07-09T08:01:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your Apdex score measures users' satisfaction with the response time of your web applications and services. The dissatisfaction score is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score based on your Apdex settings. To help identify and troubleshoot Apdex level changes that indicate poor customer experiences with your site, use any of these resources: New Relic's user interface (explained in this document) New Relic REST API Alert notifications Tip Apdex applies only to web apps or services. The Apdex chart in the UI appears blank for non-web transactions. To get a high-level overview of all your applications and services, use the New Relic Explorer. View Apdex score in APM Apdex dissatisfaction levels of Tolerating (apdex_t) and Frustrated (apdex_f) indicate how slow site performance contributes to poor customer experiences in your app. For example: 1.0: All responses are satisfactory. Tolerating responses half satisfy a user. For example, if all responses are Tolerating, then the Apdex score will be 0.50. 0.0: None of the responses are satisfactory. To view the Apdex score for your web apps or services: Go to one.newrelic.com > (select an app) > Summary. From the APM Summary page, review the Apdex score chart. If you want to... Do this... View your Apdex T value Mouse over the Apdex icon. View summary information for any point in time on the chart Mouse over the Apdex score chart. View detailed information about any point in time on the chart Click or drag anywhere on the Apdex score chart. View the corresponding Apdex score for browsers Select the Apdex chart's End user link. Go directly to detailed Apdex information Go to one.newrelic.com > (select an app) > Transactions > See transactions table, and then sort by Apdex. View transactions with highest Apdex dissatisfaction Transactions at the top of APM's Transactions page often are good candidates for performance tuning or fixing errors. To view transactions with the highest Apdex dissatisfaction percentage: Go to one.newrelic.com > APM > (select an app) > Transactions > See transactions table. Sort Apdex to find the most dissatisfying. Specific web transaction: To view details about a specific transaction, select its row. By definition, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in this column is 100%. To focus on Apdex levels for specific transactions, you can also: Configure transaction traces to capture apdex_f, which is four times your app server's apdex_t. Create key transactions to track changes in Apdex values for specific transactions that are important to your business, such as signups, purchase confirmations, searches, site logins, etc. View Apdex score in browser Use browser monitoring to: Set Apdex levels for browser monitoring. Review Apdex levels from the perspective of real-user browser performance of your app. Track browser performance levels for selected countries you want to monitor. Visualize Apdex data in query builder Use query builder to: Create dashboards to analyze and share your Apdex data. Analyze your Apdex data with NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.67499,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View your <em>Apdex</em> score",
        "sections": "View <em>Apdex</em> score in <em>APM</em>",
        "tags": "<em>APM</em>",
        "body": " transactions. To get a high-level overview of all your applications and services, use the New Relic Explorer. View <em>Apdex</em> score in <em>APM</em> <em>Apdex</em> dissatisfaction levels of Tolerating (<em>apdex</em>_t) and Frustrated (<em>apdex</em>_f) indicate how slow site performance contributes to poor customer experiences in your app"
      },
      "id": "603ebe19e7b9d22a5f2f91d0"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-12-25T02:29:18Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 69.29505,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "sections": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "tags": "<em>APM</em>",
        "body": "The <em>APM</em> Summary page provides general information about the selected app, including web transactions and non-web transactions, <em>Apdex</em> score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/new-relic-apm/apdex/change-your-apdex-settings": [
    {
      "sections": [
        "View your Apdex score",
        "Tip",
        "View Apdex score in APM",
        "View transactions with highest Apdex dissatisfaction",
        "View Apdex score in browser",
        "Visualize Apdex data in query builder"
      ],
      "title": "View your Apdex score",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "b34782101a020897a16b6201cc9552afc298f2d9",
      "image": "https://docs.newrelic.com/static/812f8a389bc5e177470348dbe79dc536/01bf6/apdex_question_mark.png",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/view-your-apdex-score/",
      "published_at": "2021-12-25T04:54:14Z",
      "updated_at": "2021-07-09T08:01:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your Apdex score measures users' satisfaction with the response time of your web applications and services. The dissatisfaction score is the difference between a perfect Apdex score (1.0) and your app's apdex_t (\"tolerating\") score based on your Apdex settings. To help identify and troubleshoot Apdex level changes that indicate poor customer experiences with your site, use any of these resources: New Relic's user interface (explained in this document) New Relic REST API Alert notifications Tip Apdex applies only to web apps or services. The Apdex chart in the UI appears blank for non-web transactions. To get a high-level overview of all your applications and services, use the New Relic Explorer. View Apdex score in APM Apdex dissatisfaction levels of Tolerating (apdex_t) and Frustrated (apdex_f) indicate how slow site performance contributes to poor customer experiences in your app. For example: 1.0: All responses are satisfactory. Tolerating responses half satisfy a user. For example, if all responses are Tolerating, then the Apdex score will be 0.50. 0.0: None of the responses are satisfactory. To view the Apdex score for your web apps or services: Go to one.newrelic.com > (select an app) > Summary. From the APM Summary page, review the Apdex score chart. If you want to... Do this... View your Apdex T value Mouse over the Apdex icon. View summary information for any point in time on the chart Mouse over the Apdex score chart. View detailed information about any point in time on the chart Click or drag anywhere on the Apdex score chart. View the corresponding Apdex score for browsers Select the Apdex chart's End user link. Go directly to detailed Apdex information Go to one.newrelic.com > (select an app) > Transactions > See transactions table, and then sort by Apdex. View transactions with highest Apdex dissatisfaction Transactions at the top of APM's Transactions page often are good candidates for performance tuning or fixing errors. To view transactions with the highest Apdex dissatisfaction percentage: Go to one.newrelic.com > APM > (select an app) > Transactions > See transactions table. Sort Apdex to find the most dissatisfying. Specific web transaction: To view details about a specific transaction, select its row. By definition, the All transactions row always contributes 100% of the app's total dissatisfaction, even if no responses are dissatisfying (100% of zero is zero). In this situation, 100% does not mean that all of your transactions are dissatisfying. The sum of all the other values in this column is 100%. To focus on Apdex levels for specific transactions, you can also: Configure transaction traces to capture apdex_f, which is four times your app server's apdex_t. Create key transactions to track changes in Apdex values for specific transactions that are important to your business, such as signups, purchase confirmations, searches, site logins, etc. View Apdex score in browser Use browser monitoring to: Set Apdex levels for browser monitoring. Review Apdex levels from the perspective of real-user browser performance of your app. Track browser performance levels for selected countries you want to monitor. Visualize Apdex data in query builder Use query builder to: Create dashboards to analyze and share your Apdex data. Analyze your Apdex data with NRQL queries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.67499,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View your <em>Apdex</em> score",
        "sections": "View <em>Apdex</em> score in <em>APM</em>",
        "tags": "<em>APM</em>",
        "body": " transactions. To get a high-level overview of all your applications and services, use the New Relic Explorer. View <em>Apdex</em> score in <em>APM</em> <em>Apdex</em> dissatisfaction levels of Tolerating (<em>apdex</em>_t) and Frustrated (<em>apdex</em>_f) indicate how slow site performance contributes to poor customer experiences in your app"
      },
      "id": "603ebe19e7b9d22a5f2f91d0"
    },
    {
      "sections": [
        "Apdex: Measure user satisfaction",
        "Apdex measurements",
        "Important",
        "Apdex levels",
        "Apdex score",
        "Errors pages",
        "Dissatisfaction percentage"
      ],
      "title": "Apdex: Measure user satisfaction",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "3f7e1ebbbef09db3079aabff3374b10568f84268",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction/",
      "published_at": "2021-12-25T07:12:35Z",
      "updated_at": "2021-07-09T08:00:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Apdex is an industry standard to measure users' satisfaction with the response time of web applications and services. It's a simplified Service Level Agreement (SLA) solution that helps you see how satisfied users are with your app through metrics such as Apdex score and dissatisfaction percentage instead of easily skewed traditional metrics such as average response time. Apdex measurements Apdex is a measure of response time based against a set threshold. It measures the ratio of satisfactory response times to unsatisfactory response times. The response time is measured from an asset request to completed delivery back to the requestor. After you define a response time threshold T, all responses handled in T or less time satisfy the user. For example, if T is 1.2 seconds and a response completes in 0.5 seconds, then the user is satisfied. All responses greater than 1.2 seconds dissatisfy the user. Responses greater than 4.8 seconds frustrate the user. You can define multiple Apdex T values for each of these: Apdex measurements Comments APM apps APM monitors the performance of these apps. To define their Apdex settings, use the APM UI. You can find Apdex on the APM Summary page and the browser Summary page. Browser apps Browser monitors the end-user experience for these apps. To define end-user Apdex settings for these apps, use the browser UI. New Relic labels them as End user on the APM Overview page and the browser Overview page. Key transactions These are transactions important to your business that you choose to monitor. You can define Apdex settings for key transactions on the Key transactions page. Important The key transaction Apdex setting overrides the T value of that app. For details, see Key transaction Apdex. Apdex levels Apdex tracks three response counts: Satisfied: The response time is less than or equal to T. Tolerating: The response time is greater than T and less than or equal to 4T. In this example, 4 x 1.2 = 4.8 seconds is the maximum tolerable response time. Frustrated: The response time is greater than 4T or the request returns a server-side error. A high error rate can cause you to have a satisfying average response time, yet a poor Apdex score. Your configuration file's apdex_f value is four times your app server's Apdex T value. This threshold is useful, for example, with transaction traces. For more information, see the configuration file documentation for your New Relic agent. The time calculation will change based on your own app's T setting. In the following example, T = 1.2 seconds. Level Multiplier Time (T Example = 1.2) Satisfied T or less < = 1.2 seconds Tolerated > T, < = 4T Between 1.2 and 4.8 seconds Frustrated > 4T Greater than 4.8 seconds After you define your Apdex levels, use any of New Relic's resources to help identify and troubleshoot changes that indicate poor customer experiences with your app. Apdex score The Apdex score is a ratio value of the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one request, while each tolerating request counts as half a satisfied request. An Apdex score varies from 0 to 1, with 0 as the worst possible score (100% of response times were Frustrated), and 1 as the best possible score (100% of response times were Satisfied). Example Apdex score: During a 2 minute period a host handles 200 requests. The Apdex threshold T = 0.5 seconds (500ms). This value is arbitrary and is selected by the user. 170 of the requests were handled within 500ms, so they are classified as Satisfied. 20 of the requests were handled between 500ms and 2 seconds (2000 ms), so they are classified as Tolerating. The remaining 10 were not handled properly or took longer than 2 seconds, so they are classified as Frustrated. The resulting Apdex score is 0.9: (170 + (20/2))/200 = 0.9. Important The formula used for calculating the Apdex score is designed for high-throughput apps. If your app's throughput is less than 100 RPM, not enough data is collected to determine a stable score. The instability may result in Apdex alert conditions behaving unexpectedly. Errors pages Any request that returns a server-side error such as 500: Application Error is a frustrating response, regardless of its return speed. You can use Apdex to visualize the impact of these errors, and then identify and resolve these errors with New Relic's built-in error analytics and error profile tools. Dissatisfaction percentage The dissatisfaction percentage is the percentage of the total dissatisfaction experienced by the app's users that is contributed by this transaction. Example Apdex dissatisfaction calculation: Frustrations(Transaction) + Tolerations(Transaction)/2 Frustrations(App) + Tolerations(App)/2 To visualize dissatisfaction percentage, you can sort your transactions by most dissatisfying. If a transaction is always frustratingly slow but rarely visited, it will not contribute much to the app's total dissatisfaction. Conversely, if a transaction is normally fast, but has high throughput, this may contribute a large proportion of the app's dissatisfaction simply because it contributes a large proportion of your app's traffic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.67496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Apdex</em>: Measure user satisfaction",
        "sections": "<em>Apdex</em>: Measure user satisfaction",
        "tags": "<em>APM</em>",
        "body": " dissatisfy the user. Responses greater than 4.8 seconds frustrate the user. You can define multiple <em>Apdex</em> T values for each of these: <em>Apdex</em> measurements Comments <em>APM</em> apps <em>APM</em> monitors the performance of these apps. To define their <em>Apdex</em> settings, use the <em>APM</em> UI. You can find <em>Apdex</em> on the <em>APM</em> Summary page"
      },
      "id": "6044080828ccbc83192c60d8"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-12-25T02:29:18Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 69.29505,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "sections": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "tags": "<em>APM</em>",
        "body": "The <em>APM</em> Summary page provides general information about the selected app, including web transactions and non-web transactions, <em>Apdex</em> score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/new-relic-apm/apdex/view-your-apdex-score": [
    {
      "sections": [
        "Change your Apdex settings",
        "Important",
        "App server Apdex settings",
        "End-user (Browser) Apdex settings",
        "Key transaction Apdex settings",
        "Apdex alerting",
        "Tip"
      ],
      "title": "Change your Apdex settings",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "8dfaa2e3566cb82aff0fa6f9bd7943aae25d148d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/change-your-apdex-settings/",
      "published_at": "2021-12-25T01:50:57Z",
      "updated_at": "2021-08-26T15:59:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Apdex T is the central value for Apdex. Apdex T is the response time above which a transaction is considered \"tolerable.\" You can define Apdex T values for each application, with separate values for app server and end-user browser performance. You can also define individual Apdex T thresholds for key transactions. Important You can only change Apdex thresholds for apps that are actively reporting data. For example, if one of your apps is not reporting, you won't see its Apdex setting options. App server Apdex settings The default Apdex T threshold for an application server is 0.5 seconds. To change the default application server threshold for web transactions: Go to one.newrelic.com > (select an app) > Settings > Application > Application settings. From the Application server section, set the Apdex T value (in seconds) for this application. Select Save application settings. After you change Apdex settings, a black vertical bar appears in the main chart on the APM Summary page. End-user (Browser) Apdex settings The default Apdex T threshold for browser monitoring is 7.0 seconds. To change the default end user threshold for Apdex T: Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From the Settings page, set the end user Apdex T value (in seconds). Select Save application settings. Key transaction Apdex settings You can set custom Apdex values for your key transactions. These values are independent of the APM and browser Apdex values for the key transaction's parent application. Key transactions will contribute to the overall Apdex score based on their own Apdex T values. The default values are inherited from the parent application. Apdex alerting You can also configure alert conditions for Apdex. When the Apdex score passes the threshold you define, New Relic sends an alert to the notification mechanism (channel). Tip For Apdex scores, set Warning (yellow) conditions higher than Critical (red) conditions for Apdex scores. This will help you monitor your customers' experience before the Apdex level falls below an unsatisfactory level.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.53178,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Change your <em>Apdex</em> settings",
        "sections": "Change your <em>Apdex</em> settings",
        "tags": "<em>APM</em>",
        "body": " change <em>Apdex</em> settings, a black vertical bar appears in the main chart on the <em>APM</em> Summary page. End-user (Browser) <em>Apdex</em> settings The default <em>Apdex</em> T threshold for browser monitoring is 7.0 seconds. To change the default end user threshold for <em>Apdex</em> T: Go to one.newrelic.com &gt; Browser &gt; (select an app"
      },
      "id": "60440808e7b9d21339579a00"
    },
    {
      "sections": [
        "Apdex: Measure user satisfaction",
        "Apdex measurements",
        "Important",
        "Apdex levels",
        "Apdex score",
        "Errors pages",
        "Dissatisfaction percentage"
      ],
      "title": "Apdex: Measure user satisfaction",
      "type": "docs",
      "tags": [
        "APM",
        "Apdex"
      ],
      "external_id": "3f7e1ebbbef09db3079aabff3374b10568f84268",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction/",
      "published_at": "2021-12-25T07:12:35Z",
      "updated_at": "2021-07-09T08:00:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Apdex is an industry standard to measure users' satisfaction with the response time of web applications and services. It's a simplified Service Level Agreement (SLA) solution that helps you see how satisfied users are with your app through metrics such as Apdex score and dissatisfaction percentage instead of easily skewed traditional metrics such as average response time. Apdex measurements Apdex is a measure of response time based against a set threshold. It measures the ratio of satisfactory response times to unsatisfactory response times. The response time is measured from an asset request to completed delivery back to the requestor. After you define a response time threshold T, all responses handled in T or less time satisfy the user. For example, if T is 1.2 seconds and a response completes in 0.5 seconds, then the user is satisfied. All responses greater than 1.2 seconds dissatisfy the user. Responses greater than 4.8 seconds frustrate the user. You can define multiple Apdex T values for each of these: Apdex measurements Comments APM apps APM monitors the performance of these apps. To define their Apdex settings, use the APM UI. You can find Apdex on the APM Summary page and the browser Summary page. Browser apps Browser monitors the end-user experience for these apps. To define end-user Apdex settings for these apps, use the browser UI. New Relic labels them as End user on the APM Overview page and the browser Overview page. Key transactions These are transactions important to your business that you choose to monitor. You can define Apdex settings for key transactions on the Key transactions page. Important The key transaction Apdex setting overrides the T value of that app. For details, see Key transaction Apdex. Apdex levels Apdex tracks three response counts: Satisfied: The response time is less than or equal to T. Tolerating: The response time is greater than T and less than or equal to 4T. In this example, 4 x 1.2 = 4.8 seconds is the maximum tolerable response time. Frustrated: The response time is greater than 4T or the request returns a server-side error. A high error rate can cause you to have a satisfying average response time, yet a poor Apdex score. Your configuration file's apdex_f value is four times your app server's Apdex T value. This threshold is useful, for example, with transaction traces. For more information, see the configuration file documentation for your New Relic agent. The time calculation will change based on your own app's T setting. In the following example, T = 1.2 seconds. Level Multiplier Time (T Example = 1.2) Satisfied T or less < = 1.2 seconds Tolerated > T, < = 4T Between 1.2 and 4.8 seconds Frustrated > 4T Greater than 4.8 seconds After you define your Apdex levels, use any of New Relic's resources to help identify and troubleshoot changes that indicate poor customer experiences with your app. Apdex score The Apdex score is a ratio value of the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one request, while each tolerating request counts as half a satisfied request. An Apdex score varies from 0 to 1, with 0 as the worst possible score (100% of response times were Frustrated), and 1 as the best possible score (100% of response times were Satisfied). Example Apdex score: During a 2 minute period a host handles 200 requests. The Apdex threshold T = 0.5 seconds (500ms). This value is arbitrary and is selected by the user. 170 of the requests were handled within 500ms, so they are classified as Satisfied. 20 of the requests were handled between 500ms and 2 seconds (2000 ms), so they are classified as Tolerating. The remaining 10 were not handled properly or took longer than 2 seconds, so they are classified as Frustrated. The resulting Apdex score is 0.9: (170 + (20/2))/200 = 0.9. Important The formula used for calculating the Apdex score is designed for high-throughput apps. If your app's throughput is less than 100 RPM, not enough data is collected to determine a stable score. The instability may result in Apdex alert conditions behaving unexpectedly. Errors pages Any request that returns a server-side error such as 500: Application Error is a frustrating response, regardless of its return speed. You can use Apdex to visualize the impact of these errors, and then identify and resolve these errors with New Relic's built-in error analytics and error profile tools. Dissatisfaction percentage The dissatisfaction percentage is the percentage of the total dissatisfaction experienced by the app's users that is contributed by this transaction. Example Apdex dissatisfaction calculation: Frustrations(Transaction) + Tolerations(Transaction)/2 Frustrations(App) + Tolerations(App)/2 To visualize dissatisfaction percentage, you can sort your transactions by most dissatisfying. If a transaction is always frustratingly slow but rarely visited, it will not contribute much to the app's total dissatisfaction. Conversely, if a transaction is normally fast, but has high throughput, this may contribute a large proportion of the app's dissatisfaction simply because it contributes a large proportion of your app's traffic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.67496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Apdex</em>: Measure user satisfaction",
        "sections": "<em>Apdex</em>: Measure user satisfaction",
        "tags": "<em>APM</em>",
        "body": " dissatisfy the user. Responses greater than 4.8 seconds frustrate the user. You can define multiple <em>Apdex</em> T values for each of these: <em>Apdex</em> measurements Comments <em>APM</em> apps <em>APM</em> monitors the performance of these apps. To define their <em>Apdex</em> settings, use the <em>APM</em> UI. You can find <em>Apdex</em> on the <em>APM</em> Summary page"
      },
      "id": "6044080828ccbc83192c60d8"
    },
    {
      "sections": [
        "APM Summary page: View transaction, Apdex, usage data",
        "Tip",
        "View your app's summary page",
        "View app performance",
        "Overview charts",
        "Event markers",
        "Drill-down details",
        "Browser monitoring data",
        "Link app performance to resources",
        "Examine app performance within system context",
        "Examine details within infrastructure",
        "Troubleshoot host link"
      ],
      "title": "APM Summary page: View transaction, Apdex, usage data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Monitoring"
      ],
      "external_id": "c7b81bfd4c2f1ffafbce165566e933a332e35b3e",
      "image": "https://docs.newrelic.com/static/467b19b324af5b4ace79cf3cee2b57bf/16745/crop-apm-overview-servers.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/monitoring/apm-summary-page-view-transaction-apdex-usage-data/",
      "published_at": "2021-12-25T02:29:18Z",
      "updated_at": "2021-11-06T23:07:29Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The APM Summary page provides general information about the selected app, including web transactions and non-web transactions, Apdex score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all your applications and services, use the New Relic explorer. View your app's summary page To reach the Summary page, go to one.newrelic.com > Explorer > Services - APM > (select an app). Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, you can go to one.newrelic.com > APM > (select an app). For more information, see the documentation about navigating core UI components in New Relic One. View app performance Use the Summary page for a quick summary of your website's performance. Overview charts Some charts include links to APM pages where you can drill down into additional details. APM Summary chart Comments Transactions response time This stacked chart represents the response time of web transactions or non-web transactions in your app. Segments in the chart vary depending on which agent you are using. Some charts may have an independent line for response time that represents the relationship between response time and total time. Also, for your external or background services, you may see data labeled as Web external. For more information about these out-of-process services, use the Externals page. Apdex score This chart measures the performance of your app based on its Apdex T value during the selected time window. To view additional details, hover over the question icon or the chart's End user and App server lines. The End user line charts the Apdex for your browser apps, and the App server line charts the Apdex for your APM apps. Throughput This chart illustrates the requests per minute for either web transactions or non-web transactions. To change the type of transaction, select the Transaction response time chart's dropdown arrow, then select Web or Non-web. Error rate This chart shows the number of errors that have occurred in the current time window. The tooltip that appears when you hover over the Error rate chart shows the combined throughput for both web and non-web transactions. To understand how error rate is calculated, see Application error rate example. Event markers Markers on the main Summary chart indicate events and changes to the app: Black vertical bar: Apdex settings have changed. Blue vertical bar: A deployment marker has been created or another event has occurred, such as a settings change for the app. Yellow or red area: This indicates alert thresholds have been violated. To view additional information, mouse over the marker. Drill-down details Use any of New Relic's standard page functions to drill down into detailed information. Here is a summary of additional options with the APM Summary page. If you want to... Do this... Change how data appears on the main chart Select the chart title's drop-down arrow, and then select your choice of view options, including histograms or percentiles if available. View threshold levels for your app's Apdex score Mouse over the Apdex score ? icon. For non-web transactions, the Apdex chart is blank because Apdex is not applicable to this class of apps. View trends in transaction time, Apdex, and throughput Select the Compare with yesterday and last week checkbox. The checkbox is only available when viewing the Web transaction response time chart with the time picker window Ending now. The checkbox is unavailable if you are viewing histograms, percentiles, or custom dates. View app performance since the last deployment From the time picker, select Performance since the last deployment. For detailed information about all deployments, select the Deployments page. View the Transactions page Select the Transactions table's heading on the APM Summary page. Or, to view details about a specific transaction (including operations, transaction traces, and key transactions), select its name. View the Databases or External services pages Click on a related time band in the Web transactions response time chart. View the Errors page Select the Error rate chart's title on the APM Summary page. You can also view the Errors page from one.newrelic.com > (select an app) > Events > Errors. From here you can also view available error logs in context for your app. Browser monitoring data If you install the browser agent via an APM agent, you can automatically link the browser-monitored app to the APM-monitored app. Once the browser agent is set up, the APM Summary page provides summary information and direct links to detailed information on the app's corresponding browser summary page. To view chart details with browser page load time, select the main chart's Browser link. To view the Apdex score for browsers, select the Apdex chart's Browser link. Link app performance to resources The APM Summary page shows a table with averages about your app's instances on their hosts, including: Apdex Response time Throughput Error rate CPU usage Memory Tip CPU usage percentage is calculated as though the application is running on one CPU core. For more information about this calculation, see CPU usage is over 100%. Examine app performance within system context Use any of these options to examine your app's performance within the context of your system's architecture and resources, such as individual hosts: Select your choice from the table at the bottom of the APM Summary page for infrastructure. Toggle between a table view or breakout metric details. If applicable, select your choice from the drop-down at the top of the APM Summary page for servers or JVMs. Examine details within infrastructure To help you understand the full context of your app's performance within your environment, APM includes options to view performance from inside the application, as well as from outside the application with the infrastructure agent. To view detailed information from your resources' point of view, click any host link. The link takes you directly to the infrastructure Compute page. When you click, the Compute data may not immediately appear. If that happens, follow the prompt to validate your account and complete the conversion process for the infrastructure agent. If you need additional help, get support at support.newrelic.com. Troubleshoot host link To troubleshoot the host link from the APM Summary page, use these tips: Host link from APM Summary Troubleshooting tips Your infrastructure agent is not installed on the host. Follow standard procedures to install our infrastructure agent. The application is operating within a container, and your infrastructure agent is installed on the container’s host. Set the hostname for the container to be the hostname of the underlying server. Docker containers: Run your Docker container with the argument: --uts=\"host\" Copy This will cause the container to share the UTS Linux Namespace with the underlying host. However, by using this set, a privileged container could change the host's hostname. The application is running on a Windows container, and your infrastructure agent is installed on the Windows host. To get a direct link to infrastructure metric data for your application, enable process metrics in the infrastructure agent's configuration. Your infrastructure agent is installed, but it only reports the short hostname, not the long hostname. Configure your server's hostname settings so that the infrastructure agent and the APM agent return the exact same name string. If possible, do so by editing your server's fully qualified domain name (FQDN) settings. The APM and infrastructure agents both read their hostname from the operating system's FQDN settings, so setting the hostname there ensures both agents share a single hostname. For more information, see the Java agent troubleshooting example.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 69.29505,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "sections": "<em>APM</em> Summary page: View transaction, <em>Apdex</em>, usage data",
        "tags": "<em>APM</em>",
        "body": "The <em>APM</em> Summary page provides general information about the selected app, including web transactions and non-web transactions, <em>Apdex</em> score, CPU usage, throughput (requests per minute or rpm), transaction times, error rate, application activity, and hosts. Tip To get a high-level overview of all"
      },
      "id": "603ebe1928ccbc1acceba776"
    }
  ],
  "/docs/apm/new-relic-apm/getting-started/apm-agent-data-security": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-12-25T06:06:13Z",
      "updated_at": "2021-12-25T06:06:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can get started with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph is the API we recommend for querying New Relic data and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags APM agents APM agent configuration Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Service Levels Configure and manage Service Levels Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing model) Data partitions Manage data partitions Date retention Manage data retention NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.42123,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can <em>get</em> <em>started</em> with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-25T17:14:38Z",
      "updated_at": "2021-12-24T01:39:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.11508,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in <em>APM</em> depends on your New Relic agent version. New Relic&#x27;s Java agent versions 3.33.0 or higher support"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to Azure monitoring integrations",
        "Requirements",
        "Features",
        "Cost considerations"
      ],
      "title": "Introduction to Azure monitoring integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "7ce4149eca2602fa1a29c921fa8876ad96abd254",
      "image": "",
      "url": "https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/get-started/introduction-azure-monitoring-integrations/",
      "published_at": "2021-12-25T13:06:55Z",
      "updated_at": "2021-12-25T13:06:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as APM's .NET support for Azure. Requirements Check the Azure integrations documentation for requirements on individual integrations. New Relic cannot obtain monitoring data from resources that are located in Azure Government or that were created through the classic deployment model. Features After you activate your Azure integration, New Relic begins to query your Azure platform services according to a regular polling interval. You can use our integrations UI to: View performance data from Integrations dashboards that automatically scale as you make changes to your ecosystem. Manage alert conditions with alerts. Query your data. Cost considerations When evaluating the cost of the Microsoft Azure integrations with New Relic, consider Azure's Monitor Pricing. Refer to the \"Metric queries\" cost item in the Azure pricing documentation. Pricing is based on the number of API calls per month. An estimation of the API calls peformed by New Relic to the different Azure services can be seen in the UI, under Infrastructure > Azure > Azure Status Dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.90384,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as <em>APM</em>&#x27;s .NET support for Azure. Requirements Check the Azure integrations"
      },
      "id": "617d53f828ccbcd2fd7ffaf2"
    }
  ],
  "/docs/apm/new-relic-apm/getting-started/introduction-apm": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-12-25T06:06:13Z",
      "updated_at": "2021-12-25T06:06:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can get started with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph is the API we recommend for querying New Relic data and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags APM agents APM agent configuration Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Service Levels Configure and manage Service Levels Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing model) Data partitions Manage data partitions Date retention Manage data retention NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.42114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can <em>get</em> <em>started</em> with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-25T17:14:38Z",
      "updated_at": "2021-12-24T01:39:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.11502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in <em>APM</em> depends on your New Relic agent version. New Relic&#x27;s Java agent versions 3.33.0 or higher support"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to Azure monitoring integrations",
        "Requirements",
        "Features",
        "Cost considerations"
      ],
      "title": "Introduction to Azure monitoring integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "7ce4149eca2602fa1a29c921fa8876ad96abd254",
      "image": "",
      "url": "https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/get-started/introduction-azure-monitoring-integrations/",
      "published_at": "2021-12-25T13:06:55Z",
      "updated_at": "2021-12-25T13:06:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as APM's .NET support for Azure. Requirements Check the Azure integrations documentation for requirements on individual integrations. New Relic cannot obtain monitoring data from resources that are located in Azure Government or that were created through the classic deployment model. Features After you activate your Azure integration, New Relic begins to query your Azure platform services according to a regular polling interval. You can use our integrations UI to: View performance data from Integrations dashboards that automatically scale as you make changes to your ecosystem. Manage alert conditions with alerts. Query your data. Cost considerations When evaluating the cost of the Microsoft Azure integrations with New Relic, consider Azure's Monitor Pricing. Refer to the \"Metric queries\" cost item in the Azure pricing documentation. Pricing is based on the number of API calls per month. An estimation of the API calls peformed by New Relic to the different Azure services can be seen in the UI, under Infrastructure > Azure > Azure Status Dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.90376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as <em>APM</em>&#x27;s .NET support for Azure. Requirements Check the Azure integrations"
      },
      "id": "617d53f828ccbcd2fd7ffaf2"
    }
  ],
  "/docs/apm/new-relic-apm/getting-started/view-app-alert-information-apm": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-12-25T06:06:13Z",
      "updated_at": "2021-12-25T06:06:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can get started with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph is the API we recommend for querying New Relic data and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags APM agents APM agent configuration Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Service Levels Configure and manage Service Levels Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing model) Data partitions Manage data partitions Date retention Manage data retention NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.42114,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. After you sign up for a free New Relic account and install any of our monitoring services, you can <em>get</em> <em>started</em> with NerdGraph. What is NerdGraph? New Relic has several APIs. NerdGraph"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-25T17:14:38Z",
      "updated_at": "2021-12-24T01:39:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.11502,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in <em>APM</em> depends on your New Relic agent version. New Relic&#x27;s Java agent versions 3.33.0 or higher support"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    },
    {
      "sections": [
        "Introduction to Azure monitoring integrations",
        "Requirements",
        "Features",
        "Cost considerations"
      ],
      "title": "Introduction to Azure monitoring integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "7ce4149eca2602fa1a29c921fa8876ad96abd254",
      "image": "",
      "url": "https://docs.newrelic.com/docs/infrastructure/microsoft-azure-integrations/get-started/introduction-azure-monitoring-integrations/",
      "published_at": "2021-12-25T13:06:55Z",
      "updated_at": "2021-12-25T13:06:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as APM's .NET support for Azure. Requirements Check the Azure integrations documentation for requirements on individual integrations. New Relic cannot obtain monitoring data from resources that are located in Azure Government or that were created through the classic deployment model. Features After you activate your Azure integration, New Relic begins to query your Azure platform services according to a regular polling interval. You can use our integrations UI to: View performance data from Integrations dashboards that automatically scale as you make changes to your ecosystem. Manage alert conditions with alerts. Query your data. Cost considerations When evaluating the cost of the Microsoft Azure integrations with New Relic, consider Azure's Monitor Pricing. Refer to the \"Metric queries\" cost item in the Azure pricing documentation. Pricing is based on the number of API calls per month. An estimation of the API calls peformed by New Relic to the different Azure services can be seen in the UI, under Infrastructure > Azure > Azure Status Dashboard.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.90376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Our Microsoft Azure integrations allow you to monitor and report data about your Azure services to New Relic, providing a comprehensive view of your entire architecture in one place. The Azure integrations are not the same as <em>APM</em>&#x27;s .NET support for Azure. Requirements Check the Azure integrations"
      },
      "id": "617d53f828ccbcd2fd7ffaf2"
    }
  ],
  "/docs/apm/new-relic-apm/maintenance/disable-apm-agent": [
    {
      "sections": [
        "Record and monitor deployments",
        "Options for tracking deployments",
        "Tip",
        "Record deployments with the REST API",
        "Record a deployment with POST",
        "Record a deployment with PowerShell",
        "View a list of deployments with GET",
        "Sample output from GET",
        "Delete a deployment with DELETE",
        "Character limits and JSON parameters",
        "Important",
        "Record deployments using the New Relic agent",
        "Notify your team of deployments",
        "End of life notification: Hipchat, Campfire"
      ],
      "title": "Record and monitor deployments",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "00b24338386fd261daea0733fe03c01639cce083",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/record-monitor-deployments/",
      "published_at": "2021-12-25T01:50:57Z",
      "updated_at": "2021-11-25T13:38:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Deploying an app can be a risky event—when your app breaks, a bad deployment is often the cause. New Relic allows you to track deployments so you can correlate deploy to your app's performance. Tracking deployments creates deployment markers that appear in APM charts. See how deployment markers work in this short video (4:30 minutes): Options for tracking deployments You can use the New Relic REST API v2 to record new deployments, retrieve a list of past deployments, and delete past deployments on your APM application. In addition, some APM agents have agent-specific methods to record deployments automatically. You can use your Slack integration with New Relic, or a simple webhook, to notify your team in real time of deployments for applications monitored by APM. Slack provides a webhook URL that allows you to post generic JSON that will appear formatted in a chosen Slack channel. There are a few places where you can view deployments in the New Relic UI after they have been recorded. You can view deployments in the UI: In the activity feed of the APM Summary, New Relic One Service summary, and entity summary pages. On APM performance charts as a chart marker. On the Deployments page for summary performance. Tip Deployment markers are not available for browser applications, but see browser releases for a way to tag errors with release versions. Record deployments with the REST API You can use the New Relic REST API v2 to record deployments, get a list of past deployments, and delete deployments. The examples in this document use curl as a command line tool. However, you can use any method to make your REST requests. You can also create, view, and delete deployments with the API Explorer. JSON uses double quotes \" for element names and content. Using single quotes ' will cause errors. Record a deployment with POST To record a new deployment, send a POST request that includes your API key to the deployments endpoint. Attach the payload in JSON format (see Character limits and JSON parameters). All payload parameters are optional except revision. For example: curl -X POST \"https://api.newrelic.com/v2/applications/$APP_ID/deployments.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i \\ -H \"Content-Type: application/json\" \\ -d \\ '{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' Copy Record a deployment with PowerShell To record a deployment with PowerShell, send a POST request that includes your API key to the deployments endpoint. Attach the payload in JSON format (see Character limits and JSON parameters). All payload parameters are optional except revision. This example uses PowerShell version 3 or higher: Invoke-WebRequest -Uri https://api.newrelic.com/v2/applications/YOUR_APP_ID/deployments.json -Method POST -Headers @{'Api-Key'='$API_KEY'} -ContentType 'application/json' -Body '{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' Copy This example uses PowerShell version 2 (requires .NET framework 3.5 or higher): $encoding = [System.Text.Encoding]::GetEncoding(\"ASCII\") $data ='{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' $postData = $encoding.GetBytes($data) $request = [System.Net.WebRequest]::Create('https://api.newrelic.com/v2/applications/$APP_ID/deployments.json') $request.Method = 'POST' $request.Headers.add('Api-Key','$API_KEY') $request.ContentType='application/json' $stream = $request.GetRequestStream() $stream.Write($postData,0,$postData.Length) $request.GetResponse() Copy View a list of deployments with GET To retrieve a list of all past deployments for your app, send a GET request that includes your API key to the deployments endpoint. GET requests do not use a JSON payload. For example: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/deployments.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i Copy Sample output from GET This example requests a list of deployments for app ID 9999999: curl -X GET \"https://api.newrelic.com/v2/applications/9999999/deployments.json\" \\ -H \"Api-Key:ABCDEFGHIJKLMNOPQRSTUVWXabcdefghijklmnopqrstuvwx\" \\ -i Copy The API returns this list of deployments: HTTP/1.1 200 OK ETag: \"ABCDEFGHIJKabcdefghijk0123456789\" Cache-Control: max-age=0, private, must-revalidate Content-Type: application/json { \"deployments\": [ { \"id\": 1234567, \"revision\": \"1234123412341234123412341234123412341234\", \"changelog\": \"Fixed the bugs for real this time\", \"description\": \"Example description two\", \"user\": \"Data Nerd\", \"timestamp\": \"2016-02-24T10:09:27-08:00\", \"links\": { \"application\": 9999999 } }, { \"id\": 2345678, \"revision\": \"7890789078907890789078907890789078907890\", \"changelog\": \"Think I fixed all the bugs\", \"description\": null, \"user\": \"Dren Atad\", \"timestamp\": \"2014-10-22T12:23:47-07:00\", \"links\": { \"application\": 9999999 } } ], \"links\": { \"deployment.agent\": \"/v2/applications/{application_id}\" } } Copy Delete a deployment with DELETE To delete a deployment, send a DELETE request that includes your API key to the deployments endpoint. DELETE requests do not use a JSON payload, but you must specify the ID for the deployment you want to delete. To retrieve the ID for a deployment, use the GET request. For example: curl -X DELETE \"https://api.newrelic.com/v2/applications/$APP_ID/deployments/$DEPLOYMENT_ID.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i Copy Character limits and JSON parameters The JSON payload can include the following parameters. Important UTF-8 4 byte characters, such as Emojis and some non-Latin language glyphs, cannot be used in the deployment text. Parameter Data type Description revision String, 127 character maximum Required. A unique ID for this deployment, visible in the Summary page and on the Deployments page. Can be any string, but is usually a version number or a Git checksum. changelog String, 65535 character maximum Optional. A summary of what changed in this deployment, visible in the Deployments page when you select (selected deployment) > Change log. description String, 65535 character maximum Optional. A high-level description of this deployment, visible in the Summary page and on the Deployments page when you select an individual deployment. user String, 31 character maximum Optional. A username to associate with the deployment, visible in the Summary page and on the Deployments page. timestamp ISO 8601 Optional. When the deployment occurred, down to the second. If not specified, the deployment will be recorded at the time when the API call was received. Timestamp requirements: Must be in UTC time. Must be after the most recent deployment timestamp. Cannot be in the future. Must be in ISO8601 format; for example, \"2019-10-08T00:15:36Z\". Record deployments using the New Relic agent Some agents have additional methods to record deployments: All agents: Use the New Relic REST API v2. C: No SDK-specific methods. Use the REST API. Go: No agent-specific methods. Use the REST API. Java: Call the Java agent jar. .NET: Use PowerShell and the REST API. Node.js: No agent-specific methods. Use the REST API. PHP: Use a PHP script. Python: Use the record-deploy subcommand of the newrelic-admin script. Ruby: Use a Capistrano recipe. Notify your team of deployments After a deployment is recorded using the REST API, you can optionally notify a webhook endpoint of the deployment. The destination of the webhook can be your Slack instance. To use webhooks to set up a deployment notification for a Slack channel: Log in to your Slack account as an admin, then go to App directory > Manage > Apps. Search for your New Relic app, then select Add configuration. From Post to channel, select an existing Slack channel or add a new channel, then Add configuration. From the list of options, copy the webhook URL. Go to one.newrelic.com > (account dropdown) > Account settings > Integrations > Deploy notifications > Webhook. Paste the Slack webhook URL, then save. Optional: Send a test message. Tip You can also use webhooks, Slack channels, and other options for alert notifications with New Relic Alerts. End of life notification: Hipchat, Campfire As of September 9, 2019, integrations with Hipchat and Campfire for APM deployment notifications will no longer be available. Recommendation: If you are still using Hipchat or Campfire, use webhooks with Slack channels instead. For more information, see the New Relic Explorers Hub post.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.84249,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Maintenance</em>",
        "body": "Deploying an app can be a risky event—when your app breaks, a bad deployment is often the cause. New Relic allows you to track deployments so you can correlate deploy to your app&#x27;s performance. Tracking deployments creates deployment markers that appear in <em>APM</em> charts. See how deployment markers"
      },
      "id": "603eb1c364441fd58b4e888b"
    },
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-12-25T07:13:45Z",
      "updated_at": "2021-10-30T18:31:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 83.736946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> applications",
        "tags": "<em>Maintenance</em>",
        "body": " reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic <em>APM</em>, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/php-release-notes/php-agent-4111/",
      "sections": [
        "PHP agent v4.11.1"
      ],
      "published_at": "2021-12-25T20:28:38Z",
      "title": "PHP agent v4.11.1",
      "updated_at": "2021-03-16T03:30:45Z",
      "type": "docs",
      "external_id": "b37822c0dcd0ddedf8668c387a920d634b326313",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "< div id=\"watermark\">End of Life < /div> < div class=\"callout-important\"> < p>The end-of-life date for this agent version is July 29, 2019. To update to the latest agent version, see < a href=\"/docs/agents/manage-apm-agents/installation/update-new-relic-agent\">Update the agent < /a>. For more information, see < a href=\"/docs/agents/manage-apm-agents/maintenance/new-relic-agent-plugin-end-life-policy\">End-of-life policy < /a>. < /p> < /div> Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 50.960632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " information, see &lt; a href=&quot;&#x2F;docs&#x2F;agents&#x2F;manage-<em>apm</em>-agents&#x2F;<em>maintenance</em>&#x2F;new-relic-agent-plugin-end-life-policy&quot;&gt;End-of-life policy &lt; &#x2F;a&gt;. &lt; &#x2F;p&gt; &lt; &#x2F;div&gt; Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic."
      },
      "id": "603ed5fd28ccbcc388eba754"
    }
  ],
  "/docs/apm/new-relic-apm/maintenance/record-monitor-deployments": [
    {
      "sections": [
        "Remove applications from New Relic",
        "Before attempting to remove an app",
        "Remove an application from New Relic",
        "APM applications",
        "Browser",
        "Mobile",
        "Troubleshooting",
        "You lack permissions",
        "You have not waited long enough",
        "Not all agents are disabled",
        "You have problems removing your PHP app",
        "You don't know where the app's data is coming from",
        "Browser data is still reporting"
      ],
      "title": "Remove applications from New Relic",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "f457af939892708a477895093f97b65d08ff015a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic/",
      "published_at": "2021-12-25T07:13:45Z",
      "updated_at": "2021-10-30T18:31:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Applications are automatically removed from New Relic after 93 days without sending data to our platform. You can also remove an application using the UI, once it has stopped sending data. Key metrics will continue to be available via the New Relic REST API, with the application name remaining reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic APM, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account to pay less or make it entirely free. The ability to remove an app from the UI may be dependent on permissions. If an agent is still sending data from an app, you cannot remove that app. Remove an application from New Relic Before you can remove an application monitored by New Relic APM, browser monitoring, or mobile monitoring, the app must first stop reporting data. Do this by disabling the agent (explained below) or by uninstalling the agent completely. APM applications Disable an APM agent using these instructions: C SDK: Do a quick recompile and deploy. For example, surround your instrumentation in #ifdef, and set the value of YOURNAMESPACE_NEWRELIC_ENABLED with your build system. Go: Set Enabled to false. Java: Set agent_enabled to false. .NET: Set Newrelic.AgentEnabled to false. Node.js: Set agent_enabled to false. PHP: Remove or disable both the newrelic.so and newrelic-daemon components. Set newrelic.enabled to false. Python: Set monitor_mode to false. Ruby: Set agent_enabled to false. Restart the application server and wait up to ten minutes. Verify the color-coded health status for the app has turned to gray and is no longer reporting data. To remove the APM application from the UI (and any associated apps in browser monitoring), you have a few options: Delete the app from the UI. Go to one.newrelic.com > APM > (select an app/service) > Settings > Application, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Browser If you've used the copy/paste method to install the browser agent, remove the JavaScript snippet from your application's pages. After 93 days, that app will be removed from the UI. If you want to remove it sooner than that, you have several options: Delete an associated APM app. If your browser app is linked to an APM application, deleting the APM application also removes the browser application. See the instructions for deleting an APM app. Delete it from the UI. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings, and click the Delete application button. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Mobile Remove all references/dependencies to New Relic's mobile monitoring SDK/frameworks, then rebuild the application. For more information, see the iOS and Android install docs. After 93 days, the app will be removed from the UI. If you want to remove it sooner than that, you have several options: Remove it using the UI. Go to one.newrelic.com > Mobile > (select an app) > Settings > Application, and click Delete application. Use NerdGraph to delete an entity. If you've done the above and are still seeing that app in the UI, you can use NerdGraph to delete the relevant entities. For how to find entity IDs, see Entities. Troubleshooting If you have problems removing an app, here are some possible causes and suggested solutions: You lack permissions If you don't have relevant permissions, you won't be able to remove an application. You have not waited long enough All app data must stop reporting to New Relic before you can remove that entity from New Relic. In most cases, this takes between 10-15 minutes. In rare cases, it can take a few minutes longer. Not all agents are disabled If you have multiple agents reporting data under the same UI name, then you must make sure you disable or uninstall all of the agents associated with that entity. You have problems removing your PHP app If you have a PHP app and aren't able to remove it from the UI, possible causes include: You have not disabled both components of the PHP agent. You must stop or uninstall both newrelic.so and newrelic-daemon in order to be able to remove a PHP app. For more information, see New Relic daemon processes. You have set up per-directory monitoring of your PHP app, and unexpected PHP data is reporting as the default PHP application in the New Relic UI. To fix this, change the default app name in the PHP agent config. You don't know where the app's data is coming from If you don't know where an app's data is coming from, it may be because the app's name has been changed. When an app name is changed in the UI, it does not change the underlying app name being reported; it only changes how the app name appears in the UI. To see if there is a difference between the reported name and the displayed name: From one.newrelic.com, select APM, then select an application. Scroll down to Settings and select Application. Compare the name in the Application alias field to the name in the Your application still reports as message directly beneath it. To get host information about an app you are not familiar with: From one.newrelic.com, select APM, then select an application. From the summary view, review the Servers list. Once you have identified where app data is coming from, you can remove the app from New Relic. Browser data is still reporting To remove an app from New Relic, all data must have stopped reporting, including browser monitoring data. To verify that you have disabled or uninstalled the APM agent associated with the app: Ensure that browser monitoring is disabled. If your browser monitoring script is inserted by the APM agent, turn it off from inside the UI, in the agent's config file, or in both. If you copied and pasted the monitoring JavaScript snippet in certain pages, remove that JavaScript snippet manually. Ensure all caches have been cleared that the application uses, such as host caches, CDNs, or anything else that caches built pages. Optional: To see a count of how many page views report from each domain, use this NRQL query: SELECT count(*) FROM PageView WHERE appName = 'YOUR_BROWSER_APP_NAME' FACET domain Copy If these steps don't resolve the issue, it is likely due to an end-user's browser cache that hasn't yet cleared. Wait until those caches clear. If your app has internal users, you may be able to identify the users and clear those caches.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 83.736946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> applications",
        "tags": "<em>Maintenance</em>",
        "body": " reserved. For more information, see Inactive apps in New Relic One and our data retention guidelines. Before attempting to remove an app Before attempting to remove an app monitored by New Relic <em>APM</em>, browser monitoring, or mobile monitoring from the UI, keep in mind: You can downgrade your account"
      },
      "id": "603ebbef28ccbc48d1eba78d"
    },
    {
      "sections": [
        "Disable the APM agent",
        "C SDK",
        "Go",
        "Tip",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby"
      ],
      "title": "Disable the APM agent",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "86abf4b21d23156a566b9cf171c8eb8a36385518",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/disable-apm-agent/",
      "published_at": "2021-12-25T05:36:50Z",
      "updated_at": "2021-03-16T07:13:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You may want to temporarily disable an APM agent for the purposes of testing or troubleshooting. This document explains procedures for temporarily turning off the APM agent. Related procedures: To permanently disable APM, uninstall the agent. To configure an agent to monitor some things but not others, use custom instrumentation. Disable the APM agent Select your agent type for instructions: C SDK The C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. Follow standard procedures to disable or uninstall the C SDK. Go There are two main ways to disable the Go agent: Remove the import of the github.com/newrelic/go-agent package from your application, and remove or comment out any calls to the newrelic namespace. Then, recompile and restart your app. Use the enabled configuration setting. Then, recompile and restart your app. (This will not reduce overhead because the instrumentation is still running; it will only prevent the sending of data to the New Relic collector.) Tip After you disable the agent, it may take several minutes for data to stop showing up. Java There are three main ways to disable the Java agent: Set agent_enabled to false, then restart the JVM. Use the JVM command line flag: -Dnewrelic.config.agent_enabled=false Copy Then restart the JVM. Remove the newrelic.jar or newrelic.yml file, then restart the JVM. Tip After you disable the agent, it may take several minutes for data to stop showing up. .NET The method to disable the agent depends on if you are using Framework or Core: .NET Framework: Set agentEnabled to false in the global newrelic.config file, found in C:\\ProgramData\\New Relic\\.NET Agent\\. If the application is IIS-hosted, restart IIS. If it's self-hosted (non-IIS), restart the application. .NET Core: Set agentEnabled to false in the newrelic.config file found in the Core agent’s installation directory (for Windows alongside NewRelic.Profiler.dll and for Linux alongside NewRelic.Profiler.so). If you use the ASP.NET Core Module, reset IIS. Otherwise, restart your Core application. Tip After you disable the agent, it may take several minutes for data to stop showing up. Node.js There are two main ways to disable the Node.js agent: Set agent_enabled to false in your agent config file, then restart the app server. Set the NEW_RELIC_ENABLED environment variable to false. Tip After you disable the agent, it may take several minutes for data to stop showing up. PHP To disable the PHP agent, set the enabled config setting to false, then restart the web server or PHP. Tip After you disable the agent, it may take several minutes for data to stop showing up. Python There are three main ways to disable the Python agent, depending on your preference and setup: Standard install: Use the monitor_mode configuration setting. This can be done by editing the config file or by using an environment variable. Standard install with newrelic-admin script: Remove reference to that script in your application. Manual instrumentation: Remove the initialization script from your application. Tip After you disable the agent, it may take several minutes for data to stop showing up. Ruby There are several ways to disable the Ruby agent, depending on your preference and setup. These methods will remove most instrumentation but there will still be a small amount of activity and overhead: Use the agent_enabled configuration setting. This can be done in the configuration file or in the per-environment stanzas. Restart your app server afterward. Do the same via an environment variable, then restart the app server. The following methods will remove all instrumentation and overhead: Remove newrelic_rpm from the Gemfile and bundle install. Set the following in the Gemfile and bundle install: gem 'newrelic_rpm', :require => false Copy This option ensures the gem is installed if it's required somewhere in the app, but doesn't install it when bundling. Tip After you disable the agent, it may take several minutes for data to stop showing up.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 74.24083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable the <em>APM</em> agent",
        "sections": "Disable the <em>APM</em> agent",
        "tags": "<em>Maintenance</em>",
        "body": "You may want to temporarily disable an <em>APM</em> agent for the purposes of testing or troubleshooting. This document explains procedures for temporarily turning off the <em>APM</em> agent. Related procedures: To permanently disable <em>APM</em>, uninstall the agent. To configure an agent to monitor some things"
      },
      "id": "603e83ac196a67266ea83dda"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/php-release-notes/php-agent-4111/",
      "sections": [
        "PHP agent v4.11.1"
      ],
      "published_at": "2021-12-25T20:28:38Z",
      "title": "PHP agent v4.11.1",
      "updated_at": "2021-03-16T03:30:45Z",
      "type": "docs",
      "external_id": "b37822c0dcd0ddedf8668c387a920d634b326313",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "< div id=\"watermark\">End of Life < /div> < div class=\"callout-important\"> < p>The end-of-life date for this agent version is July 29, 2019. To update to the latest agent version, see < a href=\"/docs/agents/manage-apm-agents/installation/update-new-relic-agent\">Update the agent < /a>. For more information, see < a href=\"/docs/agents/manage-apm-agents/maintenance/new-relic-agent-plugin-end-life-policy\">End-of-life policy < /a>. < /p> < /div> Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 50.960632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " information, see &lt; a href=&quot;&#x2F;docs&#x2F;agents&#x2F;manage-<em>apm</em>-agents&#x2F;<em>maintenance</em>&#x2F;new-relic-agent-plugin-end-life-policy&quot;&gt;End-of-life policy &lt; &#x2F;a&gt;. &lt; &#x2F;p&gt; &lt; &#x2F;div&gt; Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic."
      },
      "id": "603ed5fd28ccbcc388eba754"
    }
  ],
  "/docs/apm/new-relic-apm/maintenance/remove-applications-new-relic": [
    {
      "sections": [
        "Record and monitor deployments",
        "Options for tracking deployments",
        "Tip",
        "Record deployments with the REST API",
        "Record a deployment with POST",
        "Record a deployment with PowerShell",
        "View a list of deployments with GET",
        "Sample output from GET",
        "Delete a deployment with DELETE",
        "Character limits and JSON parameters",
        "Important",
        "Record deployments using the New Relic agent",
        "Notify your team of deployments",
        "End of life notification: Hipchat, Campfire"
      ],
      "title": "Record and monitor deployments",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "00b24338386fd261daea0733fe03c01639cce083",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/record-monitor-deployments/",
      "published_at": "2021-12-25T01:50:57Z",
      "updated_at": "2021-11-25T13:38:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Deploying an app can be a risky event—when your app breaks, a bad deployment is often the cause. New Relic allows you to track deployments so you can correlate deploy to your app's performance. Tracking deployments creates deployment markers that appear in APM charts. See how deployment markers work in this short video (4:30 minutes): Options for tracking deployments You can use the New Relic REST API v2 to record new deployments, retrieve a list of past deployments, and delete past deployments on your APM application. In addition, some APM agents have agent-specific methods to record deployments automatically. You can use your Slack integration with New Relic, or a simple webhook, to notify your team in real time of deployments for applications monitored by APM. Slack provides a webhook URL that allows you to post generic JSON that will appear formatted in a chosen Slack channel. There are a few places where you can view deployments in the New Relic UI after they have been recorded. You can view deployments in the UI: In the activity feed of the APM Summary, New Relic One Service summary, and entity summary pages. On APM performance charts as a chart marker. On the Deployments page for summary performance. Tip Deployment markers are not available for browser applications, but see browser releases for a way to tag errors with release versions. Record deployments with the REST API You can use the New Relic REST API v2 to record deployments, get a list of past deployments, and delete deployments. The examples in this document use curl as a command line tool. However, you can use any method to make your REST requests. You can also create, view, and delete deployments with the API Explorer. JSON uses double quotes \" for element names and content. Using single quotes ' will cause errors. Record a deployment with POST To record a new deployment, send a POST request that includes your API key to the deployments endpoint. Attach the payload in JSON format (see Character limits and JSON parameters). All payload parameters are optional except revision. For example: curl -X POST \"https://api.newrelic.com/v2/applications/$APP_ID/deployments.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i \\ -H \"Content-Type: application/json\" \\ -d \\ '{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' Copy Record a deployment with PowerShell To record a deployment with PowerShell, send a POST request that includes your API key to the deployments endpoint. Attach the payload in JSON format (see Character limits and JSON parameters). All payload parameters are optional except revision. This example uses PowerShell version 3 or higher: Invoke-WebRequest -Uri https://api.newrelic.com/v2/applications/YOUR_APP_ID/deployments.json -Method POST -Headers @{'Api-Key'='$API_KEY'} -ContentType 'application/json' -Body '{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' Copy This example uses PowerShell version 2 (requires .NET framework 3.5 or higher): $encoding = [System.Text.Encoding]::GetEncoding(\"ASCII\") $data ='{ \"deployment\": { \"revision\": \"REVISION\", \"changelog\": \"Added: /v2/deployments.rb, Removed: None\", \"description\": \"Added a deployments resource to the v2 API\", \"user\": \"datanerd@example.com\", \"timestamp\": \"2019-10-08T00:15:36Z\" } }' $postData = $encoding.GetBytes($data) $request = [System.Net.WebRequest]::Create('https://api.newrelic.com/v2/applications/$APP_ID/deployments.json') $request.Method = 'POST' $request.Headers.add('Api-Key','$API_KEY') $request.ContentType='application/json' $stream = $request.GetRequestStream() $stream.Write($postData,0,$postData.Length) $request.GetResponse() Copy View a list of deployments with GET To retrieve a list of all past deployments for your app, send a GET request that includes your API key to the deployments endpoint. GET requests do not use a JSON payload. For example: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/deployments.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i Copy Sample output from GET This example requests a list of deployments for app ID 9999999: curl -X GET \"https://api.newrelic.com/v2/applications/9999999/deployments.json\" \\ -H \"Api-Key:ABCDEFGHIJKLMNOPQRSTUVWXabcdefghijklmnopqrstuvwx\" \\ -i Copy The API returns this list of deployments: HTTP/1.1 200 OK ETag: \"ABCDEFGHIJKabcdefghijk0123456789\" Cache-Control: max-age=0, private, must-revalidate Content-Type: application/json { \"deployments\": [ { \"id\": 1234567, \"revision\": \"1234123412341234123412341234123412341234\", \"changelog\": \"Fixed the bugs for real this time\", \"description\": \"Example description two\", \"user\": \"Data Nerd\", \"timestamp\": \"2016-02-24T10:09:27-08:00\", \"links\": { \"application\": 9999999 } }, { \"id\": 2345678, \"revision\": \"7890789078907890789078907890789078907890\", \"changelog\": \"Think I fixed all the bugs\", \"description\": null, \"user\": \"Dren Atad\", \"timestamp\": \"2014-10-22T12:23:47-07:00\", \"links\": { \"application\": 9999999 } } ], \"links\": { \"deployment.agent\": \"/v2/applications/{application_id}\" } } Copy Delete a deployment with DELETE To delete a deployment, send a DELETE request that includes your API key to the deployments endpoint. DELETE requests do not use a JSON payload, but you must specify the ID for the deployment you want to delete. To retrieve the ID for a deployment, use the GET request. For example: curl -X DELETE \"https://api.newrelic.com/v2/applications/$APP_ID/deployments/$DEPLOYMENT_ID.json\" \\ -H \"Api-Key:$API_KEY\" \\ -i Copy Character limits and JSON parameters The JSON payload can include the following parameters. Important UTF-8 4 byte characters, such as Emojis and some non-Latin language glyphs, cannot be used in the deployment text. Parameter Data type Description revision String, 127 character maximum Required. A unique ID for this deployment, visible in the Summary page and on the Deployments page. Can be any string, but is usually a version number or a Git checksum. changelog String, 65535 character maximum Optional. A summary of what changed in this deployment, visible in the Deployments page when you select (selected deployment) > Change log. description String, 65535 character maximum Optional. A high-level description of this deployment, visible in the Summary page and on the Deployments page when you select an individual deployment. user String, 31 character maximum Optional. A username to associate with the deployment, visible in the Summary page and on the Deployments page. timestamp ISO 8601 Optional. When the deployment occurred, down to the second. If not specified, the deployment will be recorded at the time when the API call was received. Timestamp requirements: Must be in UTC time. Must be after the most recent deployment timestamp. Cannot be in the future. Must be in ISO8601 format; for example, \"2019-10-08T00:15:36Z\". Record deployments using the New Relic agent Some agents have additional methods to record deployments: All agents: Use the New Relic REST API v2. C: No SDK-specific methods. Use the REST API. Go: No agent-specific methods. Use the REST API. Java: Call the Java agent jar. .NET: Use PowerShell and the REST API. Node.js: No agent-specific methods. Use the REST API. PHP: Use a PHP script. Python: Use the record-deploy subcommand of the newrelic-admin script. Ruby: Use a Capistrano recipe. Notify your team of deployments After a deployment is recorded using the REST API, you can optionally notify a webhook endpoint of the deployment. The destination of the webhook can be your Slack instance. To use webhooks to set up a deployment notification for a Slack channel: Log in to your Slack account as an admin, then go to App directory > Manage > Apps. Search for your New Relic app, then select Add configuration. From Post to channel, select an existing Slack channel or add a new channel, then Add configuration. From the list of options, copy the webhook URL. Go to one.newrelic.com > (account dropdown) > Account settings > Integrations > Deploy notifications > Webhook. Paste the Slack webhook URL, then save. Optional: Send a test message. Tip You can also use webhooks, Slack channels, and other options for alert notifications with New Relic Alerts. End of life notification: Hipchat, Campfire As of September 9, 2019, integrations with Hipchat and Campfire for APM deployment notifications will no longer be available. Recommendation: If you are still using Hipchat or Campfire, use webhooks with Slack channels instead. For more information, see the New Relic Explorers Hub post.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.84249,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Maintenance</em>",
        "body": "Deploying an app can be a risky event—when your app breaks, a bad deployment is often the cause. New Relic allows you to track deployments so you can correlate deploy to your app&#x27;s performance. Tracking deployments creates deployment markers that appear in <em>APM</em> charts. See how deployment markers"
      },
      "id": "603eb1c364441fd58b4e888b"
    },
    {
      "sections": [
        "Disable the APM agent",
        "C SDK",
        "Go",
        "Tip",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby"
      ],
      "title": "Disable the APM agent",
      "type": "docs",
      "tags": [
        "APM",
        "Maintenance"
      ],
      "external_id": "86abf4b21d23156a566b9cf171c8eb8a36385518",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/new-relic-apm/maintenance/disable-apm-agent/",
      "published_at": "2021-12-25T05:36:50Z",
      "updated_at": "2021-03-16T07:13:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You may want to temporarily disable an APM agent for the purposes of testing or troubleshooting. This document explains procedures for temporarily turning off the APM agent. Related procedures: To permanently disable APM, uninstall the agent. To configure an agent to monitor some things but not others, use custom instrumentation. Disable the APM agent Select your agent type for instructions: C SDK The C SDK cannot be turned on or off directly. However, you can write your code for the SDK so that a quick recompile and deploy can enable or disable your instrumentation. Follow standard procedures to disable or uninstall the C SDK. Go There are two main ways to disable the Go agent: Remove the import of the github.com/newrelic/go-agent package from your application, and remove or comment out any calls to the newrelic namespace. Then, recompile and restart your app. Use the enabled configuration setting. Then, recompile and restart your app. (This will not reduce overhead because the instrumentation is still running; it will only prevent the sending of data to the New Relic collector.) Tip After you disable the agent, it may take several minutes for data to stop showing up. Java There are three main ways to disable the Java agent: Set agent_enabled to false, then restart the JVM. Use the JVM command line flag: -Dnewrelic.config.agent_enabled=false Copy Then restart the JVM. Remove the newrelic.jar or newrelic.yml file, then restart the JVM. Tip After you disable the agent, it may take several minutes for data to stop showing up. .NET The method to disable the agent depends on if you are using Framework or Core: .NET Framework: Set agentEnabled to false in the global newrelic.config file, found in C:\\ProgramData\\New Relic\\.NET Agent\\. If the application is IIS-hosted, restart IIS. If it's self-hosted (non-IIS), restart the application. .NET Core: Set agentEnabled to false in the newrelic.config file found in the Core agent’s installation directory (for Windows alongside NewRelic.Profiler.dll and for Linux alongside NewRelic.Profiler.so). If you use the ASP.NET Core Module, reset IIS. Otherwise, restart your Core application. Tip After you disable the agent, it may take several minutes for data to stop showing up. Node.js There are two main ways to disable the Node.js agent: Set agent_enabled to false in your agent config file, then restart the app server. Set the NEW_RELIC_ENABLED environment variable to false. Tip After you disable the agent, it may take several minutes for data to stop showing up. PHP To disable the PHP agent, set the enabled config setting to false, then restart the web server or PHP. Tip After you disable the agent, it may take several minutes for data to stop showing up. Python There are three main ways to disable the Python agent, depending on your preference and setup: Standard install: Use the monitor_mode configuration setting. This can be done by editing the config file or by using an environment variable. Standard install with newrelic-admin script: Remove reference to that script in your application. Manual instrumentation: Remove the initialization script from your application. Tip After you disable the agent, it may take several minutes for data to stop showing up. Ruby There are several ways to disable the Ruby agent, depending on your preference and setup. These methods will remove most instrumentation but there will still be a small amount of activity and overhead: Use the agent_enabled configuration setting. This can be done in the configuration file or in the per-environment stanzas. Restart your app server afterward. Do the same via an environment variable, then restart the app server. The following methods will remove all instrumentation and overhead: Remove newrelic_rpm from the Gemfile and bundle install. Set the following in the Gemfile and bundle install: gem 'newrelic_rpm', :require => false Copy This option ensures the gem is installed if it's required somewhere in the app, but doesn't install it when bundling. Tip After you disable the agent, it may take several minutes for data to stop showing up.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 74.24083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable the <em>APM</em> agent",
        "sections": "Disable the <em>APM</em> agent",
        "tags": "<em>Maintenance</em>",
        "body": "You may want to temporarily disable an <em>APM</em> agent for the purposes of testing or troubleshooting. This document explains procedures for temporarily turning off the <em>APM</em> agent. Related procedures: To permanently disable <em>APM</em>, uninstall the agent. To configure an agent to monitor some things"
      },
      "id": "603e83ac196a67266ea83dda"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/agent-release-notes/php-release-notes/php-agent-4111/",
      "sections": [
        "PHP agent v4.11.1"
      ],
      "published_at": "2021-12-25T20:28:38Z",
      "title": "PHP agent v4.11.1",
      "updated_at": "2021-03-16T03:30:45Z",
      "type": "docs",
      "external_id": "b37822c0dcd0ddedf8668c387a920d634b326313",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "< div id=\"watermark\">End of Life < /div> < div class=\"callout-important\"> < p>The end-of-life date for this agent version is July 29, 2019. To update to the latest agent version, see < a href=\"/docs/agents/manage-apm-agents/installation/update-new-relic-agent\">Update the agent < /a>. For more information, see < a href=\"/docs/agents/manage-apm-agents/maintenance/new-relic-agent-plugin-end-life-policy\">End-of-life policy < /a>. < /p> < /div> Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 50.960632,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " information, see &lt; a href=&quot;&#x2F;docs&#x2F;agents&#x2F;manage-<em>apm</em>-agents&#x2F;<em>maintenance</em>&#x2F;new-relic-agent-plugin-end-life-policy&quot;&gt;End-of-life policy &lt; &#x2F;a&gt;. &lt; &#x2F;p&gt; &lt; &#x2F;div&gt; Bug Fixes Fix to prevent proxy credentials transmission This update prevents proxy credentials set in the agent config file from being transmitted to New Relic."
      },
      "id": "603ed5fd28ccbcc388eba754"
    }
  ],
  "/docs/apm/new-relic-apm/troubleshooting/charts-missing-or-do-not-render": [
    {
      "sections": [
        "Not seeing data",
        "Problem",
        "Solution",
        "APM agents",
        "Deleted or renamed applications in APM",
        "No connection to collector",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Other factors affecting access"
      ],
      "title": "Not seeing data",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "1351bcdb406ddc130d9e2388806e5c2c28e22f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/not-seeing-data/",
      "published_at": "2021-12-25T10:59:12Z",
      "updated_at": "2021-12-14T04:17:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You do not see data in the UI after installing a New Relic agent. Solution You should start seeing data within a few minutes after installing a New Relic agent and generating traffic for your app. If you don't see data, you can use the New Relic Diagnostics utility to automatically identify common issues. For additional troubleshooting tips, see the agent-specific docs.  APM agents Follow the troubleshooting procedures for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these troubleshooting steps that apply to all APM agents: Deleted or renamed applications in APM An app needs to stop reporting data for at least an hour before you can reuse that name. It also needs to reconnect with the New Relic collector (be restarted) before new data will be accepted. The app remains in the collector's cache for an hour before it is flushed. During that time it is marked as \"deleted,\" so no new data is accepted. Also, the data is associated with an executing app that has been deleted until the agent is restarted. For more information, see: Name your application Use multiple names for an app No connection to collector Your app will not be affected if the New Relic agent cannot connect to the collector. Data continues to be collected, and it is uploaded as soon as the connection is restored. While the network is down or the collector unavailable, you may see gaps where data is missing in the APM CPU and memory charts. The agent will continue attempting to reconnect, and when it succeeds, you will again see data appearing in the UI. During the time the agent is unable to communicate with the collector, it is still collecting data. Once it is able to connect again, it will upload the data and fill in the missing segment so there will not be any confusion about whether your application was down or just not reporting data. To save memory, the data will be aggregated and averaged over the period, so you will see flat bars and charts over the period when it was unable to communicate with the collector. Browser monitoring See Troubleshooting browser monitoring installation. Infrastructure monitoring Follow the troubleshooting procedures for your infrastructure agent: Linux Windows AWS integrations On-host integrations Mobile monitoring Follow the troubleshooting procedures for your mobile app: iOS Android Other factors affecting access For more on factors that can affect your ability to access New Relic features, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 65.279785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> agents",
        "tags": "<em>Troubleshooting</em>",
        "body": " common issues. For additional <em>troubleshooting</em> tips, see the agent-specific docs.  <em>APM</em> agents Follow the <em>troubleshooting</em> procedures for your <em>APM</em> agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these <em>troubleshooting</em> steps that apply to all <em>APM</em> agents: Deleted or renamed"
      },
      "id": "603e8f2928ccbccc87eba750"
    },
    {
      "sections": [
        "Diagnostics CLI (nrdiag)",
        "Compatibility",
        "Get started"
      ],
      "title": "Diagnostics CLI (nrdiag)",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Diagnostics CLI (nrdiag)"
      ],
      "external_id": "a49c65c83dc0ad7450935af104e8fcb0d7490e2c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/diagnostics-cli-nrdiag/diagnostics-cli-nrdiag/",
      "published_at": "2021-12-25T10:55:10Z",
      "updated_at": "2021-12-14T04:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Download latest version The Diagnostics CLI (nrdiag) is a utility that automatically detects common problems with New Relic products. If the Diagnostics CLI detects a problem, it suggests troubleshooting steps. The Diagnostics CLI can automatically upload troubleshooting data to a New Relic account. The Diagnostics CLI is open source and is located in GitHub. For additional troubleshooting steps for your agent, check out Not seeing data. Here's an example of the Diagnostics CLI running on Ubuntu Linux. The program checks your New Relic agent configurations for issues and generates zipped troubleshooting logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: APM: Available for all APM agents except C SDK. For the Go agent, only basic connectivity checks are available. Browser monitoring: Browser agent detection Infrastructure monitoring: Linux and Windows agents Mobile agents: iOS and Android Synthetic monitoring: Containerized private minions (CPM) The Diagnostics CLI does not require superuser or admin permissions to run, although we recommend those permissions for some checks. It will return an error if it does not have permissions to read the files it scans. Get started To use the Diagnostics CLI: Run the Diagnostics CLI, including task suites and command line options as needed. Supply the -attach flag for uploading results to your New Relic account. Optional: Validate your config file settings. Interpret the output. Like any other New Relic tool, the Diagnostics CLI service is designed to protect you and your customers' data privacy. For detailed information, see our Diagnostics CLI licensing and security documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 60.75267,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " <em>troubleshooting</em> logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: <em>APM</em>: Available for all <em>APM</em> agents except C SDK. For the Go agent, only basic connectivity checks"
      },
      "id": "604469f8e7b9d2abb65799f0"
    },
    {
      "sections": [
        "Generate New Relic agent logs for troubleshooting",
        "APM agent logging",
        "Infrastructure agent logging",
        "Mobile agent logging",
        "Logging for other New Relic tools"
      ],
      "title": "Generate New Relic agent logs for troubleshooting",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "cc4e412038d0e125474a7ead0440a3cad51554dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/generate-new-relic-agent-logs-troubleshooting/",
      "published_at": "2021-12-25T10:58:24Z",
      "updated_at": "2021-12-14T04:16:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require manual installation of an agent. Most agents include built-in tools to generate detailed logs for troubleshooting, auditing, and diagnostics. Related docs: For general agent troubleshooting, see Not seeing data. Learn about New Relic Diagnostics: a utility that automatically detects common problems. APM agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and troubleshooting instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 59.950127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "sections": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " that automatically detects common problems. <em>APM</em> agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and <em>troubleshooting</em> instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability."
      },
      "id": "61bfb6ef196a67b63eef0936"
    }
  ],
  "/docs/apm/new-relic-apm/troubleshooting/cpu-usage-mismatch-or-usage-over-100": [
    {
      "sections": [
        "Not seeing data",
        "Problem",
        "Solution",
        "APM agents",
        "Deleted or renamed applications in APM",
        "No connection to collector",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Other factors affecting access"
      ],
      "title": "Not seeing data",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "1351bcdb406ddc130d9e2388806e5c2c28e22f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/not-seeing-data/",
      "published_at": "2021-12-25T10:59:12Z",
      "updated_at": "2021-12-14T04:17:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You do not see data in the UI after installing a New Relic agent. Solution You should start seeing data within a few minutes after installing a New Relic agent and generating traffic for your app. If you don't see data, you can use the New Relic Diagnostics utility to automatically identify common issues. For additional troubleshooting tips, see the agent-specific docs.  APM agents Follow the troubleshooting procedures for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these troubleshooting steps that apply to all APM agents: Deleted or renamed applications in APM An app needs to stop reporting data for at least an hour before you can reuse that name. It also needs to reconnect with the New Relic collector (be restarted) before new data will be accepted. The app remains in the collector's cache for an hour before it is flushed. During that time it is marked as \"deleted,\" so no new data is accepted. Also, the data is associated with an executing app that has been deleted until the agent is restarted. For more information, see: Name your application Use multiple names for an app No connection to collector Your app will not be affected if the New Relic agent cannot connect to the collector. Data continues to be collected, and it is uploaded as soon as the connection is restored. While the network is down or the collector unavailable, you may see gaps where data is missing in the APM CPU and memory charts. The agent will continue attempting to reconnect, and when it succeeds, you will again see data appearing in the UI. During the time the agent is unable to communicate with the collector, it is still collecting data. Once it is able to connect again, it will upload the data and fill in the missing segment so there will not be any confusion about whether your application was down or just not reporting data. To save memory, the data will be aggregated and averaged over the period, so you will see flat bars and charts over the period when it was unable to communicate with the collector. Browser monitoring See Troubleshooting browser monitoring installation. Infrastructure monitoring Follow the troubleshooting procedures for your infrastructure agent: Linux Windows AWS integrations On-host integrations Mobile monitoring Follow the troubleshooting procedures for your mobile app: iOS Android Other factors affecting access For more on factors that can affect your ability to access New Relic features, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 65.279785,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> agents",
        "tags": "<em>Troubleshooting</em>",
        "body": " common issues. For additional <em>troubleshooting</em> tips, see the agent-specific docs.  <em>APM</em> agents Follow the <em>troubleshooting</em> procedures for your <em>APM</em> agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these <em>troubleshooting</em> steps that apply to all <em>APM</em> agents: Deleted or renamed"
      },
      "id": "603e8f2928ccbccc87eba750"
    },
    {
      "sections": [
        "Diagnostics CLI (nrdiag)",
        "Compatibility",
        "Get started"
      ],
      "title": "Diagnostics CLI (nrdiag)",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Diagnostics CLI (nrdiag)"
      ],
      "external_id": "a49c65c83dc0ad7450935af104e8fcb0d7490e2c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/diagnostics-cli-nrdiag/diagnostics-cli-nrdiag/",
      "published_at": "2021-12-25T10:55:10Z",
      "updated_at": "2021-12-14T04:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Download latest version The Diagnostics CLI (nrdiag) is a utility that automatically detects common problems with New Relic products. If the Diagnostics CLI detects a problem, it suggests troubleshooting steps. The Diagnostics CLI can automatically upload troubleshooting data to a New Relic account. The Diagnostics CLI is open source and is located in GitHub. For additional troubleshooting steps for your agent, check out Not seeing data. Here's an example of the Diagnostics CLI running on Ubuntu Linux. The program checks your New Relic agent configurations for issues and generates zipped troubleshooting logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: APM: Available for all APM agents except C SDK. For the Go agent, only basic connectivity checks are available. Browser monitoring: Browser agent detection Infrastructure monitoring: Linux and Windows agents Mobile agents: iOS and Android Synthetic monitoring: Containerized private minions (CPM) The Diagnostics CLI does not require superuser or admin permissions to run, although we recommend those permissions for some checks. It will return an error if it does not have permissions to read the files it scans. Get started To use the Diagnostics CLI: Run the Diagnostics CLI, including task suites and command line options as needed. Supply the -attach flag for uploading results to your New Relic account. Optional: Validate your config file settings. Interpret the output. Like any other New Relic tool, the Diagnostics CLI service is designed to protect you and your customers' data privacy. For detailed information, see our Diagnostics CLI licensing and security documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 60.75267,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " <em>troubleshooting</em> logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: <em>APM</em>: Available for all <em>APM</em> agents except C SDK. For the Go agent, only basic connectivity checks"
      },
      "id": "604469f8e7b9d2abb65799f0"
    },
    {
      "sections": [
        "Generate New Relic agent logs for troubleshooting",
        "APM agent logging",
        "Infrastructure agent logging",
        "Mobile agent logging",
        "Logging for other New Relic tools"
      ],
      "title": "Generate New Relic agent logs for troubleshooting",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "cc4e412038d0e125474a7ead0440a3cad51554dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/generate-new-relic-agent-logs-troubleshooting/",
      "published_at": "2021-12-25T10:58:24Z",
      "updated_at": "2021-12-14T04:16:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require manual installation of an agent. Most agents include built-in tools to generate detailed logs for troubleshooting, auditing, and diagnostics. Related docs: For general agent troubleshooting, see Not seeing data. Learn about New Relic Diagnostics: a utility that automatically detects common problems. APM agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and troubleshooting instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 59.950127,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "sections": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " that automatically detects common problems. <em>APM</em> agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and <em>troubleshooting</em> instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability."
      },
      "id": "61bfb6ef196a67b63eef0936"
    }
  ],
  "/docs/apm/new-relic-apm/troubleshooting/errors-while-using-other-apm-software": [
    {
      "sections": [
        "Not seeing data",
        "Problem",
        "Solution",
        "APM agents",
        "Deleted or renamed applications in APM",
        "No connection to collector",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Other factors affecting access"
      ],
      "title": "Not seeing data",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "1351bcdb406ddc130d9e2388806e5c2c28e22f75",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/not-seeing-data/",
      "published_at": "2021-12-25T10:59:12Z",
      "updated_at": "2021-12-14T04:17:40Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You do not see data in the UI after installing a New Relic agent. Solution You should start seeing data within a few minutes after installing a New Relic agent and generating traffic for your app. If you don't see data, you can use the New Relic Diagnostics utility to automatically identify common issues. For additional troubleshooting tips, see the agent-specific docs.  APM agents Follow the troubleshooting procedures for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these troubleshooting steps that apply to all APM agents: Deleted or renamed applications in APM An app needs to stop reporting data for at least an hour before you can reuse that name. It also needs to reconnect with the New Relic collector (be restarted) before new data will be accepted. The app remains in the collector's cache for an hour before it is flushed. During that time it is marked as \"deleted,\" so no new data is accepted. Also, the data is associated with an executing app that has been deleted until the agent is restarted. For more information, see: Name your application Use multiple names for an app No connection to collector Your app will not be affected if the New Relic agent cannot connect to the collector. Data continues to be collected, and it is uploaded as soon as the connection is restored. While the network is down or the collector unavailable, you may see gaps where data is missing in the APM CPU and memory charts. The agent will continue attempting to reconnect, and when it succeeds, you will again see data appearing in the UI. During the time the agent is unable to communicate with the collector, it is still collecting data. Once it is able to connect again, it will upload the data and fill in the missing segment so there will not be any confusion about whether your application was down or just not reporting data. To save memory, the data will be aggregated and averaged over the period, so you will see flat bars and charts over the period when it was unable to communicate with the collector. Browser monitoring See Troubleshooting browser monitoring installation. Infrastructure monitoring Follow the troubleshooting procedures for your infrastructure agent: Linux Windows AWS integrations On-host integrations Mobile monitoring Follow the troubleshooting procedures for your mobile app: iOS Android Other factors affecting access For more on factors that can affect your ability to access New Relic features, see Factors affecting access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 65.27977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>APM</em> agents",
        "tags": "<em>Troubleshooting</em>",
        "body": " common issues. For additional <em>troubleshooting</em> tips, see the agent-specific docs.  <em>APM</em> agents Follow the <em>troubleshooting</em> procedures for your <em>APM</em> agent: C SDK Go Java .NET Node.js PHP Python Ruby In addition, you can try these <em>troubleshooting</em> steps that apply to all <em>APM</em> agents: Deleted or renamed"
      },
      "id": "603e8f2928ccbccc87eba750"
    },
    {
      "sections": [
        "Diagnostics CLI (nrdiag)",
        "Compatibility",
        "Get started"
      ],
      "title": "Diagnostics CLI (nrdiag)",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Diagnostics CLI (nrdiag)"
      ],
      "external_id": "a49c65c83dc0ad7450935af104e8fcb0d7490e2c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/diagnostics-cli-nrdiag/diagnostics-cli-nrdiag/",
      "published_at": "2021-12-25T10:55:10Z",
      "updated_at": "2021-12-14T04:11:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Download latest version The Diagnostics CLI (nrdiag) is a utility that automatically detects common problems with New Relic products. If the Diagnostics CLI detects a problem, it suggests troubleshooting steps. The Diagnostics CLI can automatically upload troubleshooting data to a New Relic account. The Diagnostics CLI is open source and is located in GitHub. For additional troubleshooting steps for your agent, check out Not seeing data. Here's an example of the Diagnostics CLI running on Ubuntu Linux. The program checks your New Relic agent configurations for issues and generates zipped troubleshooting logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: APM: Available for all APM agents except C SDK. For the Go agent, only basic connectivity checks are available. Browser monitoring: Browser agent detection Infrastructure monitoring: Linux and Windows agents Mobile agents: iOS and Android Synthetic monitoring: Containerized private minions (CPM) The Diagnostics CLI does not require superuser or admin permissions to run, although we recommend those permissions for some checks. It will return an error if it does not have permissions to read the files it scans. Get started To use the Diagnostics CLI: Run the Diagnostics CLI, including task suites and command line options as needed. Supply the -attach flag for uploading results to your New Relic account. Optional: Validate your config file settings. Interpret the output. Like any other New Relic tool, the Diagnostics CLI service is designed to protect you and your customers' data privacy. For detailed information, see our Diagnostics CLI licensing and security documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 60.752655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " <em>troubleshooting</em> logs that are ready to be attached to support tickets. Compatibility The Diagnostics CLI is available for Linux, macOS, and Windows. It can detect common configuration issues for: <em>APM</em>: Available for all <em>APM</em> agents except C SDK. For the Go agent, only basic connectivity checks"
      },
      "id": "604469f8e7b9d2abb65799f0"
    },
    {
      "sections": [
        "Generate New Relic agent logs for troubleshooting",
        "APM agent logging",
        "Infrastructure agent logging",
        "Mobile agent logging",
        "Logging for other New Relic tools"
      ],
      "title": "Generate New Relic agent logs for troubleshooting",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Troubleshooting"
      ],
      "external_id": "cc4e412038d0e125474a7ead0440a3cad51554dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/solve-common-issues/troubleshooting/generate-new-relic-agent-logs-troubleshooting/",
      "published_at": "2021-12-25T10:58:24Z",
      "updated_at": "2021-12-14T04:16:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic solutions require manual installation of an agent. Most agents include built-in tools to generate detailed logs for troubleshooting, auditing, and diagnostics. Related docs: For general agent troubleshooting, see Not seeing data. Learn about New Relic Diagnostics: a utility that automatically detects common problems. APM agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and troubleshooting instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 59.950115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "sections": "Generate New Relic agent logs for <em>troubleshooting</em>",
        "tags": "<em>Troubleshooting</em>",
        "body": " that automatically detects common problems. <em>APM</em> agent logging C SDK logs Go agent logs Java logs .NET logs Node.js logs PHP logs Python logs Ruby logs Infrastructure agent logging See Infrastructure agent logs. Mobile agent logging Android log settings iOS log settings Logging for other New Relic tools For log generation and <em>troubleshooting</em> instructions for tools not listed here, see the docs for a specific solution in New Relic Instant Observability."
      },
      "id": "61bfb6ef196a67b63eef0936"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/background-jobs-analysis-report": [
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly <em>performance</em> <em>report</em> ",
        "sections": "Weekly <em>performance</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": " than <em>APM</em>&#x27;s Service Level Agreement (SLA) <em>reports</em>. Important At this time, weekly <em>performance</em> <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly <em>performance</em> <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    },
    {
      "sections": [
        "Web transactions analysis report",
        "View the Web transactions analysis report",
        "Analyze your data"
      ],
      "title": "Web transactions analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "c853c17692f878455c491e9f1a78341059f6a199",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report/",
      "published_at": "2021-12-25T15:07:39Z",
      "updated_at": "2021-03-16T07:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's web transactions analysis report provides comparison information for web transactions, including the amount of time spent in throughput (requests per minute or rpm), total time in the web transaction, average time to execute it, and Apdex score. You can compare the past 24 hours of data with the previous 24 hour period, 7 days ago, and averages over the last 7 days. Use this information to analyze which web transactions consume the most time, have the most number of calls, have the greatest number of standard deviations, and more. This information can help you identify where to fine-tune your app. View the Web transactions analysis report To view the web transactions analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Web transactions. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. Apdex entries followed by an asterisk ( * ) indicate that more than one Apdex threshold was set for the given time period. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Use the Filter text box; for example, to report only on transactions that include user in the name. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View web transaction details Select the web transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Web transactions <em>analysis</em> <em>report</em>",
        "sections": "Web transactions <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "-tune your app. View the Web transactions <em>analysis</em> <em>report</em> To view the web transactions <em>analysis</em> <em>report</em> for your app: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Reports</em> &gt; Web transactions. The default <em>report</em> compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over"
      },
      "id": "603ebfc7196a67aa0da83daa"
    },
    {
      "sections": [
        "Database analysis report",
        "View the database analysis report",
        "Analyze your data"
      ],
      "title": "Database analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2627a588c2c730695f87d497407630fbd525ed16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/database-analysis-report/",
      "published_at": "2021-12-25T04:45:38Z",
      "updated_at": "2021-03-16T07:15:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's database analysis report allows you to analyze your application's performance from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute or rpm), total time spent in the operation, and average time to execute it. View the database analysis report To view the database analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Database. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Type the value in the Filter text box; for example, to show only transactions for Model operations that contain the value User. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to APM's Database and slow queries page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Database <em>analysis</em> <em>report</em>",
        "sections": "Database <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "<em>APM</em>&#x27;s database <em>analysis</em> <em>report</em> allows you to analyze your application&#x27;s <em>performance</em> from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute"
      },
      "id": "603ebf8964441fd4df4e887a"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/capacity-analysis-report": [
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly <em>performance</em> <em>report</em> ",
        "sections": "Weekly <em>performance</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": " than <em>APM</em>&#x27;s Service Level Agreement (SLA) <em>reports</em>. Important At this time, weekly <em>performance</em> <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly <em>performance</em> <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    },
    {
      "sections": [
        "Web transactions analysis report",
        "View the Web transactions analysis report",
        "Analyze your data"
      ],
      "title": "Web transactions analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "c853c17692f878455c491e9f1a78341059f6a199",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report/",
      "published_at": "2021-12-25T15:07:39Z",
      "updated_at": "2021-03-16T07:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's web transactions analysis report provides comparison information for web transactions, including the amount of time spent in throughput (requests per minute or rpm), total time in the web transaction, average time to execute it, and Apdex score. You can compare the past 24 hours of data with the previous 24 hour period, 7 days ago, and averages over the last 7 days. Use this information to analyze which web transactions consume the most time, have the most number of calls, have the greatest number of standard deviations, and more. This information can help you identify where to fine-tune your app. View the Web transactions analysis report To view the web transactions analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Web transactions. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. Apdex entries followed by an asterisk ( * ) indicate that more than one Apdex threshold was set for the given time period. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Use the Filter text box; for example, to report only on transactions that include user in the name. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View web transaction details Select the web transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Web transactions <em>analysis</em> <em>report</em>",
        "sections": "Web transactions <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "-tune your app. View the Web transactions <em>analysis</em> <em>report</em> To view the web transactions <em>analysis</em> <em>report</em> for your app: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Reports</em> &gt; Web transactions. The default <em>report</em> compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over"
      },
      "id": "603ebfc7196a67aa0da83daa"
    },
    {
      "sections": [
        "Database analysis report",
        "View the database analysis report",
        "Analyze your data"
      ],
      "title": "Database analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2627a588c2c730695f87d497407630fbd525ed16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/database-analysis-report/",
      "published_at": "2021-12-25T04:45:38Z",
      "updated_at": "2021-03-16T07:15:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's database analysis report allows you to analyze your application's performance from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute or rpm), total time spent in the operation, and average time to execute it. View the database analysis report To view the database analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Database. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Type the value in the Filter text box; for example, to show only transactions for Model operations that contain the value User. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to APM's Database and slow queries page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Database <em>analysis</em> <em>report</em>",
        "sections": "Database <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "<em>APM</em>&#x27;s database <em>analysis</em> <em>report</em> allows you to analyze your application&#x27;s <em>performance</em> from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute"
      },
      "id": "603ebf8964441fd4df4e887a"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/database-analysis-report": [
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly <em>performance</em> <em>report</em> ",
        "sections": "Weekly <em>performance</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": " than <em>APM</em>&#x27;s Service Level Agreement (SLA) <em>reports</em>. Important At this time, weekly <em>performance</em> <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly <em>performance</em> <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    },
    {
      "sections": [
        "Web transactions analysis report",
        "View the Web transactions analysis report",
        "Analyze your data"
      ],
      "title": "Web transactions analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "c853c17692f878455c491e9f1a78341059f6a199",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report/",
      "published_at": "2021-12-25T15:07:39Z",
      "updated_at": "2021-03-16T07:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's web transactions analysis report provides comparison information for web transactions, including the amount of time spent in throughput (requests per minute or rpm), total time in the web transaction, average time to execute it, and Apdex score. You can compare the past 24 hours of data with the previous 24 hour period, 7 days ago, and averages over the last 7 days. Use this information to analyze which web transactions consume the most time, have the most number of calls, have the greatest number of standard deviations, and more. This information can help you identify where to fine-tune your app. View the Web transactions analysis report To view the web transactions analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Web transactions. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. Apdex entries followed by an asterisk ( * ) indicate that more than one Apdex threshold was set for the given time period. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Use the Filter text box; for example, to report only on transactions that include user in the name. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View web transaction details Select the web transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Web transactions <em>analysis</em> <em>report</em>",
        "sections": "Web transactions <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "-tune your app. View the Web transactions <em>analysis</em> <em>report</em> To view the web transactions <em>analysis</em> <em>report</em> for your app: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Reports</em> &gt; Web transactions. The default <em>report</em> compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over"
      },
      "id": "603ebfc7196a67aa0da83daa"
    },
    {
      "sections": [
        "Background jobs analysis report",
        "View report in UI",
        "Analyze your data"
      ],
      "title": "Background jobs analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "7402d8928cc5753497e2cfec0104d992c2cddacd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/background-jobs-analysis-report/",
      "published_at": "2021-12-25T13:32:42Z",
      "updated_at": "2021-03-16T07:15:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Background jobs analysis report helps you analyze the performance of jobs and other non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The report shows comparison information from the past 24 hours back to the past 7 days, including the amount of time spent in throughput (requests per minute or rpm), total time spent in the job, and average time to execute it. View report in UI To view the Background jobs analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Background jobs. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, and then select Apply. Limit the transactions that appear Use the Filter text box. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49527,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Background jobs <em>analysis</em> <em>report</em>",
        "sections": "Background jobs <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "The Background jobs <em>analysis</em> <em>report</em> helps you analyze the <em>performance</em> of jobs and <em>other</em> non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The <em>report</em> shows comparison information from the past 24 hours back to the past 7 days"
      },
      "id": "603ebf8964441f0c044e885b"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/scalability-analysis-report": [
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly <em>performance</em> <em>report</em> ",
        "sections": "Weekly <em>performance</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": " than <em>APM</em>&#x27;s Service Level Agreement (SLA) <em>reports</em>. Important At this time, weekly <em>performance</em> <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly <em>performance</em> <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    },
    {
      "sections": [
        "Web transactions analysis report",
        "View the Web transactions analysis report",
        "Analyze your data"
      ],
      "title": "Web transactions analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "c853c17692f878455c491e9f1a78341059f6a199",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report/",
      "published_at": "2021-12-25T15:07:39Z",
      "updated_at": "2021-03-16T07:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's web transactions analysis report provides comparison information for web transactions, including the amount of time spent in throughput (requests per minute or rpm), total time in the web transaction, average time to execute it, and Apdex score. You can compare the past 24 hours of data with the previous 24 hour period, 7 days ago, and averages over the last 7 days. Use this information to analyze which web transactions consume the most time, have the most number of calls, have the greatest number of standard deviations, and more. This information can help you identify where to fine-tune your app. View the Web transactions analysis report To view the web transactions analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Web transactions. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. Apdex entries followed by an asterisk ( * ) indicate that more than one Apdex threshold was set for the given time period. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Use the Filter text box; for example, to report only on transactions that include user in the name. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View web transaction details Select the web transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Web transactions <em>analysis</em> <em>report</em>",
        "sections": "Web transactions <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "-tune your app. View the Web transactions <em>analysis</em> <em>report</em> To view the web transactions <em>analysis</em> <em>report</em> for your app: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Reports</em> &gt; Web transactions. The default <em>report</em> compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over"
      },
      "id": "603ebfc7196a67aa0da83daa"
    },
    {
      "sections": [
        "Database analysis report",
        "View the database analysis report",
        "Analyze your data"
      ],
      "title": "Database analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2627a588c2c730695f87d497407630fbd525ed16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/database-analysis-report/",
      "published_at": "2021-12-25T04:45:38Z",
      "updated_at": "2021-03-16T07:15:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's database analysis report allows you to analyze your application's performance from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute or rpm), total time spent in the operation, and average time to execute it. View the database analysis report To view the database analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Database. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Type the value in the Filter text box; for example, to show only transactions for Model operations that contain the value User. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to APM's Database and slow queries page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Database <em>analysis</em> <em>report</em>",
        "sections": "Database <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "<em>APM</em>&#x27;s database <em>analysis</em> <em>report</em> allows you to analyze your application&#x27;s <em>performance</em> from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute"
      },
      "id": "603ebf8964441fd4df4e887a"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report": [
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly <em>performance</em> <em>report</em> ",
        "sections": "Weekly <em>performance</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": " than <em>APM</em>&#x27;s Service Level Agreement (SLA) <em>reports</em>. Important At this time, weekly <em>performance</em> <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly <em>performance</em> <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    },
    {
      "sections": [
        "Database analysis report",
        "View the database analysis report",
        "Analyze your data"
      ],
      "title": "Database analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2627a588c2c730695f87d497407630fbd525ed16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/database-analysis-report/",
      "published_at": "2021-12-25T04:45:38Z",
      "updated_at": "2021-03-16T07:15:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's database analysis report allows you to analyze your application's performance from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute or rpm), total time spent in the operation, and average time to execute it. View the database analysis report To view the database analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Database. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Type the value in the Filter text box; for example, to show only transactions for Model operations that contain the value User. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to APM's Database and slow queries page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Database <em>analysis</em> <em>report</em>",
        "sections": "Database <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "<em>APM</em>&#x27;s database <em>analysis</em> <em>report</em> allows you to analyze your application&#x27;s <em>performance</em> from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute"
      },
      "id": "603ebf8964441fd4df4e887a"
    },
    {
      "sections": [
        "Background jobs analysis report",
        "View report in UI",
        "Analyze your data"
      ],
      "title": "Background jobs analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "7402d8928cc5753497e2cfec0104d992c2cddacd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/background-jobs-analysis-report/",
      "published_at": "2021-12-25T13:32:42Z",
      "updated_at": "2021-03-16T07:15:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Background jobs analysis report helps you analyze the performance of jobs and other non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The report shows comparison information from the past 24 hours back to the past 7 days, including the amount of time spent in throughput (requests per minute or rpm), total time spent in the job, and average time to execute it. View report in UI To view the Background jobs analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Background jobs. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, and then select Apply. Limit the transactions that appear Use the Filter text box. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49527,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Background jobs <em>analysis</em> <em>report</em>",
        "sections": "Background jobs <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "The Background jobs <em>analysis</em> <em>report</em> helps you analyze the <em>performance</em> of jobs and <em>other</em> non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The <em>report</em> shows comparison information from the past 24 hours back to the past 7 days"
      },
      "id": "603ebf8964441f0c044e885b"
    }
  ],
  "/docs/apm/reports/other-performance-analysis/weekly-performance-report": [
    {
      "sections": [
        "Web transactions analysis report",
        "View the Web transactions analysis report",
        "Analyze your data"
      ],
      "title": "Web transactions analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "c853c17692f878455c491e9f1a78341059f6a199",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/web-transactions-analysis-report/",
      "published_at": "2021-12-25T15:07:39Z",
      "updated_at": "2021-03-16T07:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's web transactions analysis report provides comparison information for web transactions, including the amount of time spent in throughput (requests per minute or rpm), total time in the web transaction, average time to execute it, and Apdex score. You can compare the past 24 hours of data with the previous 24 hour period, 7 days ago, and averages over the last 7 days. Use this information to analyze which web transactions consume the most time, have the most number of calls, have the greatest number of standard deviations, and more. This information can help you identify where to fine-tune your app. View the Web transactions analysis report To view the web transactions analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Web transactions. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. Apdex entries followed by an asterisk ( * ) indicate that more than one Apdex threshold was set for the given time period. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Use the Filter text box; for example, to report only on transactions that include user in the name. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View web transaction details Select the web transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.4953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Web transactions <em>analysis</em> <em>report</em>",
        "sections": "Web transactions <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "-tune your app. View the Web transactions <em>analysis</em> <em>report</em> To view the web transactions <em>analysis</em> <em>report</em> for your app: Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; <em>Reports</em> &gt; Web transactions. The default <em>report</em> compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over"
      },
      "id": "603ebfc7196a67aa0da83daa"
    },
    {
      "sections": [
        "Database analysis report",
        "View the database analysis report",
        "Analyze your data"
      ],
      "title": "Database analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2627a588c2c730695f87d497407630fbd525ed16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/database-analysis-report/",
      "published_at": "2021-12-25T04:45:38Z",
      "updated_at": "2021-03-16T07:15:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's database analysis report allows you to analyze your application's performance from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute or rpm), total time spent in the operation, and average time to execute it. View the database analysis report To view the database analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Database. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, then select Apply. Limit the transactions that appear Type the value in the Filter text box; for example, to show only transactions for Model operations that contain the value User. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to APM's Database and slow queries page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Database <em>analysis</em> <em>report</em>",
        "sections": "Database <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "<em>APM</em>&#x27;s database <em>analysis</em> <em>report</em> allows you to analyze your application&#x27;s <em>performance</em> from the database viewpoint, from the past 24 hours back to the past seven days. It shows comparison information for transactions, including the amount of time spent in throughput (operation requests per minute"
      },
      "id": "603ebf8964441fd4df4e887a"
    },
    {
      "sections": [
        "Background jobs analysis report",
        "View report in UI",
        "Analyze your data"
      ],
      "title": "Background jobs analysis report",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "7402d8928cc5753497e2cfec0104d992c2cddacd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/background-jobs-analysis-report/",
      "published_at": "2021-12-25T13:32:42Z",
      "updated_at": "2021-03-16T07:15:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Background jobs analysis report helps you analyze the performance of jobs and other non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The report shows comparison information from the past 24 hours back to the past 7 days, including the amount of time spent in throughput (requests per minute or rpm), total time spent in the job, and average time to execute it. View report in UI To view the Background jobs analysis report for your app: Go to one.newrelic.com > APM > (select an app) > Reports > Background jobs. The default report compares the last 24 hours with the previous 24-hour period, 7 days ago, and averages over the last 7 days. If you want to... Do this Change the amount of detail shown Select or clear the time period checkbox options, and then select Apply. Limit the transactions that appear Use the Filter text box. Change the sort order Select any column's title to sort in ascending or descending order. Select what data appears as a bar chart Select a Plotting option. View transaction details Select the transaction's title to go directly to the APM Transactions page. Return the original settings Select the reset link. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.49527,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Background jobs <em>analysis</em> <em>report</em>",
        "sections": "Background jobs <em>analysis</em> <em>report</em>",
        "tags": "<em>Other</em> <em>performance</em> <em>analysis</em>",
        "body": "The Background jobs <em>analysis</em> <em>report</em> helps you analyze the <em>performance</em> of jobs and <em>other</em> non-web transactions running in production that use frameworks instrumented by New Relic, such as DelayedJob and Resque. The <em>report</em> shows comparison information from the past 24 hours back to the past 7 days"
      },
      "id": "603ebf8964441f0c044e885b"
    }
  ],
  "/docs/apm/reports/service-level-agreements/api-examples-sla-reports": [
    {
      "sections": [
        "APM SLA reports",
        "Important",
        "View SLA reports",
        "View metric trends",
        "Analyze your data"
      ],
      "title": "APM SLA reports",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Service level agreements"
      ],
      "external_id": "f66a2ccdfd774a7befcd9df4bd8a9d7f633e234c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/service-level-agreements/apm-sla-reports/",
      "published_at": "2021-12-25T02:31:03Z",
      "updated_at": "2021-12-04T15:20:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM provides service level agreement (SLA) reports. SLA reports help you better understand your application performance by showing application downtime and trends over time. SLA reports for an application only include web transactions. If your application creates only non-web transactions, New Relic does not produce SLA reports for that app. SLA reports can be viewed in APM or downloaded as comma-separated value (.csv) files. Depending on your account level's data retention policy, you can view daily, weekly, or monthly reports. Important On top of the standard APM SLA reports described in this document, New Relic has developed an advanced Service Levels management feature, with improved functionality. Check out our beta now! View SLA reports To view the SLA reports for your app: Go to one.newrelic.com > Applications > (select an app) > Reports > SLA. The report defaults to the Weekly SLA report tab. SLA report data shows the account owner's time zone, with periods beginning and ending at midnight in that time zone. If you have not enabled browser for your app, the SLA report shows links to requests, response time, and Apdex only for your application server. If you want to... Do this Show or hide details Select the End user tier (if available) or Application server heading. View another time period Select the tab for daily, weekly, or monthly SLA reports if available. Save or export the report Select Download this report as .csv to create a report file with comma-separated values. View metric trends To drill down into detailed information, select the link. This includes: End users (from browser): Page views, load time, and Apdex Application server (from APM agents, such as Java or Ruby): Requests, response time, and Apdex The metric detail window below the report list shows trends over the selected period (12 days, weeks, or months). Use any of New Relic's available standard page functions to drill down into detailed information. In addition: To view other details, select its link. To clear the details and return to the main SLA report, select the tab. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 243.88734,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>APM</em> SLA <em>reports</em>",
        "sections": "<em>APM</em> SLA <em>reports</em>",
        "tags": "<em>Service</em> <em>level</em> <em>agreements</em>",
        "body": "<em>APM</em> provides <em>service</em> <em>level</em> <em>agreement</em> (SLA) <em>reports</em>. SLA <em>reports</em> help you better understand your application performance by showing application downtime and trends over time. SLA <em>reports</em> for an application only include web transactions. If your application creates only non-web transactions, New"
      },
      "id": "603ebe4d196a679981a83dc0"
    },
    {
      "sections": [
        "Operations review: assess and optimize team progress",
        "Prerequisites",
        "1. Assemble a cross-functional team to review service delivery",
        "Tip",
        "2. Review service records and note key metrics",
        "Daily uptime",
        "Device performance breakdown",
        "Top URL performance",
        "Memory usage",
        "Server CPU",
        "3. Summarize events related to application alerts, downtime, and errors"
      ],
      "title": "Operations review: assess and optimize team progress",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "d49e90d09db035b5685c49914cf645121b02de31",
      "image": "https://docs.newrelic.com/static/927c2719a1b7aebc3bb504582337219f/1fbe8/Insights-Devops-Catalyst-Example.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/operations-review-assess-optimize-team-progress/",
      "published_at": "2021-12-25T11:14:52Z",
      "updated_at": "2021-12-04T23:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a DevOps world, a deep understanding of customer expectations and your progress in meeting those expectations is vital to providing stability, maintaining goodwill with your users, and increasing business value. With New Relic you can measure the success of your DevOps initiatives and learn how to identify, resolve, and decrease any gaps in your DevOps performance. In this tutorial, you’ll gather key service delivery stakeholders to assess your team's progress against service level objectives (SLOs) and service level agreements (SLAs), while facilitating further optimizations. Prerequisites This tutorial assumes you’ve completed the Establish objectives and baseline tutorial. 1. Assemble a cross-functional team to review service delivery The first (and most important step) is assembling the right team. Identify the proper stakeholders and representatives to play active parts in the operations review process. This team should be comprised of individuals who develop applications, work with service delivery, maintain your ecosystem, and resolve problems for customers. While operations review teams often focus on technical members, the best teams have broad representation across the company, including representatives from Business Operations, Marketing, and Support. These cross-functional teams help ensure that the service delivery process is strongly integrated with customer expectations. If you can specifically identify how technical improvements meet customer expectations and positively impact the business’s bottom line, then your operations team is functioning at optimal levels. Tip Ideally, the cross-functional operations review team should also be the team that defines your SLOs. If this is not possible, try to ensure that some members of the operations review team are also on the team responsible for SLOs. 2. Review service records and note key metrics Create a regular meeting to track your service records. New Relic recommends reviewing your previous service records, and pinpointing specific metrics to analyze at every review. For example, start with application state, alert conditions, and runtime anomalies. Look at the same metrics on two separate occasions to identify and assess patterns, inconsistencies, and anomalies. Monitor these metrics using the service delivery Insights dashboards you created in the Establish objectives and baselines tutorial. The widgets on these dashboards provide a high-level overview of the relationships between different performance indicators and baselines: insights.newrelic.com > (select a dashboard): Use dashboards to visualize metrics related to service delivery. When conducting a thorough performance review, make several dashboards that have corresponding widgets. Use these dashboards to hone-in on two specific time periods that you want to compare. This comparative analysis could cover everything from Infrastructure or browser performance, to Synthetics testing or business impact. To get started with performance indicators in Insights, read the following example queries. These queries provide information that you can consider incorporating for the operations review. Daily uptime SELECT percentage(count(result), where result = 'SUCCESS') from SyntheticCheck since 1 Day ago Copy Create dashboards that are dedicated to the functionality that drives your software development process, such as testing. For example, collect related metrics on uptime, types of monitors, geo-locations, and other data points that are required for appropriately measuring SLAs. The following dashboard provides such an example: insights.newrelic.com > (select a dashboard): Track your relevant SLAs together in one dashboard. Device performance breakdown SELECT count(*) as '# Pages',average(duration) as 'AVG',percentile(duration,50,75) as '%',average(duration - backendDuration) as 'Front',average(backendDuration) as 'Back',average(connectionSetupDuration) as 'Connection',average(domProcessingDuration) as 'DOM Processing',average(pageRenderingDuration) as 'Page Rendering' FROM PageView FACET deviceType LIMIT 3 SINCE 1 day ago Copy Top URL performance SELECT count(*) as '# Pages',average(duration) as 'AVG',percentile(duration,50,75) as '%',average(duration - backendDuration) as 'Front',average(backendDuration) as 'Back',average(connectionSetupDuration) as 'Connection',average(domProcessingDuration) as 'DOM Processing',average(pageRenderingDuration) as 'Page Rendering' FROM PageView facet pageUrl SINCE 1 day ago limit 30 Copy Memory usage SELECT average(memoryUsedBytes) /1000000 AS 'Avg MB Used', average(memoryFreeBytes)/1000000 AS 'Avg MB Free', average(memoryFreeBytes/memoryTotalBytes)*100 as 'Memory used %' FROM SystemSample since 30 minutes ago Copy Server CPU SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400 Copy Combine the results into a single dashboard to help drive decisions during your operations review. Dashboards that give a brief overview of performance across your entire application stack are invaluable for cross-functional team reviews. Tip Beyond Insights, the APM reports allow you to see how you’re performing on a daily, weekly, and monthly basis with built in SLA reports and other detailed reports. The out-of-the-box details from these reports give your operations team a launch pad for conversations about progress against objectives and overall performance. 3. Summarize events related to application alerts, downtime, and errors Now that you’ve gathered data about your service delivery, the next step is to dive deeper into specific incidents that warrant further investigation or surface a need for broader team action. For example, notable downtime and errors are key areas to investigate as a team. After completing the Setup proactive alerting tutorial, you can explore notifications of violations as they occur. Once these violations are brought to your attention, acknowledge the specific incident and have an ongoing record of both opened and closed incidents. Use the incident reports as a focal point for discussion of gaps. alerts.newrelic.com > Incidents: Identify performance issues and SLA gaps with New Relic Alerts incident reports. Ultimately, it’s important to solicit feedback from the cross-functional team on the causes of the incidents to determine how you can improve service delivery processes to prevent reoccurrences. One approach might be to focus on one or two notable incidents, use the New Relic UI to walk through the data points leading up to those incidents, and assess the actions that occurred. Summarize the incident and the cross-functional feedback on causes and potential solutions as succinctly as possible. Over time, you’ll notice patterns that will require deeper action.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.53282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Assemble a cross-functional team to review <em>service</em> delivery",
        "body": " to identify, resolve, and decrease any gaps in your DevOps performance. In this tutorial, you’ll gather key <em>service</em> delivery stakeholders to assess your team&#x27;s progress against <em>service</em> <em>level</em> objectives (SLOs) and <em>service</em> <em>level</em> <em>agreements</em> (SLAs), while facilitating further optimizations"
      },
      "id": "60440e5364441fb0c6378ef6"
    },
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 62.18776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly performance <em>report</em> ",
        "sections": "Weekly performance <em>report</em>",
        "tags": "<em>Reports</em>",
        "body": " than <em>APM</em>&#x27;s <em>Service</em> <em>Level</em> <em>Agreement</em> (SLA) <em>reports</em>. Important At this time, weekly performance <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly performance <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    }
  ],
  "/docs/apm/reports/service-level-agreements/apm-sla-reports": [
    {
      "sections": [
        "API examples for SLA reports",
        "Tip",
        "Browser metrics for SLAs",
        "App server metrics for SLAs",
        "Tips for collecting metrics",
        "Examples",
        "REST API v2 commands",
        "Browser load time and page view count (v2)",
        "App response time and request count (v2)",
        "Apdex SLA data (v2)",
        "REST API v1 commands (deprecated)",
        "Browser load time and page view count (v1)",
        "App response time and request count (v1)",
        "Apdex SLA data (v1)",
        "Analyze your data"
      ],
      "title": "API examples for SLA reports",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Service level agreements"
      ],
      "external_id": "3b4dafc002932fc100b6375a3ae87b01350d57fc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/service-level-agreements/api-examples-sla-reports/",
      "published_at": "2021-12-25T07:04:15Z",
      "updated_at": "2021-09-14T10:19:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic stores SLA data forever for eligible accounts, so you can use the New Relic REST API to generate service level agreement reports over any time period. For example, you can create SLA reports going back more than 12 days, weeks, or months. Tip Access to this feature depends on your subscription level. Browser metrics for SLAs Browser metrics for the End user tier are available only if you have installed the browser agent. Browser (End user tier) SLA metric name:value (and formula) Page Views thousands EndUser : call_count Load time sec EndUser : average_response_time Apdex EndUser/Apdex : score % Satisfied EndUser/Apdex : s divided by EndUser : call_count % Tolerating EndUser/Apdex : t divided by Enduser : call_count % Frustrated EndUser/Apdex : f divided by Enduser : call_count App server metrics for SLAs Here are the SLA metrics for application servers. App server SLA metric name:value (and formula) Requests millions HttpDispatcher : call_count (scaled appropriately) Resp. time ms HttpDispatcher : average_response_time (multiplied by 1000) Apdex Apdex : score % Satisfied Apdex : s divided by Apdex : count % Tolerating Apdex : t divided by Apdex : count % Frustrated Apdex : f divided by Apdex : count Tips for collecting metrics Here are some tips for planning which metrics to collect. SLA tips Comments Requirements When using the cURL command examples, be sure to replace the placeholder text with your account ID, an API key, and the application ID. Time ranges You are not limited to standard day, week, or month time ranges. For example, you can extract metric data for a \"holiday weekend\" from 12/23 to 12/26 or \"the 20 minutes after our site had problems\" or whatever other period interests you. UTC XML time format You must specify the time in UTC XML format, so be sure to adjust for your time zone compared to UTC. For example, New Relic starts at 16:00:00 on the day before the selected data, since New Relic headquarters are in UTC-8. Summary reports When requesting metrics to use with summary reports, include the query string parameter summarize=true (v2) or summary=1 (v1) as shown in the examples. Scaled statistics Your report has some statistics that are scaled in the SLA reports in New Relic's user interface. New Relic changes the scale of page views in your report to show small numbers. Depending on your traffic, typically it might be displayed in thousands, millions, or billions. Recommendation: To avoid a string of zeroes, divide this number appropriately for your own purposes. End user statistics End user statistics will reflect only the calls in which the agent gathered browser data. For example, end user stats may not appear in situations such as: Browser types Clients (they might have disabled the JavaScript agent, or blocked traffic to New Relic sites for JavaScript code's location Transactions not in one of those categories, in case the page load did not complete for any reason This is why there are fewer (sometimes many fewer) page views in the End User (browser) data section than in the App server data section. Examples The following sections contain code examples to acquire the data for values described above for the Daily (24hr) SLA statistics in the default GMT/UTC time zone. Adjust the from= and to= for your time range as desired. There are syntactical differences between New Relic's REST API v2 and v1. The examples show how to use each. REST API v2 commands Browser load time and page view count (v2) To obtain the browser (EndUser/RUM) load time and page view count for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\"\\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=EndUser&values[]=call_count&values[]=average_response_time&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=EndUser&values[]=call_count&values[]=average_response_time&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy App response time and request count (v2) To obtain the Application response time and request count for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=HttpDispatcher&values[]=average_response_time&values[]=call_count&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=HttpDispatcher&values[]=average_response_time&values[]=call_count&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy Apdex SLA data (v2) To obtain the Apdex related data for v2, from the command line, type: curl -X GET \"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml\" \\ -H \"Api-Key:$API_KEY\" -i \\ -d 'names[]=Apdex&names[]=EndUser/Apdex&from=2014-06-09T00:00:00+00:00&to=2014-06-09T23:00:00+00:00&summarize=true' Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.http_get(\"https://api.newrelic.com/v2/applications/$APP_ID/metrics/data.xml?names[]=EndUser/Apdex&from=2012-01-01T00:00:00+00:00&to=2012-01-08T00:00:00+00:00&summarize=true\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" curl.header_in_body=true end puts response.body_str Copy REST API v1 commands (deprecated) REST API v1 is deprecated. Browser load time and page view count (v1) To obtain the browser (EndUser/RUM) load time and page view count for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=EndUser&field=call_count&field=average_response_time&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=EndUser&field=call_count&field=average_response_time&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy App response time and request count (v1) To obtain the Application response time and request count for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=HttpDispatcher&field=average_response_time&field=call_count&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=HttpDispatcher&field=average_response_time&field=call_count&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy Apdex SLA data (v1) To obtain the Apdex related data for v1, from the command line, type: curl -gH \"api-key:$API_KEY\" \"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=Apdex&metrics[]=EndUser/Apdex&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\" Copy In Ruby: require 'rubygems' require 'curb' response = Curl::Easy.perform(\"https://api.newrelic.com/api/v1/accounts/$ACCOUNT_ID/applications/$APP_ID/data.xml?metrics[]=Apdex&metrics[]=EndUser/Apdex&summary=1&begin=2012-01-01T00:00:00Z&end=2012-01-08T00:00:00Z\") do |curl| curl.headers[\"api-key\"] = \"$API_KEY\" end puts response.body_str Copy Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.64711,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "API examples for SLA <em>reports</em>",
        "sections": "API examples for SLA <em>reports</em>",
        "tags": "<em>Service</em> <em>level</em> <em>agreements</em>",
        "body": "New Relic stores SLA data forever for eligible accounts, so you can use the New Relic REST API to generate <em>service</em> <em>level</em> <em>agreement</em> <em>reports</em> over any time period. For example, you can create SLA <em>reports</em> going back more than 12 days, weeks, or months. Tip Access to this feature depends on your"
      },
      "id": "603ebe82196a67631fa83dd7"
    },
    {
      "sections": [
        "Operations review: assess and optimize team progress",
        "Prerequisites",
        "1. Assemble a cross-functional team to review service delivery",
        "Tip",
        "2. Review service records and note key metrics",
        "Daily uptime",
        "Device performance breakdown",
        "Top URL performance",
        "Memory usage",
        "Server CPU",
        "3. Summarize events related to application alerts, downtime, and errors"
      ],
      "title": "Operations review: assess and optimize team progress",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "New Relic solutions",
        "Measure DevOps success"
      ],
      "external_id": "d49e90d09db035b5685c49914cf645121b02de31",
      "image": "https://docs.newrelic.com/static/927c2719a1b7aebc3bb504582337219f/1fbe8/Insights-Devops-Catalyst-Example.png",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/new-relic-solutions/measure-devops-success/operations-review-assess-optimize-team-progress/",
      "published_at": "2021-12-25T11:14:52Z",
      "updated_at": "2021-12-04T23:07:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In a DevOps world, a deep understanding of customer expectations and your progress in meeting those expectations is vital to providing stability, maintaining goodwill with your users, and increasing business value. With New Relic you can measure the success of your DevOps initiatives and learn how to identify, resolve, and decrease any gaps in your DevOps performance. In this tutorial, you’ll gather key service delivery stakeholders to assess your team's progress against service level objectives (SLOs) and service level agreements (SLAs), while facilitating further optimizations. Prerequisites This tutorial assumes you’ve completed the Establish objectives and baseline tutorial. 1. Assemble a cross-functional team to review service delivery The first (and most important step) is assembling the right team. Identify the proper stakeholders and representatives to play active parts in the operations review process. This team should be comprised of individuals who develop applications, work with service delivery, maintain your ecosystem, and resolve problems for customers. While operations review teams often focus on technical members, the best teams have broad representation across the company, including representatives from Business Operations, Marketing, and Support. These cross-functional teams help ensure that the service delivery process is strongly integrated with customer expectations. If you can specifically identify how technical improvements meet customer expectations and positively impact the business’s bottom line, then your operations team is functioning at optimal levels. Tip Ideally, the cross-functional operations review team should also be the team that defines your SLOs. If this is not possible, try to ensure that some members of the operations review team are also on the team responsible for SLOs. 2. Review service records and note key metrics Create a regular meeting to track your service records. New Relic recommends reviewing your previous service records, and pinpointing specific metrics to analyze at every review. For example, start with application state, alert conditions, and runtime anomalies. Look at the same metrics on two separate occasions to identify and assess patterns, inconsistencies, and anomalies. Monitor these metrics using the service delivery Insights dashboards you created in the Establish objectives and baselines tutorial. The widgets on these dashboards provide a high-level overview of the relationships between different performance indicators and baselines: insights.newrelic.com > (select a dashboard): Use dashboards to visualize metrics related to service delivery. When conducting a thorough performance review, make several dashboards that have corresponding widgets. Use these dashboards to hone-in on two specific time periods that you want to compare. This comparative analysis could cover everything from Infrastructure or browser performance, to Synthetics testing or business impact. To get started with performance indicators in Insights, read the following example queries. These queries provide information that you can consider incorporating for the operations review. Daily uptime SELECT percentage(count(result), where result = 'SUCCESS') from SyntheticCheck since 1 Day ago Copy Create dashboards that are dedicated to the functionality that drives your software development process, such as testing. For example, collect related metrics on uptime, types of monitors, geo-locations, and other data points that are required for appropriately measuring SLAs. The following dashboard provides such an example: insights.newrelic.com > (select a dashboard): Track your relevant SLAs together in one dashboard. Device performance breakdown SELECT count(*) as '# Pages',average(duration) as 'AVG',percentile(duration,50,75) as '%',average(duration - backendDuration) as 'Front',average(backendDuration) as 'Back',average(connectionSetupDuration) as 'Connection',average(domProcessingDuration) as 'DOM Processing',average(pageRenderingDuration) as 'Page Rendering' FROM PageView FACET deviceType LIMIT 3 SINCE 1 day ago Copy Top URL performance SELECT count(*) as '# Pages',average(duration) as 'AVG',percentile(duration,50,75) as '%',average(duration - backendDuration) as 'Front',average(backendDuration) as 'Back',average(connectionSetupDuration) as 'Connection',average(domProcessingDuration) as 'DOM Processing',average(pageRenderingDuration) as 'Page Rendering' FROM PageView facet pageUrl SINCE 1 day ago limit 30 Copy Memory usage SELECT average(memoryUsedBytes) /1000000 AS 'Avg MB Used', average(memoryFreeBytes)/1000000 AS 'Avg MB Free', average(memoryFreeBytes/memoryTotalBytes)*100 as 'Memory used %' FROM SystemSample since 30 minutes ago Copy Server CPU SELECT average(cpuPercent) FROM SystemSample since 3 hours ago facet hostname limit 400 Copy Combine the results into a single dashboard to help drive decisions during your operations review. Dashboards that give a brief overview of performance across your entire application stack are invaluable for cross-functional team reviews. Tip Beyond Insights, the APM reports allow you to see how you’re performing on a daily, weekly, and monthly basis with built in SLA reports and other detailed reports. The out-of-the-box details from these reports give your operations team a launch pad for conversations about progress against objectives and overall performance. 3. Summarize events related to application alerts, downtime, and errors Now that you’ve gathered data about your service delivery, the next step is to dive deeper into specific incidents that warrant further investigation or surface a need for broader team action. For example, notable downtime and errors are key areas to investigate as a team. After completing the Setup proactive alerting tutorial, you can explore notifications of violations as they occur. Once these violations are brought to your attention, acknowledge the specific incident and have an ongoing record of both opened and closed incidents. Use the incident reports as a focal point for discussion of gaps. alerts.newrelic.com > Incidents: Identify performance issues and SLA gaps with New Relic Alerts incident reports. Ultimately, it’s important to solicit feedback from the cross-functional team on the causes of the incidents to determine how you can improve service delivery processes to prevent reoccurrences. One approach might be to focus on one or two notable incidents, use the New Relic UI to walk through the data points leading up to those incidents, and assess the actions that occurred. Summarize the incident and the cross-functional feedback on causes and potential solutions as succinctly as possible. Over time, you’ll notice patterns that will require deeper action.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.53282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "1. Assemble a cross-functional team to review <em>service</em> delivery",
        "body": " to identify, resolve, and decrease any gaps in your DevOps performance. In this tutorial, you’ll gather key <em>service</em> delivery stakeholders to assess your team&#x27;s progress against <em>service</em> <em>level</em> objectives (SLOs) and <em>service</em> <em>level</em> <em>agreements</em> (SLAs), while facilitating further optimizations"
      },
      "id": "60440e5364441fb0c6378ef6"
    },
    {
      "sections": [
        "Weekly performance report",
        "Important",
        "View example report details",
        "Selected applications",
        "Opt in or out of report emails",
        "Analyze your data"
      ],
      "title": "Weekly performance report ",
      "type": "docs",
      "tags": [
        "APM",
        "Reports",
        "Other performance analysis"
      ],
      "external_id": "2648d299a52f3e5694035bb27a16536934c8dc89",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/reports/other-performance-analysis/weekly-performance-report/",
      "published_at": "2021-12-25T02:32:04Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Every Monday, New Relic sends a weekly performance report via email to any of your account's users who have selected to receive this report. The email report contains summary performance metrics for the past week for a select group of your applications. The weekly performance report is different than APM's Service Level Agreement (SLA) reports. Important At this time, weekly performance reports are not available for accounts in the EU region. View example report details To see an example of a weekly performance report for your account: From the account dropdown, select User preferences. Select Weekly summaries and select See sample email. The performance report is split into sections: Section Description Featured app This provides both throughput pattern and performance metrics for the application with the highest call count in your account. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. All apps report This section provides important performance metrics for the 20 applications in your account with the highest call count. Metrics in this list include uptime, Apdex, load time, and throughput. Recent events This section contains any recent alerts, deployments you have made to your app, or other events that are recorded for applications in your account. Selected applications New Relic selects the top 20 apps by call count that meet these criteria: The app must have at least 25 requests per minute (rpm) throughput. The app must include web transactions. Applications with linked browser monitoring will be prioritized over those that don't, even if the call count is lower. Opt in or out of report emails To manage your weekly performance report emails, go to one.newrelic.com, click the account dropdown, and select User preferences. Note that you opt in/out separately for every New Relic account you have access to. Analyze your data APM includes several reports in the user interface. To gather, analyze, and visualize data about your software in other formats, use query builder.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 62.18776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Weekly performance <em>report</em> ",
        "sections": "Weekly performance <em>report</em>",
        "tags": "<em>Reports</em>",
        "body": " than <em>APM</em>&#x27;s <em>Service</em> <em>Level</em> <em>Agreement</em> (SLA) <em>reports</em>. Important At this time, weekly performance <em>reports</em> are not available for accounts in the EU region. View example <em>report</em> details To see an example of a weekly performance <em>report</em> for your account: From the account dropdown, select User preferences"
      },
      "id": "603ec4e8196a67c3daa83dea"
    }
  ],
  "/docs/apm/transactions/cross-application-traces/introduction-cross-application-traces": [
    {
      "sections": [
        "Troubleshoot cross application tracing",
        "Agent versions and protocols",
        "Config file requirements",
        "High throughput apps",
        "Proxies",
        "Multi-threaded processing (Java)",
        "Multiple accounts"
      ],
      "title": "Troubleshoot cross application tracing",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Cross application traces"
      ],
      "external_id": "fa4ecccd4906018947e6e36fbe96b78d6c005893",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/cross-application-traces/troubleshoot-cross-application-tracing/",
      "published_at": "2021-12-25T06:13:27Z",
      "updated_at": "2021-07-16T00:57:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are troubleshooting tips when using cross application traces. Note that this feature is not the same as distributed tracing, which is preferred over cross application tracing. Agent versions and protocols Make sure you meet these requirements for your agent's version, protocols, interfaces, or message queue libraries. If you are using a protocol that is not listed here, you will not see a connection between your applications. Agent version Notes C SDK Use distributed tracing. Go 1.11 or higher HTTP, HTTPS Java 3.9.0 or higher HTTP, HTTPs, JMS 1.1, RabbitMQ The Java agent also supports several message queue libraries, including those that use the JMS 1.1 interface. .NET 4.2 or higher HTTP, and supported .NET messaging systems Node.js 2.0.0 or higher HTTP, HTTPS, RabbitMQ PHP 4.19.0 or higher HTTP, HTTPS, and supported PHP message queuing systems Python 2.38.0.31 or higher HTTP, HTTPS, and supported Python message queuing systems Ruby 4.3.0 or higher HTTP, HTTPS, RabbitMQ Config file requirements In general, New Relic's cross application tracing feature is enabled by default. Requirements to change your configuration file vary, depending on your New Relic agent: C SDK (not supported) Go (not supported) Java .NET Node.js (no specific config file settings needed for Node.js) PHP Python Ruby High throughput apps Cross application traces rely on transaction events to associate related transactions. If you have a high throughput application, your agent may reach the maximum number of events that it can record in a minute and will fall back to sampling events. If a transaction’s events are sampled, you may see an incomplete cross application trace, including sometimes only the transactions that you are focused on. If your application has high throughput, some cross application traces will appear incomplete, sometimes with no links. Try viewing a different transaction trace. To reduce or eliminate sampling, you can also adjust the number of transaction events stored in your agent configuration. High throughput apps Troubleshooting tips Java From the transaction_events stanza, adjust the setting for max_samples_stored. Ruby Adjust the setting for analytics_events.max_samples_stored. Proxies If you expect to see a cross application trace link but it consistently does not appear, there may be a proxy or broker between your application’s communication. Cross application tracing relies on HTTP headers and JMS properties being passed from one application to other. HTTP proxies and message brokers sometimes strip those headers. Multi-threaded processing (Java) If one or more of your Java applications uses an async or \"reactive\" programming model, a transaction's activity may span across multiple threads. New Relic supports the Play framework and Servlet Async but not all async frameworks. For unsupported frameworks, activity on other threads is not reported as part of the transaction. Calls to other applications will not be traced. Multiple accounts Currently cross application traces do not cross New Relic accounts. If you have multiple New Relic accounts (including child accounts), you will only see traces for applications within one account. Our distributed tracing feature does cross account boundaries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.32327,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot <em>cross</em> <em>application</em> <em>tracing</em>",
        "sections": "Troubleshoot <em>cross</em> <em>application</em> <em>tracing</em>",
        "tags": "<em>Cross</em> <em>application</em> <em>traces</em>",
        "body": " (not supported) Go (not supported) Java .NET Node.js (no specific config file settings needed for Node.js) PHP Python Ruby High throughput apps <em>Cross</em> <em>application</em> <em>traces</em> rely on transaction events to associate related <em>transactions</em>. If you have a high throughput <em>application</em>, your agent may reach the maximum"
      },
      "id": "603ec3cfe7b9d22f912a07af"
    },
    {
      "sections": [
        "Transactions in New Relic's APM",
        "What is a transaction?",
        "Types of transactions",
        "Transaction sub-types",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.JS",
        "PHP",
        "Python",
        "Ruby",
        "Transaction segments",
        "Transaction naming",
        "Monitoring transactions",
        "Tip",
        "Query transactions"
      ],
      "title": "Transactions in New Relic's APM",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "2a96f455cbf6dfdc5dda2363ba4e69b6f9dba159",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/transactions-new-relic-apm/",
      "published_at": "2021-12-25T02:29:17Z",
      "updated_at": "2021-09-14T02:55:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by New Relic and how transactions are reported. What is a transaction? At New Relic, a transaction is defined as one logical unit of work in a software application. Specifically, it refers to the function calls and method calls that make up that unit of work. For APM, it will often refer to a web transaction, which represents activity that happens from when the application receives a web request to when the response is sent. When you install APM in a supported system, it begins automatically reporting web requests and other important functions and methods. To supplement the default level of monitoring, you can set up custom instrumentation to report additional transactions. Some frameworks do not have a natural concept of a transaction. In other words, there are no predefined pathways that can easily be recognized or monitored as transactions. To define transactions in such frameworks, you can use custom instrumentation. Types of transactions Cumulative transaction data appears in APM on the Transactions page. The two main categories of transactions are web and non-web: Web: Transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. Non-web: Non-web transactions are not initiated with a web request. They can include non-web worker processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. Go Doesn't apply. Java Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. framework The invocation of a framework that is recognized by the agent. .NET Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. ASP The invocation of an ASP.NET request. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. MonoRail The invocation of a MonoRail request. MVC The invocation of a MVC request. OpenRasta The invocation of an OpenRasta request. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. WCF The invocation of a WCF request. WebAPI The invocation of a WebAPI request. WebService The invocation of a WebService request. Node.JS Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Message Message broker or queue communication. PHP Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. PHP The invocation of a background PHP job. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. unknown The invocation of an unknown web transaction or background job. URI The invocation of the named URI. Usually used when a framework or language level transaction name cannot be determined. Python Sub-type Description ASGIWeb WebTransaction from an ASGI application. Message Message broker or queue communication. WSGIWeb WebTransaction from a WSGI application. Ruby Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Transaction segments The individual functions and calls that make up a transaction are called segments. For example external service calls and database calls are segments, and both have their own UI pages in APM. The APM Transactions page displays aggregate transaction segment data. To add segments to a transaction, use custom instrumentation. To see the segments of a specific transaction, use transaction traces. Transaction naming For supported frameworks, transaction names can come from various sources, such as the name given to the transaction by the framework, function names detected during the transaction, or a web request's URL. For transactions that produce many names with a similar format, we consolidate those into general transaction categories. For example, a transaction might be displayed as /user/*/control_panel, where the * represents different user names. To rename transactions or adjust how names are consolidated, use custom instrumentation. Monitoring transactions Here are some other ways you can use APM to monitor transactions: If you want to monitor... Use this... Transactions important to your business Create key transactions, which emphasizes them in the UI and lets you set a custom level of monitoring for them. Async activity Follow the procedures to set up asynchronous activity for your specific APM language agent. Activity across applications Linking transactions across applications gives you more detail about business-relevant application activity. For more information, see the documentation about distributed tracing and cross application traces. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query transactions Transactions are available for querying with an in-depth set of default attributes attached. Using these attributes, you can run queries and create custom charts that APM does not provide by default. For information on how to query your data using our UI or NRQL, see Query New Relic data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.6905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "sections": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "tags": "<em>Transactions</em>",
        "body": ". For more information, see the documentation about distributed tracing and <em>cross</em> <em>application</em> <em>traces</em>. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query <em>transactions</em> <em>Transactions</em> are available for querying with an in-depth set of default attributes"
      },
      "id": "603e8774e7b9d2a6a42a07bc"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.961296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, transaction <em>traces</em> record in-depth details about your <em>application</em>&#x27;s <em>transactions</em> and database calls. You can edit the default settings for transaction <em>traces</em>. Configure transaction <em>trace</em> settings via agent You can customize your transaction <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/apm/transactions/cross-application-traces/troubleshoot-cross-application-tracing": [
    {
      "sections": [
        "Introduction to cross application traces",
        "What is cross application tracing?",
        "Important",
        "Security considerations"
      ],
      "title": "Introduction to cross application traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Cross application traces"
      ],
      "external_id": "54c3bf54fc29f6ea190f7cd3dc9e1e1c15a92193",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/cross-application-traces/introduction-cross-application-traces/",
      "published_at": "2021-12-25T13:34:23Z",
      "updated_at": "2021-09-14T10:20:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "APM's cross application tracing lets you link transactions between your APM-monitored applications. What is cross application tracing? Important Instead of using cross application tracing, we recommend our distributed tracing features. Distributed tracing is an improvement on the cross application tracing feature and is recommended for large, distributed systems. APM's cross application traces link transactions between APM apps in your service-oriented architecture (SOA). This is useful, for example, to identify performance problems between your own application (the \"calling\" app) and any internal or external services (the \"called\" app), such as traffic to internal services. This helps you to: Spot bottlenecks in your cross application call flows. Understand from end to end how specific transactions are used by other applications and services. Diagnose problems faster and enhance collaboration across teams. Security considerations Cross application tracing relies on three HTTP headers in order to exchange information between the calling and called applications. The first two (X-NewRelic-ID and X-NewRelic-Transaction) appear as HTTP request headers in outgoing requests sent by an instrumented application. The remaining header (X-NewRelic-App-Data) is inserted into the HTTP response if the called application belongs to the same New Relic account as the calling application. New Relic obfuscates all of these headers using an obfuscation scheme identical to what we use for browser monitoring, but with a different key. HTTP header Description X-NewRelic-ID (in request header) Contains the account ID and application ID of the application making the call X-NewRelic-Transaction (in request header) Contains information about an individual transaction created by the call (a GUID unique to the calling transaction, along with information about upstream calls that spawned the transaction) X-NewRelic-App-Data (in the response if applicable) Contains information about the called application, including: Account ID Application ID Name of the called transaction Timing information for the called transaction GUID of the called transaction",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.78311,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>cross</em> <em>application</em> <em>traces</em>",
        "sections": "Introduction to <em>cross</em> <em>application</em> <em>traces</em>",
        "tags": "<em>Cross</em> <em>application</em> <em>traces</em>",
        "body": " tracing feature and is recommended for large, distributed systems. <em>APM</em>&#x27;s <em>cross</em> <em>application</em> <em>traces</em> link <em>transactions</em> between <em>APM</em> apps in your service-oriented architecture (SOA). This is useful, for example, to identify performance problems between your own <em>application</em> (the &quot;calling&quot; app) and any"
      },
      "id": "603ebfc764441fcfd94e8873"
    },
    {
      "sections": [
        "Transactions in New Relic's APM",
        "What is a transaction?",
        "Types of transactions",
        "Transaction sub-types",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.JS",
        "PHP",
        "Python",
        "Ruby",
        "Transaction segments",
        "Transaction naming",
        "Monitoring transactions",
        "Tip",
        "Query transactions"
      ],
      "title": "Transactions in New Relic's APM",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "2a96f455cbf6dfdc5dda2363ba4e69b6f9dba159",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/transactions-new-relic-apm/",
      "published_at": "2021-12-25T02:29:17Z",
      "updated_at": "2021-09-14T02:55:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by New Relic and how transactions are reported. What is a transaction? At New Relic, a transaction is defined as one logical unit of work in a software application. Specifically, it refers to the function calls and method calls that make up that unit of work. For APM, it will often refer to a web transaction, which represents activity that happens from when the application receives a web request to when the response is sent. When you install APM in a supported system, it begins automatically reporting web requests and other important functions and methods. To supplement the default level of monitoring, you can set up custom instrumentation to report additional transactions. Some frameworks do not have a natural concept of a transaction. In other words, there are no predefined pathways that can easily be recognized or monitored as transactions. To define transactions in such frameworks, you can use custom instrumentation. Types of transactions Cumulative transaction data appears in APM on the Transactions page. The two main categories of transactions are web and non-web: Web: Transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. Non-web: Non-web transactions are not initiated with a web request. They can include non-web worker processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. Go Doesn't apply. Java Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. framework The invocation of a framework that is recognized by the agent. .NET Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. ASP The invocation of an ASP.NET request. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. MonoRail The invocation of a MonoRail request. MVC The invocation of a MVC request. OpenRasta The invocation of an OpenRasta request. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. WCF The invocation of a WCF request. WebAPI The invocation of a WebAPI request. WebService The invocation of a WebService request. Node.JS Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Message Message broker or queue communication. PHP Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. PHP The invocation of a background PHP job. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. unknown The invocation of an unknown web transaction or background job. URI The invocation of the named URI. Usually used when a framework or language level transaction name cannot be determined. Python Sub-type Description ASGIWeb WebTransaction from an ASGI application. Message Message broker or queue communication. WSGIWeb WebTransaction from a WSGI application. Ruby Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Transaction segments The individual functions and calls that make up a transaction are called segments. For example external service calls and database calls are segments, and both have their own UI pages in APM. The APM Transactions page displays aggregate transaction segment data. To add segments to a transaction, use custom instrumentation. To see the segments of a specific transaction, use transaction traces. Transaction naming For supported frameworks, transaction names can come from various sources, such as the name given to the transaction by the framework, function names detected during the transaction, or a web request's URL. For transactions that produce many names with a similar format, we consolidate those into general transaction categories. For example, a transaction might be displayed as /user/*/control_panel, where the * represents different user names. To rename transactions or adjust how names are consolidated, use custom instrumentation. Monitoring transactions Here are some other ways you can use APM to monitor transactions: If you want to monitor... Use this... Transactions important to your business Create key transactions, which emphasizes them in the UI and lets you set a custom level of monitoring for them. Async activity Follow the procedures to set up asynchronous activity for your specific APM language agent. Activity across applications Linking transactions across applications gives you more detail about business-relevant application activity. For more information, see the documentation about distributed tracing and cross application traces. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query transactions Transactions are available for querying with an in-depth set of default attributes attached. Using these attributes, you can run queries and create custom charts that APM does not provide by default. For information on how to query your data using our UI or NRQL, see Query New Relic data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.6905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "sections": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "tags": "<em>Transactions</em>",
        "body": ". For more information, see the documentation about distributed tracing and <em>cross</em> <em>application</em> <em>traces</em>. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query <em>transactions</em> <em>Transactions</em> are available for querying with an in-depth set of default attributes"
      },
      "id": "603e8774e7b9d2a6a42a07bc"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.961296,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, transaction <em>traces</em> record in-depth details about your <em>application</em>&#x27;s <em>transactions</em> and database calls. You can edit the default settings for transaction <em>traces</em>. Configure transaction <em>trace</em> settings via agent You can customize your transaction <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/apm/transactions/intro-transactions/monitor-background-processes-other-non-web-transactions": [
    {
      "sections": [
        "Transactions in New Relic's APM",
        "What is a transaction?",
        "Types of transactions",
        "Transaction sub-types",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.JS",
        "PHP",
        "Python",
        "Ruby",
        "Transaction segments",
        "Transaction naming",
        "Monitoring transactions",
        "Tip",
        "Query transactions"
      ],
      "title": "Transactions in New Relic's APM",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "2a96f455cbf6dfdc5dda2363ba4e69b6f9dba159",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/transactions-new-relic-apm/",
      "published_at": "2021-12-25T02:29:17Z",
      "updated_at": "2021-09-14T02:55:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The word transaction can have several different meanings in the software industry. This document explains how the term is used by New Relic and how transactions are reported. What is a transaction? At New Relic, a transaction is defined as one logical unit of work in a software application. Specifically, it refers to the function calls and method calls that make up that unit of work. For APM, it will often refer to a web transaction, which represents activity that happens from when the application receives a web request to when the response is sent. When you install APM in a supported system, it begins automatically reporting web requests and other important functions and methods. To supplement the default level of monitoring, you can set up custom instrumentation to report additional transactions. Some frameworks do not have a natural concept of a transaction. In other words, there are no predefined pathways that can easily be recognized or monitored as transactions. To define transactions in such frameworks, you can use custom instrumentation. Types of transactions Cumulative transaction data appears in APM on the Transactions page. The two main categories of transactions are web and non-web: Web: Transactions are initiated with an HTTP request. For most organizations, these represent customer-centric interactions and thus are the most important transactions to monitor. Non-web: Non-web transactions are not initiated with a web request. They can include non-web worker processes, background processes, scripts, message queue activity, and other tasks. Transaction sub-types Our agents have these transaction sub-types: C SDK Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. Go Doesn't apply. Java Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. framework The invocation of a framework that is recognized by the agent. .NET Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. ASP The invocation of an ASP.NET request. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. MonoRail The invocation of a MonoRail request. MVC The invocation of a MVC request. OpenRasta The invocation of an OpenRasta request. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. WCF The invocation of a WCF request. WebAPI The invocation of a WebAPI request. WebService The invocation of a WebService request. Node.JS Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Message Message broker or queue communication. PHP Sub-type Description Action The invocation of the named framework action. Used when the agent is able to identify a framework-specific action name. Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Function The invocation of the named function. PHP The invocation of a background PHP job. StatusCode The HTTP status code returned for the transaction. Often used when a more specific transaction sub-type is unavailable. unknown The invocation of an unknown web transaction or background job. URI The invocation of the named URI. Usually used when a framework or language level transaction name cannot be determined. Python Sub-type Description ASGIWeb WebTransaction from an ASGI application. Message Message broker or queue communication. WSGIWeb WebTransaction from a WSGI application. Ruby Sub-type Description Custom The execution of the named custom transaction. Usually recorded via manual instrumentation APIs. Transaction segments The individual functions and calls that make up a transaction are called segments. For example external service calls and database calls are segments, and both have their own UI pages in APM. The APM Transactions page displays aggregate transaction segment data. To add segments to a transaction, use custom instrumentation. To see the segments of a specific transaction, use transaction traces. Transaction naming For supported frameworks, transaction names can come from various sources, such as the name given to the transaction by the framework, function names detected during the transaction, or a web request's URL. For transactions that produce many names with a similar format, we consolidate those into general transaction categories. For example, a transaction might be displayed as /user/*/control_panel, where the * represents different user names. To rename transactions or adjust how names are consolidated, use custom instrumentation. Monitoring transactions Here are some other ways you can use APM to monitor transactions: If you want to monitor... Use this... Transactions important to your business Create key transactions, which emphasizes them in the UI and lets you set a custom level of monitoring for them. Async activity Follow the procedures to set up asynchronous activity for your specific APM language agent. Activity across applications Linking transactions across applications gives you more detail about business-relevant application activity. For more information, see the documentation about distributed tracing and cross application traces. Tip To get a high-level overview of all your applications and services, use the New Relic Explorer. Query transactions Transactions are available for querying with an in-depth set of default attributes attached. Using these attributes, you can run queries and create custom charts that APM does not provide by default. For information on how to query your data using our UI or NRQL, see Query New Relic data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.62634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "sections": "<em>Transactions</em> in New Relic&#x27;s <em>APM</em>",
        "tags": "<em>Intro</em> <em>to</em> <em>transactions</em>",
        "body": ", there are no predefined pathways that can easily be recognized or monitored as <em>transactions</em>. To define <em>transactions</em> in such frameworks, you can use custom instrumentation. Types of <em>transactions</em> Cumulative transaction data appears in <em>APM</em> on the <em>Transactions</em> page. The two main categories of <em>transactions</em>"
      },
      "id": "603e8774e7b9d2a6a42a07bc"
    },
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.429886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> traces: Trace details page",
        "sections": "<em>Transaction</em> traces: Trace details page",
        "tags": "<em>Transactions</em>",
        "body": "In <em>APM</em>, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a transaction"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.42957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> traces: Summary page",
        "sections": "<em>Transaction</em> traces: Summary page",
        "tags": "<em>Transactions</em>",
        "body": "In <em>APM</em>, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    }
  ],
  "/docs/apm/transactions/intro-transactions/transactions-new-relic-apm": [
    {
      "sections": [
        "Monitor background processes and other non-web transactions",
        "What are non-web transactions?",
        "Create non-web transactions",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Important",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "View non-web transactions"
      ],
      "title": "Monitor background processes and other non-web transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Intro to transactions"
      ],
      "external_id": "aca55742ecc24a7f6bf212b853777224317d8924",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/intro-transactions/monitor-background-processes-other-non-web-transactions/",
      "published_at": "2021-12-25T06:14:23Z",
      "updated_at": "2021-09-14T05:58:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains what non-web transactions are in APM, and how you can instrument background tasks and other arbitrary activity to be reported as non-web transactions. What are non-web transactions? The two main APM transaction categories are web and non-web. Web transactions are transactions we detect as being initiated by a web request; they are the most common type of transaction reported by APM. Non-web transactions are transactions that are not web transactions; we do not detect they were initiated by a web request. This includes processes and jobs that do not handle web requests, such as message processing and background tasks. For example, you might schedule something to run periodically on your server to do database work, send emails, etc. The source is not a web request but something on your server. Some non-web transactions from supported frameworks or services are detected automatically by New Relic; others may be created using custom instrumentation. We intentionally separate your web and non-web transactions in the UI. Non-web vs. web transactions Comments Less directly important Non-web transactions are often background processes and tasks, and they are less directly important to your application's users when compared to web transactions. Long running Non-web transactions are often long-running processes. Separating them from web transactions prevents those results from skewing your customer-facing response times. Omitted from Apdex score Combining your non-web transactions with your web transactions would hurt your Apdex score (a measure of satisfaction with load times). This is why Apdex data for non-web transactions does not appear in the UI. Create non-web transactions To create new non-web transactions, follow the procedures for your APM language agent. C SDK Follow the procedures for instrumenting a non-web transaction. Go Follow the procedures for instrumenting a non-web transaction. Java Follow the procedures for instrumenting a transaction (instrumenting a transaction without web request parameters creates a non-web transaction). .NET By default, the APM .NET agent instruments IIS ASP workers. To instrument other (non-IIS) .NET applications, such as standalone (WCF) services, console apps, and other Windows services, see Instrumenting custom applications and Instrumenting WCF applications. Important For IIS applications, you cannot change web transactions to non-web transactions. Node.js Use startBackgroundTransaction(). PHP To mark a transaction as non-web: use newrelic_background_job and set the flag to true. The PHP agent reports all command-line run scripts as non-web transactions. Python See Python agent non-web transactions. The Python agent also supports non-web transaction reporting from Celery and Gearman. Ruby See Ruby agent non-web transactions. View non-web transactions To view non-web transaction data in the New Relic UI, go to the main chart on the following pages, and then select the Non-web option in the dropdown: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Summary. APM: Go to one.newrelic.com > APM > (select an app) > Summary. Transactions: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 180.64494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor background processes and other non-web <em>transactions</em>",
        "sections": "Monitor background processes and other non-web <em>transactions</em>",
        "tags": "<em>Intro</em> <em>to</em> <em>transactions</em>",
        "body": "This document explains what non-web <em>transactions</em> are in <em>APM</em>, and how you can instrument background tasks and other arbitrary activity to be reported as non-web <em>transactions</em>. What are non-web <em>transactions</em>? The two main <em>APM</em> transaction categories are web and non-web. Web <em>transactions</em> are <em>transactions</em>"
      },
      "id": "6044288664441f124c378ec7"
    },
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.42988,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> traces: Trace details page",
        "sections": "<em>Transaction</em> traces: Trace details page",
        "tags": "<em>Transactions</em>",
        "body": "In <em>APM</em>, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a transaction"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 85.42957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> traces: Summary page",
        "sections": "<em>Transaction</em> traces: Summary page",
        "tags": "<em>Transactions</em>",
        "body": "In <em>APM</em>, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    }
  ],
  "/docs/apm/transactions/key-transactions/create-update-key-transactions": [
    {
      "sections": [
        "Introduction to key transactions",
        "What are key transactions?",
        "Create key transactions",
        "View key transactions in UI"
      ],
      "title": "Introduction to key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "1224901400c4406015b22afe036d35ec3bb569bd",
      "image": "https://docs.newrelic.com/static/f5ea2688bbb03f205aef5cfbc5d04e30/e6c84/key-trx-overview.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/",
      "published_at": "2021-12-25T06:14:22Z",
      "updated_at": "2021-09-14T02:57:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web transactions or non-web transactions that are important to your business. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. What are key transactions? In APM, making a transaction a key transaction gives you the following benefits: Key transactions are grouped together in the New Relic UI, so they are easy to find and examine. You can set a custom Apdex threshold for a key transaction. You can set an alert policy for a key transaction. Key transactions are useful for: Important transactions. For your app's most important transactions, making them key transactions means you can quickly find and examine them. You can set stricter Apdex requirements for them, and you can create alert policies for them. Slow transactions. If a transaction is regularly slower than other transactions, it can bring down the Apdex score of the entire application. When you make a transaction a key transaction, you can set a longer-duration Apdex threshold for it so it won't bring down your app's Apdex score. Create key transactions To create key transactions, see Create and update key transactions. View key transactions in UI The key transaction's page includes response time and throughput charts, service-level agreement information, a cross application tracing map (if available), and links to alert policy options. The key transaction index is a list of your key transactions: Go to one.newrelic.com > More > Key transactions > (select a transaction). Select a Key transaction from the index. View the selected key transaction's Summary page, including charts and drilldown options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>key</em> <em>transactions</em>",
        "sections": "Introduction to <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web <em>transactions</em> or non-web <em>transactions</em> that are important to your business. For most New Relic agents, a <em>key</em> transaction can"
      },
      "id": "603eb18a28ccbc564deba7a0"
    },
    {
      "sections": [
        "Key transaction charts and data",
        "Overview page",
        "SLA report page",
        "Alerts"
      ],
      "title": "Key transaction charts and data",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "7eee1868178054d18f55452b0989d724546d8016",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/key-transaction-charts-data/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-09-14T02:56:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, every key transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the key transaction index, the key transaction's Overview page appears. The Overview page contains charts for response time, Apdex, throughput, and other data. It is similar to the main Overview page in APM, with standard New Relic page functions. SLA report page The SLA report page for a key transaction displays Service Level Agreement reports for that transaction. The SLA reports include daily and weekly data about throughput, response time, and Apdex. You can also download the report as a comma-separated value (CSV) spreadsheet. Alerts When you select a transaction from the key transaction index, you can also see options to view alert condition violations and set alert policies.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Key</em> <em>transaction</em> charts and data",
        "sections": "<em>Key</em> <em>transaction</em> charts and data",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, every <em>key</em> transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the <em>key</em> transaction index, the <em>key</em> transaction&#x27;s Overview page appears"
      },
      "id": "603ebd1128ccbc1ceaeba784"
    },
    {
      "sections": [
        "Tag key transactions",
        "Assign tags",
        "Tip",
        "Tag multiple transactions",
        "Filter"
      ],
      "title": "Tag key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "760fa0d256c1404a48c8ff06a744c8a0cbd81874",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/tag-key-transactions/",
      "published_at": "2021-12-25T07:36:41Z",
      "updated_at": "2021-03-16T08:22:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can assign tags to key transactions. Tags are metadata associated with transactions. They're useful for applying to transactions that have things in common. For example, you might apply a checkout tag to all key transactions that are part of the checkout process. Then you can filter by checkout to see all of those transactions in one place. Assign tags To assign a tag to a key transaction: Go to one.newrelic.com > More > Key transactions. From the index page, select the tag icon beside the name of the transaction you want to tag. In the tag name box, type the tag's name. Press space to apply the tag. Tip Use any Unicode characters except commas , , angle brackets < >, parentheses ( ), or square brackets [ ]. Select outside the tag name box to exit tag creation. Tag multiple transactions You can assign a tag to all visible transactions in the index: Go to one.newrelic.com > More > Key transactions. Follow the tag creation instructions in Assign tags. To remove a bulk tag: From the bulk tag dropdown, select a tag name's x symbol. Filter To filter the key transaction index by tags: In the key transaction index search field, select the dropdown icon and select by tags. Type in the tag name.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.30794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tag <em>key</em> <em>transactions</em>",
        "sections": "Tag <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can assign tags to <em>key</em> <em>transactions</em>. Tags are metadata associated with <em>transactions</em>. They&#x27;re useful for applying to <em>transactions</em> that have things in common. For example, you might apply a checkout tag to all <em>key</em> <em>transactions</em> that are part of the checkout process. Then you can filter"
      },
      "id": "603eb18928ccbc564deba79d"
    }
  ],
  "/docs/apm/transactions/key-transactions/introduction-key-transactions": [
    {
      "sections": [
        "Key transaction charts and data",
        "Overview page",
        "SLA report page",
        "Alerts"
      ],
      "title": "Key transaction charts and data",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "7eee1868178054d18f55452b0989d724546d8016",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/key-transaction-charts-data/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-09-14T02:56:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, every key transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the key transaction index, the key transaction's Overview page appears. The Overview page contains charts for response time, Apdex, throughput, and other data. It is similar to the main Overview page in APM, with standard New Relic page functions. SLA report page The SLA report page for a key transaction displays Service Level Agreement reports for that transaction. The SLA reports include daily and weekly data about throughput, response time, and Apdex. You can also download the report as a comma-separated value (CSV) spreadsheet. Alerts When you select a transaction from the key transaction index, you can also see options to view alert condition violations and set alert policies.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Key</em> <em>transaction</em> charts and data",
        "sections": "<em>Key</em> <em>transaction</em> charts and data",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, every <em>key</em> transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the <em>key</em> transaction index, the <em>key</em> transaction&#x27;s Overview page appears"
      },
      "id": "603ebd1128ccbc1ceaeba784"
    },
    {
      "sections": [
        "Tag key transactions",
        "Assign tags",
        "Tip",
        "Tag multiple transactions",
        "Filter"
      ],
      "title": "Tag key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "760fa0d256c1404a48c8ff06a744c8a0cbd81874",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/tag-key-transactions/",
      "published_at": "2021-12-25T07:36:41Z",
      "updated_at": "2021-03-16T08:22:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can assign tags to key transactions. Tags are metadata associated with transactions. They're useful for applying to transactions that have things in common. For example, you might apply a checkout tag to all key transactions that are part of the checkout process. Then you can filter by checkout to see all of those transactions in one place. Assign tags To assign a tag to a key transaction: Go to one.newrelic.com > More > Key transactions. From the index page, select the tag icon beside the name of the transaction you want to tag. In the tag name box, type the tag's name. Press space to apply the tag. Tip Use any Unicode characters except commas , , angle brackets < >, parentheses ( ), or square brackets [ ]. Select outside the tag name box to exit tag creation. Tag multiple transactions You can assign a tag to all visible transactions in the index: Go to one.newrelic.com > More > Key transactions. Follow the tag creation instructions in Assign tags. To remove a bulk tag: From the bulk tag dropdown, select a tag name's x symbol. Filter To filter the key transaction index by tags: In the key transaction index search field, select the dropdown icon and select by tags. Type in the tag name.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.30794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tag <em>key</em> <em>transactions</em>",
        "sections": "Tag <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can assign tags to <em>key</em> <em>transactions</em>. Tags are metadata associated with <em>transactions</em>. They&#x27;re useful for applying to <em>transactions</em> that have things in common. For example, you might apply a checkout tag to all <em>key</em> <em>transactions</em> that are part of the checkout process. Then you can filter"
      },
      "id": "603eb18928ccbc564deba79d"
    },
    {
      "sections": [
        "Create and update key transactions",
        "Create key transactions",
        "From the key transaction index",
        "From a specific transaction page",
        "Rename a key transaction",
        "Change Apdex settings",
        "Important",
        "Delete key transactions"
      ],
      "title": "Create and update key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "b62aaaec4cfc8c108262c4d310cecfd8f9cc081e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/create-update-key-transactions/",
      "published_at": "2021-12-25T06:14:23Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. Create key transactions There are two ways to create a key transaction: From the key transaction index Go to one.newrelic.com > More > Key transactions to view the key transactions index. Select Add more. From a specific transaction page Go to one.newrelic.com > APM > (select an app) > Summary In the center of the page under Transactions, select a record. Select Track as key transaction. Rename a key transaction Here's how to rename: Go to one.newrelic.com > More > Key transactions. From the index, select the gear icon for the key transaction you want to rename. Enter a new name for the transaction, then save. Change Apdex settings You can set a custom Apdex threshold for a key transaction if it is a web transaction. (Apdex is not applicable for non-web-transactions.) This is useful if the transaction is expected to be faster or slower than other transactions. Important Key transaction Apdex settings override the T value set for that app. This can mean, for example, that a key transaction could be reported as Satisfied but a different transaction in the same app with the same response time could be Frustrated. To change a key transaction's Apdex threshold: Go to one.newrelic.com > More > Key transactions. Select the icon for the transaction you want to edit. Enter a new value in seconds under the Apdex T heading, then save. The Apdex threshold affects how key transaction traces are created. Delete key transactions To delete a key transaction: Go to one.newrelic.com > More > Key transactions. Select the gear icon for the key transaction you want to delete. Select Stop tracking. New Relic automatically deletes any associated alerts and events for the deleted key transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create and update <em>key</em> <em>transactions</em>",
        "sections": "Create and update <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a <em>key</em> transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web <em>transactions</em> can"
      },
      "id": "603ec83364441f03b44e888f"
    }
  ],
  "/docs/apm/transactions/key-transactions/key-transaction-alerts": [
    {
      "sections": [
        "Introduction to key transactions",
        "What are key transactions?",
        "Create key transactions",
        "View key transactions in UI"
      ],
      "title": "Introduction to key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "1224901400c4406015b22afe036d35ec3bb569bd",
      "image": "https://docs.newrelic.com/static/f5ea2688bbb03f205aef5cfbc5d04e30/e6c84/key-trx-overview.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/",
      "published_at": "2021-12-25T06:14:22Z",
      "updated_at": "2021-09-14T02:57:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web transactions or non-web transactions that are important to your business. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. What are key transactions? In APM, making a transaction a key transaction gives you the following benefits: Key transactions are grouped together in the New Relic UI, so they are easy to find and examine. You can set a custom Apdex threshold for a key transaction. You can set an alert policy for a key transaction. Key transactions are useful for: Important transactions. For your app's most important transactions, making them key transactions means you can quickly find and examine them. You can set stricter Apdex requirements for them, and you can create alert policies for them. Slow transactions. If a transaction is regularly slower than other transactions, it can bring down the Apdex score of the entire application. When you make a transaction a key transaction, you can set a longer-duration Apdex threshold for it so it won't bring down your app's Apdex score. Create key transactions To create key transactions, see Create and update key transactions. View key transactions in UI The key transaction's page includes response time and throughput charts, service-level agreement information, a cross application tracing map (if available), and links to alert policy options. The key transaction index is a list of your key transactions: Go to one.newrelic.com > More > Key transactions > (select a transaction). Select a Key transaction from the index. View the selected key transaction's Summary page, including charts and drilldown options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>key</em> <em>transactions</em>",
        "sections": "Introduction to <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web <em>transactions</em> or non-web <em>transactions</em> that are important to your business. For most New Relic agents, a <em>key</em> transaction can"
      },
      "id": "603eb18a28ccbc564deba7a0"
    },
    {
      "sections": [
        "Key transaction charts and data",
        "Overview page",
        "SLA report page",
        "Alerts"
      ],
      "title": "Key transaction charts and data",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "7eee1868178054d18f55452b0989d724546d8016",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/key-transaction-charts-data/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-09-14T02:56:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, every key transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the key transaction index, the key transaction's Overview page appears. The Overview page contains charts for response time, Apdex, throughput, and other data. It is similar to the main Overview page in APM, with standard New Relic page functions. SLA report page The SLA report page for a key transaction displays Service Level Agreement reports for that transaction. The SLA reports include daily and weekly data about throughput, response time, and Apdex. You can also download the report as a comma-separated value (CSV) spreadsheet. Alerts When you select a transaction from the key transaction index, you can also see options to view alert condition violations and set alert policies.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Key</em> <em>transaction</em> charts and data",
        "sections": "<em>Key</em> <em>transaction</em> charts and data",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, every <em>key</em> transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the <em>key</em> transaction index, the <em>key</em> transaction&#x27;s Overview page appears"
      },
      "id": "603ebd1128ccbc1ceaeba784"
    },
    {
      "sections": [
        "Tag key transactions",
        "Assign tags",
        "Tip",
        "Tag multiple transactions",
        "Filter"
      ],
      "title": "Tag key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "760fa0d256c1404a48c8ff06a744c8a0cbd81874",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/tag-key-transactions/",
      "published_at": "2021-12-25T07:36:41Z",
      "updated_at": "2021-03-16T08:22:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can assign tags to key transactions. Tags are metadata associated with transactions. They're useful for applying to transactions that have things in common. For example, you might apply a checkout tag to all key transactions that are part of the checkout process. Then you can filter by checkout to see all of those transactions in one place. Assign tags To assign a tag to a key transaction: Go to one.newrelic.com > More > Key transactions. From the index page, select the tag icon beside the name of the transaction you want to tag. In the tag name box, type the tag's name. Press space to apply the tag. Tip Use any Unicode characters except commas , , angle brackets < >, parentheses ( ), or square brackets [ ]. Select outside the tag name box to exit tag creation. Tag multiple transactions You can assign a tag to all visible transactions in the index: Go to one.newrelic.com > More > Key transactions. Follow the tag creation instructions in Assign tags. To remove a bulk tag: From the bulk tag dropdown, select a tag name's x symbol. Filter To filter the key transaction index by tags: In the key transaction index search field, select the dropdown icon and select by tags. Type in the tag name.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.30794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tag <em>key</em> <em>transactions</em>",
        "sections": "Tag <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can assign tags to <em>key</em> <em>transactions</em>. Tags are metadata associated with <em>transactions</em>. They&#x27;re useful for applying to <em>transactions</em> that have things in common. For example, you might apply a checkout tag to all <em>key</em> <em>transactions</em> that are part of the checkout process. Then you can filter"
      },
      "id": "603eb18928ccbc564deba79d"
    }
  ],
  "/docs/apm/transactions/key-transactions/key-transaction-charts-data": [
    {
      "sections": [
        "Introduction to key transactions",
        "What are key transactions?",
        "Create key transactions",
        "View key transactions in UI"
      ],
      "title": "Introduction to key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "1224901400c4406015b22afe036d35ec3bb569bd",
      "image": "https://docs.newrelic.com/static/f5ea2688bbb03f205aef5cfbc5d04e30/e6c84/key-trx-overview.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/",
      "published_at": "2021-12-25T06:14:22Z",
      "updated_at": "2021-09-14T02:57:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web transactions or non-web transactions that are important to your business. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. What are key transactions? In APM, making a transaction a key transaction gives you the following benefits: Key transactions are grouped together in the New Relic UI, so they are easy to find and examine. You can set a custom Apdex threshold for a key transaction. You can set an alert policy for a key transaction. Key transactions are useful for: Important transactions. For your app's most important transactions, making them key transactions means you can quickly find and examine them. You can set stricter Apdex requirements for them, and you can create alert policies for them. Slow transactions. If a transaction is regularly slower than other transactions, it can bring down the Apdex score of the entire application. When you make a transaction a key transaction, you can set a longer-duration Apdex threshold for it so it won't bring down your app's Apdex score. Create key transactions To create key transactions, see Create and update key transactions. View key transactions in UI The key transaction's page includes response time and throughput charts, service-level agreement information, a cross application tracing map (if available), and links to alert policy options. The key transaction index is a list of your key transactions: Go to one.newrelic.com > More > Key transactions > (select a transaction). Select a Key transaction from the index. View the selected key transaction's Summary page, including charts and drilldown options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>key</em> <em>transactions</em>",
        "sections": "Introduction to <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web <em>transactions</em> or non-web <em>transactions</em> that are important to your business. For most New Relic agents, a <em>key</em> transaction can"
      },
      "id": "603eb18a28ccbc564deba7a0"
    },
    {
      "sections": [
        "Tag key transactions",
        "Assign tags",
        "Tip",
        "Tag multiple transactions",
        "Filter"
      ],
      "title": "Tag key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "760fa0d256c1404a48c8ff06a744c8a0cbd81874",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/tag-key-transactions/",
      "published_at": "2021-12-25T07:36:41Z",
      "updated_at": "2021-03-16T08:22:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can assign tags to key transactions. Tags are metadata associated with transactions. They're useful for applying to transactions that have things in common. For example, you might apply a checkout tag to all key transactions that are part of the checkout process. Then you can filter by checkout to see all of those transactions in one place. Assign tags To assign a tag to a key transaction: Go to one.newrelic.com > More > Key transactions. From the index page, select the tag icon beside the name of the transaction you want to tag. In the tag name box, type the tag's name. Press space to apply the tag. Tip Use any Unicode characters except commas , , angle brackets < >, parentheses ( ), or square brackets [ ]. Select outside the tag name box to exit tag creation. Tag multiple transactions You can assign a tag to all visible transactions in the index: Go to one.newrelic.com > More > Key transactions. Follow the tag creation instructions in Assign tags. To remove a bulk tag: From the bulk tag dropdown, select a tag name's x symbol. Filter To filter the key transaction index by tags: In the key transaction index search field, select the dropdown icon and select by tags. Type in the tag name.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.30794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tag <em>key</em> <em>transactions</em>",
        "sections": "Tag <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can assign tags to <em>key</em> <em>transactions</em>. Tags are metadata associated with <em>transactions</em>. They&#x27;re useful for applying to <em>transactions</em> that have things in common. For example, you might apply a checkout tag to all <em>key</em> <em>transactions</em> that are part of the checkout process. Then you can filter"
      },
      "id": "603eb18928ccbc564deba79d"
    },
    {
      "sections": [
        "Create and update key transactions",
        "Create key transactions",
        "From the key transaction index",
        "From a specific transaction page",
        "Rename a key transaction",
        "Change Apdex settings",
        "Important",
        "Delete key transactions"
      ],
      "title": "Create and update key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "b62aaaec4cfc8c108262c4d310cecfd8f9cc081e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/create-update-key-transactions/",
      "published_at": "2021-12-25T06:14:23Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. Create key transactions There are two ways to create a key transaction: From the key transaction index Go to one.newrelic.com > More > Key transactions to view the key transactions index. Select Add more. From a specific transaction page Go to one.newrelic.com > APM > (select an app) > Summary In the center of the page under Transactions, select a record. Select Track as key transaction. Rename a key transaction Here's how to rename: Go to one.newrelic.com > More > Key transactions. From the index, select the gear icon for the key transaction you want to rename. Enter a new name for the transaction, then save. Change Apdex settings You can set a custom Apdex threshold for a key transaction if it is a web transaction. (Apdex is not applicable for non-web-transactions.) This is useful if the transaction is expected to be faster or slower than other transactions. Important Key transaction Apdex settings override the T value set for that app. This can mean, for example, that a key transaction could be reported as Satisfied but a different transaction in the same app with the same response time could be Frustrated. To change a key transaction's Apdex threshold: Go to one.newrelic.com > More > Key transactions. Select the icon for the transaction you want to edit. Enter a new value in seconds under the Apdex T heading, then save. The Apdex threshold affects how key transaction traces are created. Delete key transactions To delete a key transaction: Go to one.newrelic.com > More > Key transactions. Select the gear icon for the key transaction you want to delete. Select Stop tracking. New Relic automatically deletes any associated alerts and events for the deleted key transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create and update <em>key</em> <em>transactions</em>",
        "sections": "Create and update <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a <em>key</em> transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web <em>transactions</em> can"
      },
      "id": "603ec83364441f03b44e888f"
    }
  ],
  "/docs/apm/transactions/key-transactions/tag-key-transactions": [
    {
      "sections": [
        "Introduction to key transactions",
        "What are key transactions?",
        "Create key transactions",
        "View key transactions in UI"
      ],
      "title": "Introduction to key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "1224901400c4406015b22afe036d35ec3bb569bd",
      "image": "https://docs.newrelic.com/static/f5ea2688bbb03f205aef5cfbc5d04e30/e6c84/key-trx-overview.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/introduction-key-transactions/",
      "published_at": "2021-12-25T06:14:22Z",
      "updated_at": "2021-09-14T02:57:02Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web transactions or non-web transactions that are important to your business. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. What are key transactions? In APM, making a transaction a key transaction gives you the following benefits: Key transactions are grouped together in the New Relic UI, so they are easy to find and examine. You can set a custom Apdex threshold for a key transaction. You can set an alert policy for a key transaction. Key transactions are useful for: Important transactions. For your app's most important transactions, making them key transactions means you can quickly find and examine them. You can set stricter Apdex requirements for them, and you can create alert policies for them. Slow transactions. If a transaction is regularly slower than other transactions, it can bring down the Apdex score of the entire application. When you make a transaction a key transaction, you can set a longer-duration Apdex threshold for it so it won't bring down your app's Apdex score. Create key transactions To create key transactions, see Create and update key transactions. View key transactions in UI The key transaction's page includes response time and throughput charts, service-level agreement information, a cross application tracing map (if available), and links to alert policy options. The key transaction index is a list of your key transactions: Go to one.newrelic.com > More > Key transactions > (select a transaction). Select a Key transaction from the index. View the selected key transaction's Summary page, including charts and drilldown options.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>key</em> <em>transactions</em>",
        "sections": "Introduction to <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. These may be web <em>transactions</em> or non-web <em>transactions</em> that are important to your business. For most New Relic agents, a <em>key</em> transaction can"
      },
      "id": "603eb18a28ccbc564deba7a0"
    },
    {
      "sections": [
        "Key transaction charts and data",
        "Overview page",
        "SLA report page",
        "Alerts"
      ],
      "title": "Key transaction charts and data",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "7eee1868178054d18f55452b0989d724546d8016",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/key-transaction-charts-data/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-09-14T02:56:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, every key transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the key transaction index, the key transaction's Overview page appears. The Overview page contains charts for response time, Apdex, throughput, and other data. It is similar to the main Overview page in APM, with standard New Relic page functions. SLA report page The SLA report page for a key transaction displays Service Level Agreement reports for that transaction. The SLA reports include daily and weekly data about throughput, response time, and Apdex. You can also download the report as a comma-separated value (CSV) spreadsheet. Alerts When you select a transaction from the key transaction index, you can also see options to view alert condition violations and set alert policies.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.07532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Key</em> <em>transaction</em> charts and data",
        "sections": "<em>Key</em> <em>transaction</em> charts and data",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, every <em>key</em> transaction has its own Overview page and several other UI pages. Depending on the type of transaction (web or non-web), different information appears. Overview page When you select a transaction from the <em>key</em> transaction index, the <em>key</em> transaction&#x27;s Overview page appears"
      },
      "id": "603ebd1128ccbc1ceaeba784"
    },
    {
      "sections": [
        "Create and update key transactions",
        "Create key transactions",
        "From the key transaction index",
        "From a specific transaction page",
        "Rename a key transaction",
        "Change Apdex settings",
        "Important",
        "Delete key transactions"
      ],
      "title": "Create and update key transactions",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Key transactions"
      ],
      "external_id": "b62aaaec4cfc8c108262c4d310cecfd8f9cc081e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/key-transactions/create-update-key-transactions/",
      "published_at": "2021-12-25T06:14:23Z",
      "updated_at": "2021-03-16T07:16:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, you can make a transaction a key transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a key transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web transactions can be turned into key transactions. Create key transactions There are two ways to create a key transaction: From the key transaction index Go to one.newrelic.com > More > Key transactions to view the key transactions index. Select Add more. From a specific transaction page Go to one.newrelic.com > APM > (select an app) > Summary In the center of the page under Transactions, select a record. Select Track as key transaction. Rename a key transaction Here's how to rename: Go to one.newrelic.com > More > Key transactions. From the index, select the gear icon for the key transaction you want to rename. Enter a new name for the transaction, then save. Change Apdex settings You can set a custom Apdex threshold for a key transaction if it is a web transaction. (Apdex is not applicable for non-web-transactions.) This is useful if the transaction is expected to be faster or slower than other transactions. Important Key transaction Apdex settings override the T value set for that app. This can mean, for example, that a key transaction could be reported as Satisfied but a different transaction in the same app with the same response time could be Frustrated. To change a key transaction's Apdex threshold: Go to one.newrelic.com > More > Key transactions. Select the icon for the transaction you want to edit. Enter a new value in seconds under the Apdex T heading, then save. The Apdex threshold affects how key transaction traces are created. Delete key transactions To delete a key transaction: Go to one.newrelic.com > More > Key transactions. Select the gear icon for the key transaction you want to delete. Select Stop tracking. New Relic automatically deletes any associated alerts and events for the deleted key transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Create and update <em>key</em> <em>transactions</em>",
        "sections": "Create and update <em>key</em> <em>transactions</em>",
        "tags": "<em>Key</em> <em>transactions</em>",
        "body": "In <em>APM</em>, you can make a transaction a <em>key</em> transaction when you want it to have a custom level of monitoring, or when you want it to have its own alert policy. For most New Relic agents, a <em>key</em> transaction can be any type of transaction. For the PHP, Node.js, and Go agents, only web <em>transactions</em> can"
      },
      "id": "603ec83364441f03b44e888f"
    }
  ],
  "/docs/apm/transactions/transaction-traces/configure-transaction-traces": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16966,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Introduction to transaction traces",
        "What transactions record traces",
        "Configure transaction traces",
        "View transaction traces in UI",
        "Examine logs for trace details",
        "Troubleshoot an issue with transaction traces"
      ],
      "title": "Introduction to transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "b2a6521e60a66ca6e5b731b0c4fe7c80abe32675",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/introduction-transaction-traces/",
      "published_at": "2021-12-25T06:16:11Z",
      "updated_at": "2021-11-10T01:42:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, a transaction trace gives a detailed snapshot of a single transaction in your application. A transaction trace records the available function calls, database calls, and external calls. You can use transaction traces to troubleshoot performance issues and to get detailed low-level insight into how your app is working. What transactions record traces In APM, a transaction trace records the segments that make up a transaction. Because they give you more detail, you can use transaction traces to analyze and troubleshoot performance issues. Here are the default rules that govern which transactions a New Relic agent traces: Over the minute-long harvest cycle, all transactions that violate the threshold (either four times your Apdex T value or a specific number of seconds) are added to a pool of transactions. At the end of that minute, the New Relic agent selects the slowest transaction in that pool and performs a transaction trace on it. These are the general rules, but there are some agent-specific differences. For example: The Java agent collects occasional non-slow transactions. If one transaction is frequently traced, some agents will select other transactions to give a more diverse sampling. If you don't see traces in your account, it's possible that no transactions meet the necessary criteria. In this situation, you can adjust transaction trace settings to ensure some transactions will be traced. If you use Synthetic, you will likely have Synthetic monitor traces. Synthetic traces can happen more frequently than APM traces, potentially several per minute. Configure transaction traces To configure or edit trace settings, see the procedures for: Transaction traces Key transaction traces View transaction traces in UI To view transaction traces: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. In the Transaction traces section, click transaction traces to view additional details. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot an issue with transaction traces If you expect to see transaction traces but do not see them, follow the troubleshooting procedures. For more information about using transaction traces, slow queries, and service maps to solve performance issues, see Analyze performance issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.64307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>transaction</em> <em>traces</em>",
        "sections": "What <em>transactions</em> record <em>traces</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": " into how your app is working. What <em>transactions</em> record <em>traces</em> In <em>APM</em>, a <em>transaction</em> <em>trace</em> records the segments that make up a <em>transaction</em>. Because they give you more detail, you can use <em>transaction</em> <em>traces</em> to analyze and troubleshoot performance issues. Here are the default rules that govern which"
      },
      "id": "603ebebae7b9d268562a07c8"
    }
  ],
  "/docs/apm/transactions/transaction-traces/introduction-transaction-traces": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/apm/transactions/transaction-traces/security-transaction-traces": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16821,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/apm/transactions/transaction-traces/transaction-traces-database-queries-page": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.1682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/apm/transactions/transaction-traces/transaction-traces-summary-page": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.1682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    },
    {
      "sections": [
        "Introduction to transaction traces",
        "What transactions record traces",
        "Configure transaction traces",
        "View transaction traces in UI",
        "Examine logs for trace details",
        "Troubleshoot an issue with transaction traces"
      ],
      "title": "Introduction to transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "b2a6521e60a66ca6e5b731b0c4fe7c80abe32675",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/introduction-transaction-traces/",
      "published_at": "2021-12-25T06:16:11Z",
      "updated_at": "2021-11-10T01:42:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, a transaction trace gives a detailed snapshot of a single transaction in your application. A transaction trace records the available function calls, database calls, and external calls. You can use transaction traces to troubleshoot performance issues and to get detailed low-level insight into how your app is working. What transactions record traces In APM, a transaction trace records the segments that make up a transaction. Because they give you more detail, you can use transaction traces to analyze and troubleshoot performance issues. Here are the default rules that govern which transactions a New Relic agent traces: Over the minute-long harvest cycle, all transactions that violate the threshold (either four times your Apdex T value or a specific number of seconds) are added to a pool of transactions. At the end of that minute, the New Relic agent selects the slowest transaction in that pool and performs a transaction trace on it. These are the general rules, but there are some agent-specific differences. For example: The Java agent collects occasional non-slow transactions. If one transaction is frequently traced, some agents will select other transactions to give a more diverse sampling. If you don't see traces in your account, it's possible that no transactions meet the necessary criteria. In this situation, you can adjust transaction trace settings to ensure some transactions will be traced. If you use Synthetic, you will likely have Synthetic monitor traces. Synthetic traces can happen more frequently than APM traces, potentially several per minute. Configure transaction traces To configure or edit trace settings, see the procedures for: Transaction traces Key transaction traces View transaction traces in UI To view transaction traces: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. In the Transaction traces section, click transaction traces to view additional details. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot an issue with transaction traces If you expect to see transaction traces but do not see them, follow the troubleshooting procedures. For more information about using transaction traces, slow queries, and service maps to solve performance issues, see Analyze performance issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.64307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>transaction</em> <em>traces</em>",
        "sections": "What <em>transactions</em> record <em>traces</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": " into how your app is working. What <em>transactions</em> record <em>traces</em> In <em>APM</em>, a <em>transaction</em> <em>trace</em> records the segments that make up a <em>transaction</em>. Because they give you more detail, you can use <em>transaction</em> <em>traces</em> to analyze and troubleshoot performance issues. Here are the default rules that govern which"
      },
      "id": "603ebebae7b9d268562a07c8"
    }
  ],
  "/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page": [
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16902,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.1682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    },
    {
      "sections": [
        "Introduction to transaction traces",
        "What transactions record traces",
        "Configure transaction traces",
        "View transaction traces in UI",
        "Examine logs for trace details",
        "Troubleshoot an issue with transaction traces"
      ],
      "title": "Introduction to transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "b2a6521e60a66ca6e5b731b0c4fe7c80abe32675",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/introduction-transaction-traces/",
      "published_at": "2021-12-25T06:16:11Z",
      "updated_at": "2021-11-10T01:42:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, a transaction trace gives a detailed snapshot of a single transaction in your application. A transaction trace records the available function calls, database calls, and external calls. You can use transaction traces to troubleshoot performance issues and to get detailed low-level insight into how your app is working. What transactions record traces In APM, a transaction trace records the segments that make up a transaction. Because they give you more detail, you can use transaction traces to analyze and troubleshoot performance issues. Here are the default rules that govern which transactions a New Relic agent traces: Over the minute-long harvest cycle, all transactions that violate the threshold (either four times your Apdex T value or a specific number of seconds) are added to a pool of transactions. At the end of that minute, the New Relic agent selects the slowest transaction in that pool and performs a transaction trace on it. These are the general rules, but there are some agent-specific differences. For example: The Java agent collects occasional non-slow transactions. If one transaction is frequently traced, some agents will select other transactions to give a more diverse sampling. If you don't see traces in your account, it's possible that no transactions meet the necessary criteria. In this situation, you can adjust transaction trace settings to ensure some transactions will be traced. If you use Synthetic, you will likely have Synthetic monitor traces. Synthetic traces can happen more frequently than APM traces, potentially several per minute. Configure transaction traces To configure or edit trace settings, see the procedures for: Transaction traces Key transaction traces View transaction traces in UI To view transaction traces: Do one of the following: New Relic Explorer: Go to one.newrelic.com > Explorer > (select an app) > Monitor > Transactions. APM: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. In the Transaction traces section, click transaction traces to view additional details. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Troubleshoot an issue with transaction traces If you expect to see transaction traces but do not see them, follow the troubleshooting procedures. For more information about using transaction traces, slow queries, and service maps to solve performance issues, see Analyze performance issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.64307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>transaction</em> <em>traces</em>",
        "sections": "What <em>transactions</em> record <em>traces</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": " into how your app is working. What <em>transactions</em> record <em>traces</em> In <em>APM</em>, a <em>transaction</em> <em>trace</em> records the segments that make up a <em>transaction</em>. Because they give you more detail, you can use <em>transaction</em> <em>traces</em> to analyze and troubleshoot performance issues. Here are the default rules that govern which"
      },
      "id": "603ebebae7b9d268562a07c8"
    }
  ],
  "/docs/apm/transactions/transaction-traces/troubleshooting-not-seeing-transaction-traces": [
    {
      "sections": [
        "Transaction traces: Trace details page",
        "Trace details page functions",
        "Drilldown options",
        "Examine logs for trace details",
        "Color coding of segment duration data",
        "Application code in traces",
        "Partial traces",
        "Segment grouping rules"
      ],
      "title": "Transaction traces: Trace details page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "77871dbce9242fbbb6bee421b1d6b7cd5e77a9d6",
      "image": "https://docs.newrelic.com/static/e1099bd92081eca96a51c0f0f27f8a65/c1b63/trx-trace-details.png",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-trace-details-page/",
      "published_at": "2021-12-25T04:47:34Z",
      "updated_at": "2021-11-14T10:23:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the Trace details tab shows the timing of individual segments in a transaction trace. This document describes the sections and features of the Trace details tab. Trace details page functions Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace) > Trace details. The Trace details page displays a table with the timing data for the segments in a transaction, plus additional features and functions: Trace details page Description Primary trace data, functions The top of each transaction trace UI page shows several primary pieces of data, including the trace time, response time, and, if available, CPU info. Also, sometimes the UI may indicate a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Duration column The duration of each segment and subsegment is shown as both the number of milliseconds and a percentage of the total transaction time. Especially slow segments are color-coded. Segment column The Segment column displays segment names and counts. Fast and repeat calls may be automatically grouped together. Sometimes you may see Application code as the name of a segment or subsegment. To expand segments, use either of the following: The Expand performance problems button at the top of the page The expand and collapse dropdown arrows next to the segments Drilldown column The Drilldown column may contain icons that link to additional transaction data, if available. Timestamp column The Timestamp column displays the start time of a segment or subsegment, relative to the start of the transaction. For example, a value of 3.150 s indicates that that segment started 3.15 seconds into the transaction. Drilldown options In the Drilldown column, icons indicate that additional data is available: Icon Description Database queries The database icon links to the raw database query for that query segment. Depending on your transaction trace settings, this query can either show as raw data or obfuscated data. If the total time for the segment exceeds the query plan threshold in your settings, the query analysis also will appear, along with a stack trace showing the exact location of the call in your code. Stack traces The magnifying glass links to stack trace details. Aggregate transaction details This icon indicates that cross application tracing details are not available. However, you can select this icon to view aggregated transaction information across multiple invocations of the transaction. Examine logs for trace details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Transactions page, click on a trace to go to the Trace details page. From the trace details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your trace details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Color coding of segment duration data The Duration column of the Trace details table is color-coded: Red: More than 25% of the total transaction time was spent in this segment. Yellow: More than 5% of the total transaction time was spent in this segment. Color-coded durations do not necessarily indicate a problem. Whether the timing is actually a problem depends on what you consider normal and acceptable for your application. Application code in traces If a segment is listed as Application code in the table, it indicates that that section of code was not instrumented. You can use custom instrumentation to get more detail on that part of the code. Segments will often be listed as Application code for partial traces. Partial traces For performance reasons, APM only captures the first 2,000 segments of a transaction trace (900 for Node.js). If a transaction trace exceeds that number of segments, the agent truncates the transaction trace and displays a message at the top of the Details page: This is a partial trace. The APM agents have differing rules for when to truncate segments. APM agent Truncate segment rules C SDK Truncates based on segment priority: The root segment has the highest priority. Segments that have seen distributed tracing activity have second-highest priority. Slow segments have third-highest priority. For more information, see the C SDK's documentation about newrelic_transaction_tracer_config_t on GitHub. Go The segment duration must be greater than the TransactionTracer.SegmentThreshold value set in your Go segment configuration. Java, .NET, Ruby These agents truncate traces chronologically. For more information, see the transaction tracer documentation for Java, .NET, or Ruby as applicable. Node.js The Node.js agent only captures the first 900 segments of a transaction trace. For more information, see Node.js transaction tracer configuration. PHP Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see PHP transaction tracer configuration. Python Truncates based on segment duration; the slowest 2,000 segments are captured for the trace. For more information, see Python transaction tracer configuration. Segment grouping rules Transaction traces that have a lot of segments can be hard to interpret. New Relic helps you by automatically grouping fast and/or repeated method calls into a single segment grouping. For example, you might see a segment titled 7 fast method calls. This means that, because of their fast completion, New Relic assumed these calls were unlikely to be a problem and grouped them together. You can expand that grouping to see the individual segments. Rules underlying segment grouping include: Fast calls: When New Relic detects four or more consecutive segments with a duration of 7.5 ms or less, these are grouped into a single collapsed header. Identical calls: When New Relic detects four or more consecutive identical calls, this usually indicates an N+1 problem. These segments are collapsed. Expanding the collapsed node displays only the first three calls, not all calls.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.16963,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "sections": "<em>Transaction</em> <em>traces</em>: <em>Trace</em> details page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>Trace</em> details tab shows the timing of individual segments in a <em>transaction</em> <em>trace</em>. This document describes the sections and features of the <em>Trace</em> details tab. <em>Trace</em> details page functions Go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor &gt; <em>Transactions</em> &gt; (select a <em>transaction</em>"
      },
      "id": "603ebe83196a67703ca83dd0"
    },
    {
      "sections": [
        "Transaction traces: Summary page",
        "Transaction trace Summary page",
        "View logs for your APM and infrastructure data"
      ],
      "title": "Transaction traces: Summary page",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "d84820988a824062ad1421d31e2b93daea8f87db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/transaction-traces-summary-page/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-11-14T10:21:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, the transaction trace Summary page shows a summary of the data from a specific transaction trace. This document describes the main sections and functions you can use. Transaction trace Summary page To view transaction trace data, go to one.newrelic.com > APM > (select an app) > Monitor > Transactions > (select a transaction trace). The transaction trace's Summary page has four main areas: Section Description Primary trace data, functions At the top of all transaction trace pages are some primary measurements and functions. Measurements include response time, trace time, and, if available, CPU info. Sometimes there also may be a note that it is a partial trace. Available functions include: Delete this trace: When you delete a trace, it cannot be retrieved. Track as key transaction. Chart This chart shows the trace segments that took the longest time, ordered by percentage of time spent. The remaining trace segments are grouped as Remainder. To show additional display options, mouse over the chart. Slowest components The Slowest components table shows the number of calls, total duration, and percentage for each of the slowest components. Transaction attributes This section displays available transaction attributes, including default attributes (such as referring URL and request headers) and custom attributes. The exact request attributes collected by default depend on the New Relic language agent you use. To turn attribute collection on or off for traces, you can either use the agent config file or the UI Settings > Application page (if your New Relic agent allows server-side configuration). The other main transaction trace UI page is the Trace details page. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.169,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Transaction</em> <em>traces</em>: Summary page",
        "sections": "<em>Transaction</em> <em>traces</em>: Summary page",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, the <em>transaction</em> <em>trace</em> Summary page shows a summary of the data from a specific <em>transaction</em> <em>trace</em>. This document describes the main sections and functions you can use. <em>Transaction</em> <em>trace</em> Summary page To view <em>transaction</em> <em>trace</em> data, go to one.newrelic.com &gt; <em>APM</em> &gt; (select an app) &gt; Monitor"
      },
      "id": "603ebeb9e7b9d288492a07af"
    },
    {
      "sections": [
        "Configure transaction traces",
        "Configure transaction trace settings via agent",
        "Configure transaction traces using server-side configuration",
        "Configure traces for specific (key) transactions",
        "Important",
        "View logs for your APM and infrastructure data",
        "Create custom transactions",
        "Collect HTTP request attributes, parameters",
        "Delete a transaction trace",
        "Delete a single transaction trace",
        "Delete all transaction traces",
        "Tip"
      ],
      "title": "Configure transaction traces",
      "type": "docs",
      "tags": [
        "APM",
        "Transactions",
        "Transaction traces"
      ],
      "external_id": "a79fa758e1b41c2c57f15d20bd8fd398a47d6414",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/transactions/transaction-traces/configure-transaction-traces/",
      "published_at": "2021-12-25T06:15:16Z",
      "updated_at": "2021-11-14T10:20:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In APM, transaction traces record in-depth details about your application's transactions and database calls. You can edit the default settings for transaction traces. Configure transaction trace settings via agent You can customize your transaction trace settings via New Relic agent configuration files and other \"local\" configuration methods such as environment variables. For more information about transaction trace configuration options, see the specific New Relic language agent's documentation: C SDK Go Java .NET Node PHP Python Ruby Configure transaction traces using server-side configuration The ability to configure transaction traces using server-side configuration depends on the New Relic agent. If server-side configuration is not supported, the transaction trace settings will be visible in the UI but not editable. If server-side configuration settings are available for your New Relic agent, you can see them at the following: one.newrelic.com > APM > (select an app) > Settings > Application > Server-side agent configuration. Transaction trace settings available using server-side configuration will differ depending on the New Relic agent you use. The UI includes descriptions of each. Settings in the UI may include: Transaction tracing and threshold Record SQL, including recording level and input fields Log SQL and stack trace threshold SQL query plans and threshold Error collection, including HTTP code and error class Slow query tracing Thread profiler Cross application tracing Configure traces for specific (key) transactions If you want to monitor or alert on a transaction differently than other transactions, make it a key transaction. This is useful, for example, when you want to set a transaction-specific Apdex that is different from your general Apdex T threshold. Changing a key transaction's Apdex changes the likelihood that it creates a transaction trace. For example: If you want to make it more likely a key transaction would generate transaction traces, lower its Apdex T value. If you want to make a key transaction less likely to be traced, raise its Apdex T value. Important If you have the transaction trace threshold set to a number of seconds, and not to the default Apdex setting, the number-of-seconds threshold will act as the threshold for all transactions, even for key transactions that have custom Apdex settings. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Create custom transactions You can create custom transactions for app activity that isn't being automatically captured as a transaction by the New Relic agent. For more information, see Custom instrumentation. Collect HTTP request attributes, parameters For data security reasons, transaction traces do not collect potentially sensitive HTTP request attributes, sometimes called parameters. Traces do collect some basic HTTP request attributes, which New Relic calls agent attributes. To edit attribute collection settings, see the specific New Relic agent: C SDK Go Java .NET Node.js (does not allow HTTP attribute configuration) PHP Python Ruby For more information, see Collect custom attributes. Delete a transaction trace When you delete a transaction trace, it is deleted permanently. Delete a single transaction trace To delete a transaction trace record permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Under Transaction traces click on the trace you want to delete. On the details page, select Delete this trace. Delete all transaction traces To delete all traces for the selected app permanently: Go to one.newrelic.com > APM > (select an app) > Monitor > Transactions. Click Delete all traces. It may take fifteen minutes or more for all transaction trace records to disappear from the UI. To delete all traces for your account, contact us at support.newrelic.com. Tip If you are doing general record cleanup, you may also want to delete databases and slow query traces or error traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.1682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure <em>transaction</em> <em>traces</em>",
        "sections": "Configure <em>traces</em> for specific (key) <em>transactions</em>",
        "tags": "<em>Transaction</em> <em>traces</em>",
        "body": "In <em>APM</em>, <em>transaction</em> <em>traces</em> record in-depth details about your application&#x27;s <em>transactions</em> and database calls. You can edit the default settings for <em>transaction</em> <em>traces</em>. Configure <em>transaction</em> <em>trace</em> settings via agent You can customize your <em>transaction</em> <em>trace</em> settings via New Relic agent configuration"
      },
      "id": "603eb20028ccbc5775eba76a"
    }
  ],
  "/docs/browser/browser-monitoring/browser-pro-features/ajax-page-identify-time-consuming-calls": [
    {
      "sections": [
        "Use content types and text formats",
        "Docs meta content (frontmatter)",
        "Document body",
        "Page templates"
      ],
      "title": "Use content types and text formats",
      "type": "docs",
      "tags": [
        "Tech writer style guide",
        "Processes and procedures"
      ],
      "external_id": "606039ea3f3b44fdecc1bd2d03fd61d77c594db8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/style-guide/writing-docs/processes-procedures/use-content-types-text-formats/",
      "published_at": "2021-12-25T17:36:34Z",
      "updated_at": "2021-11-26T05:15:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our docs site is made up of different content types and templates. Most of the time, the default page content type and the basic template will have everything you'll need. Read on for more information about our page types. Docs meta content (frontmatter) Thr top of every doc begins with a set of metadata. Read on for more information about this metadata content: Meta content field Description Title Whenever possible, provide an action-oriented or task-oriented title; for example, \"AJAX page: Identify time-consuming calls.\" In general, use sentence case. Capitalize only the first word. Do not capitalize any other word in the title unless it's a proper noun, such as a specific product name, or it follows a colon (:). If you're looking for ideas on how to choose a title, browse the titles of similar docs. The title used in the sidebar (left navigation pane) is set in the nav file. type For the basicDoc template, use page or omit type. If omitted, the default type is page and the basicDoc template is used. template The template determines the basic layout and style of a page. Use basicDoc for more pages. tags Keywords related to your doc. Through some technical wizardry, they generate Related resources links in the right nav area. Start each topic with a - on a new line. A topic can include multiple words separated by spaces. japaneseVersion The URL to the Japanese language version of the doc. Leave this blank if there isn't a Japanese version. Document body The document body is where you edit the page content. Use the GitHub Markdown format when you write content. Page templates For most situations, use the basicDoc page template. Read on for information about our other page templates. Content type Description Basic page A standard HTML webpage without special fields. This content type is used for the majority of content on the site. API doc This format is for API reference documentation. For more information, see apiStyleGuidelines (for style guidelines) and Work with the API doc content type (for how to use and configure). Attribute definition This format is for defining attributes and event types. These definitions are shared with the UI via the data dictionary service. For more information, see Work with attribute definition content type. Landing pages This format is for a more user-friendly and readable landing page, which replaces the standard taxonomy list views. For more information, see Working with landing pages. Release notes This format includes specific fields for release notes. Users rely on release notes to keep up with smaller changes in the product, particularly for downloadble software like the agents. For more information, see Create release notes. What's New posts This format includes specific fields for product announcements. What's New posts are created by PMM for larger announcements. They're available in the docs site, but they're also visible in the New Relic One UI. For more information, see What's New style guidelines. Troubleshooting doc This format is for troubleshooting docs in a Problem-Solution-Cause format. For more information, see Troubleshooting docs guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 2030.2139,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Page</em> templates",
        "body": " of metadata. Read on for more information about this metadata content: Meta content field Description Title Whenever possible, provide an action-oriented or task-oriented title; for example, &quot;<em>AJAX</em> <em>page</em>: <em>Identify</em> <em>time</em>-<em>consuming</em> <em>calls</em>.&quot; In general, use sentence case. Capitalize only the first word. Do"
      },
      "id": "61b35517196a677196a59e07"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/attribute-dictionary/",
      "sections": [
        "New Relic data dictionary",
        "AjaxRequest",
        "AwsLambdaInvocation",
        "AwsLambdaInvocationError",
        "BrowserInteraction",
        "BrowserTiming",
        "ContainerSample",
        "DistributedTraceSummary",
        "InfrastructureEvent",
        "JavaScriptError",
        "Metric",
        "Mobile",
        "MobileCrash",
        "MobileHandledException",
        "MobileRequest",
        "MobileRequestError",
        "MobileSession",
        "NetworkSample",
        "NrAiIncident",
        "NrAuditEvent",
        "NrConsumption",
        "NrDailyUsage",
        "NrIntegrationError",
        "NrMTDConsumption",
        "NrUsage",
        "PageAction",
        "PageView",
        "PageViewTiming",
        "ProcessSample",
        "Span",
        "StorageSample",
        "SyntheticCheck",
        "SyntheticRequest",
        "SyntheticsPrivateLocationStatus",
        "SyntheticsPrivateMinion",
        "SystemSample",
        "Transaction",
        "TransactionError",
        "WorkloadStatus"
      ],
      "published_at": "2021-12-26T01:43:57Z",
      "title": "New Relic data dictionary",
      "updated_at": "2021-12-15T01:44:16Z",
      "type": "docs",
      "external_id": "cbca3a897621bcbb31159067d6d4ec27c5178fe4",
      "document_type": "views_page_content",
      "popularity": 1,
      "body": "AjaxRequest Data source : Browser agent An AjaxRequest event is created automatically when an Ajax request occurs during a BrowserInteraction event. The event attributes track geographic and browser info. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming groupedRequestUrl The grouped URL of the AJAX request. For example: myapp.com/acct/*/ajax. AjaxRequest Span hostname The fully qualified domain name (FQDN) of the request URL. AjaxRequest httpMethod enum The HTTP method of the AJAX request. Example: POST. AjaxRequest httpResponseCode enum The HTTP response code. Example: 200. AjaxRequest jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError port enum The request port. AjaxRequest Span priority Likelihood this event will be saved. AjaxRequest regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming requestBodySize bytes (B) The payload size of the request body, in bytes. AjaxRequest requestUrl The URL of the AJAX request. For example: myapp.com/acct/1/ajax. AjaxRequest responseBodySize bytes (B) The payload size of the response body, in bytes. AjaxRequest session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToLoadEventStart seconds (s) The time, in seconds, from the start of the AJAX request to the start of its load event. This value represents the duration of the AJAX request with single page app (SPA) monitoring. For more information, see the Mozilla developer documentation about XMLHttpRequest load events. AjaxRequest timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming AwsLambdaInvocation Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. This event captures overall function timing and associated metadata. A single AwsLambdaInvocation event is generated for each invocation. Attribute name Definition Data types aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocation AwsLambdaInvocationError databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocation AwsLambdaInvocationError externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocation AwsLambdaInvocationError Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocation AwsLambdaInvocationError Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.status bytes (B) The response code for an HTTP request AwsLambdaInvocation totalTime seconds (s) The sum of all async components' duration, in seconds. An async component is a method or function where there is no instrumented encapsulating method or function. AwsLambdaInvocation Transaction traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocation AwsLambdaInvocationError AwsLambdaInvocationError Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. It's generated when an error occurs during a Lambda function invocation. Attribute name Definition Data types aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocation AwsLambdaInvocationError databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocation AwsLambdaInvocationError error.class The class name or type for the error. This will be server and platform specific. AwsLambdaInvocationError TransactionError error.message The error message for the transaction. This will be server and platform specific. AwsLambdaInvocationError TransactionError externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocation AwsLambdaInvocationError Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocation AwsLambdaInvocationError Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError stackTrace The error stack trace. The format will be different depending on the agent language. AwsLambdaInvocationError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span transactionName Name of the transaction in which the error occurred. Example value: Controller/customers/show. Value may be 'Unknown' if an error occurs outside of a transaction. AwsLambdaInvocationError TransactionError type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocation AwsLambdaInvocationError BrowserInteraction Data source : Browser agent A BrowserInteraction represents a unit of work in a browser session, triggered by a user interacting with the webpage. It captures information about the session, AJAX calls and custom JavaScript timing that occurred as a result of the interaction. Initial load and route changes are captured as special types of browser interactions, and are used for SPA monitoring. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError ajaxCount count A count of all XHRs included in the timing of a SPA interaction. BrowserInteraction appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming backendTransactionName The name of the backend transaction that served the initial page load. BrowserInteraction browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming category The type of interaction; either initial page load, route change, or custom. BrowserInteraction city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming duration seconds (s) The total time elapsed of the interaction event BrowserInteraction eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming firstContentfulPaint firstContentfulPaint is the point when the browser renders the first bit of content from the DOM, which may be text, an image, SVG, or a <canvas> element. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstContentfulPaint. See Compatibility and requirements for New Relic Browser for additional information about firstContentfulPaint browser compatibility. BrowserInteraction PageView firstPaint firstPaint marks the point when the browser renders anything that is visually different from what was on the screen prior to navigation. This includes non-default background paint and the enclosing box of an iframe. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstPaint. See Compatibility and requirements for New Relic Browser for additional information about firstPaint browser compatibility. BrowserInteraction PageView jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError previousGroupedUrl The grouped version of the URL in the browser at the start of the interaction. BrowserInteraction previousRouteName The route name of the page at the start of the interaction. This is the last value passed by setCurrentRouteName before the start of the interaction. BrowserInteraction previousURL The ungrouped URL in the browser at the start of the interaction. BrowserInteraction regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span targetGroupedUrl The grouped version of the URL in the browser at the end of the interaction. BrowserInteraction targetRouteName The route name for the page at the end of the interaction. The last value passed by setCurrentRouteName before the end of the interaction. BrowserInteraction targetUrl The ungrouped URL in the browser at the end of the interaction. BrowserInteraction timeToConnectEnd seconds (s) The time, in seconds, from the start of the interaction to the connectEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToConnectStart seconds (s) The time, in seconds, from the start of the interaction to the connectStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomComplete seconds (s) The time, in seconds, from the start of the interaction to the domComplete, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventEnd seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventStart seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomInteractive seconds (s) The time, in seconds, from the start of the interaction to the domInteractive, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomLoading seconds (s) The time, in seconds, from the start of the interaction to the domLoading, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupEnd seconds (s) The time, in seconds, from the start of the interaction to the domainLookupEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupStart seconds (s) The time, in seconds, from the start of the interaction to the domainLookupStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToFetchStart seconds (s) The time, in seconds, from the start of the interaction to the fetchStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToLoadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the loadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLoadEventStart seconds (s) The time, in seconds, from the start of the interaction to the loadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information, see our documentation about instrumentation for the Navigation Timing API. BrowserInteraction timeToRedirectEnd seconds (s) The time, in seconds, from the start of the interaction to the redirectEnd, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRedirectStart seconds (s) The time, in seconds, from the start of the interaction to the redirectStart, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRequestStart seconds (s) The time, in seconds, from the start of the interaction to the requestStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseEnd seconds (s) The time, in seconds, from the start of the interaction to the responseEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseStart seconds (s) The time, in seconds, from the start of the interaction to the responseStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToSecureConnectionStart seconds (s) The time, in seconds, from the start of the interaction to the secureConnectionStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the unloadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventStart seconds (s) The time, in seconds, from the start of the interaction to the unloadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span trigger The cause of the route change or page load. The default values are click, submit, popstate, or initial page load. For a custom event created with the API, the default value for trigger will be api. This value can also be set via the API. BrowserInteraction userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming BrowserTiming Data source : Browser agent BrowserTiming is a custom event that captures SPA timing data for browser interactions started using the custom createTracer SPA API method. BrowserTiming contains many of the same attributes used by other events, especially AjaxRequest. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming browserTimingName The name of the event. This is taken from the name argument of createTracer. BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserTiming timeToTracedCallbackStart seconds (s) The time in seconds from the start of the custom tracer until the start of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span tracedCallbackDuration seconds (s) The duration in seconds of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming ContainerSample Data source : Infrastructure This event is reported by the New Relic Infrastructure agent. It collects data from all the Docker containers on the host (which may or may not be running). It includes the container's ID, name, image, image name, and metrics about CPU, memory and networking. We take a snapshot of this data every 15 seconds for each container and package it into this event, which is then sent to New Relic. This data appears on the Containers UI page. Attribute name Definition Data types StorageDataAvailableBytes bytes (B) Data space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataTotalBytes bytes (B) Total Data space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsagePercent percentage (%) Percent of Data space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsedBytes bytes (B) Data space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataAvailableBytes bytes (B) Metadata space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataTotalBytes bytes (B) Total Metadata space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsagePercent percentage (%) Percent of Metadata space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsedBytes bytes (B) Metadata space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample commandLine The command line used in the container. ContainerSample containerId ID The unique Docker container ID. ContainerSample cpuKernelPercent percentage (%) CPU time percentage used in kernel space. ContainerSample cpuLimitCores count Number of cores available for the container. ContainerSample cpuPercent percentage (%) CPU usage percentage used. ContainerSample cpuShares count Number of CPU shares assigned to the container. ContainerSample cpuThrottlePeriods count Total number of periods throttled. ContainerSample cpuThrottleTimeMs milliseconds (ms) Total throttling time in milliseconds. ContainerSample cpuUsedCores percentage (%) CPU usage per core. ContainerSample cpuUsedCoresPercent percentage (%) CPU usage percentage per core. ContainerSample cpuUserPercent percentage (%) CPU time percentage used in user space. ContainerSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample image ID The Docker image ID for the image the container is based on. ContainerSample imageName The Docker image name for the container. ContainerSample label_KEY Docker labels associated with this container (where KEY represents a custom label's key value). ContainerSample memoryCacheBytes count The amount of memory used by the container that can be associated precisely with a block on a block device. ContainerSample memoryKernelUsageBytes bytes (B) The amount of current kernel memory allocation. ContainerSample memoryResidentSizeBytes bytes (B) The amount of memory that doesn't correspond to anything on disk: stacks, heaps, and anonymous memory maps. ContainerSample memorySizeLimitBytes bytes (B) The total amount of memory the container is allowed to use. ContainerSample memorySoftLimitBytes bytes (B) The soft limit of memory usage equivalent to the memory reservation of the container. ContainerSample memorySwapLimitBytes bytes (B) The total amount of memory the container is using, including swap. ContainerSample memorySwapLimitUsagePercent percentage (%) This metric is calculated as the percentage of memorySwapUsageBytes over memorySwapLimitBytes, if the limit exists. ContainerSample memorySwapOnlyUsageBytes bytes (B) The amount of swap memory the container is using. This memory doesn't include non-swap memory. ContainerSample memorySwapUsageBytes bytes (B) The amount of memory swap the container is using, including swap. ContainerSample memoryUsageBytes bytes (B) This metric doesn't account for swap usage. ContainerSample memoryUsageLimitPercent percentage (%) This metric is calculated as the memoryUsageBytes percentage over memorySizeLimitBytes, if the limit exists. ContainerSample name The Docker container name. ContainerSample networkRxBytes bytes (B) Total number of received bytes. ContainerSample networkRxBytesPerSecond rate Number of received bytes per second. ContainerSample networkRxDropped count Total number of received packets dropped. ContainerSample networkRxDroppedPerSecond rate Number of received packets dropped per second. ContainerSample networkRxError count Total number of received packets with error. ContainerSample networkRxErrorsPerSecond rate Number of received packets with error per second. ContainerSample networkRxPackets count Total number of received packets. ContainerSample networkRxPacketsPerSecond rate Number of received packets with error per second. ContainerSample networkTxBytesPerSecond rate Number of transmitted bytes per second. ContainerSample networkTxDropped count Total number of transmitted packets dropped. ContainerSample networkTxDroppedPerSecond rate Number of transmitted packets dropped per second. ContainerSample networkTxErrors count Total number of transmitted packets with error. ContainerSample networkTxErrorsPerSecond rate Number of transmitted packets with error per second. ContainerSample networkTxPackets count Total number of transmitted packets. ContainerSample networkTxPacketsPerSecond rate Number of transmitted packets per second. ContainerSample networksTxBytes count Total number of bytes transmitted. ContainerSample restartCount count The number of times the container was restarted. ContainerSample state It can be: created, restarting, running, removing, paused, exited, or dead. ContainerSample status Holds the current container state. ContainerSample warningViolationCount count The number of times that alert conditions violated warning thresholds, causing warning violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample DistributedTraceSummary Data source : Distributed Tracing This event contains summary data about a distributed trace and provides an aggregated view of distributed tracing data. DistributedTraceSummary events are generated by New Relic and are triggered by distributed tracing data from agents or the Trace API. Attribute name Definition Data types accountIds A comma delimited list of newrelic accountIds that took part in this trace. DistributedTraceSummary backend.duration.ms milliseconds (ms) The total elapsed time in milliseconds of all backend services in this trace. DistributedTraceSummary backend.timestamp milliseconds (ms) The timestamp of the first span in this trace from a backend entity. In distributed tracing, any events that are not from client-side applications contributed to the backend duration. DistributedTraceSummary duration.ms The duration of the entire distributed trace, including both backend and client-side entities. the earliest span to the latest. DistributedTraceSummary entityCount count The number of unique entities that took part in this trace. DistributedTraceSummary entityGuids A comma delimited list of entity GUIDs for entities that participated in this trace. These GUIDs are assigned by New Relic for the New Relic-monitored entity (host, application, etc.). Each GUID is stored as a Base64 encoded value. DistributedTraceSummary errorCount count The number of events in this distributed trace that were identified as errors. DistributedTraceSummary newRelic.traceFilter.type The name of the trace filter used by the Infinite Tracing trace observer to select this trace. DistributedTraceSummary Span root.entity.accountId The New Relic account ID that the root entity of this trace reports data to. DistributedTraceSummary root.entity.guid The entity GUID associated with the root entity of this trace. DistributedTraceSummary root.entity.name The name of the root entity of this trace. DistributedTraceSummary root.span.duration.ms milliseconds (ms) The elapsed time in milliseconds of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary root.span.id The unique identifier of the root span of this trace. The root of a distributed trace is the first span, and it has a null value for parent.id. DistributedTraceSummary root.span.name The name of the root span of this trace. DistributedTraceSummary root.span.timestamp milliseconds (ms) The timestamp of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary spanCount count The number of events in this distributed trace. Events in a distributed trace can have several event types, including Span, Transaction, and TransactionError. DistributedTraceSummary timestamp milliseconds (ms) The timestamp of the root span in this distributed trace. DistributedTraceSummary trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError InfrastructureEvent Data sources : InfrastructureCloudTrail InfrastructureEvent describes changes (deltas) that occur in a system's live state. When an inventory or system state is added, removed, or changed, Infrastructure will produce an InfrastructureEvent that logs that activity. Attribute name Definition Data types category A New Relic category used to organize events in the UI. For example: automation, notification, and service. InfrastructureEvent changeType A simple classification of the type of change made to the entity: added, modified, or removed. InfrastructureEvent changedPath The fully specified name of the item that changed. This is constructed by taking the source and adding one or more additional path elements that uniquely identify the item that changed. InfrastructureEvent deltaId Delta refers to a recorded change in the system. The deltaId is a number used by New Relic to organize incoming inventory change data. InfrastructureEvent eventId The unique ID of the event, generated by New Relic. InfrastructureEvent format The type of infrastructure event. Each format type includes attributes that may be used to render the event in the UI. InfrastructureEvent newStatus The new agent status: disconnected or connected. InfrastructureEvent newValue If a change is made to the entity, this attribute contains the new value of the inventory that was changed. This will have no value if no change has been made. The value will display approximately 4K bytes of data. InfrastructureEvent oldValue If a change is made to the entity, this attribute contains the old value of the inventory that was changed. This will be blank if no change has been made. InfrastructureEvent provider For integrations that use generic event types (like the DatastoreSample event), the provider value specifies the source of the data (the service, or a sub-category of data from that service). Some Insights events are generic and are used by several integrations. For example, the DatastoreSample event is used by several integrations, including the AWS DynamoDB integration and the AWS RDS integration. In these cases, the provider attribute value represents the source of that attribute. This will usually be the service that data comes from or, for integrations that use several provider values, a certain sub-category of data from that service. When a provider value is present for a generic event, that event will have additional integration-specific attributes attached to it. Here’s an example of an Insights NRQL query that returns the attributes present for a DatastoreSample event reported by the AWS RDS integration: SELECT * from DatastoreSample where provider = 'RdsDbCluster' InfrastructureEvent source The fully specified origin of this inventory item. This is typically in the form category/plugin, where plugin is the generic word used for the tool that gathered this data. InfrastructureEvent summary A summary of the change that happened. Uses a human-friendly string, such as Agent disconnected. InfrastructureEvent violationUpdateType The type of change to the violation: For example: open or closed. InfrastructureEvent JavaScriptError Data source : Browser agent As JavaScript errors are triggered, we capture details as events. The JavaScriptError event contains information to help you segment errors to understand how they impact performance. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The identification number for the reporting browser agent. JavaScriptError appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserStackHash ID An unique identifier generated for a stack trace. The browserStackHash for a stack trace is different across different browsers. An identical stack trace will generate the same identifier. JavaScriptError city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming entityGuid The unique identifier of the monitor referenced in New Relic One. JavaScriptError SyntheticCheck SyntheticRequest errorClass The error type of the JavaScript Error object. Examples: ReferenceError, SyntaxError, and UncaughtException. JavaScriptError errorMessage The error message that was delivered. JavaScriptError firstErrorInSession A value to indicate whether or not this was the first JS error in the session. Example: true. JavaScriptError monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming releaseIds ID The releases in which the app was updated. Example: {\\\"jQuery\\\":\\\"v3.1.1\\\",\\\"multiverse\\\":\\\"96e9ac7\\\"}. JavaScriptError requestUri The URI of the requested resource. JavaScriptError session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span stackHash ID A unique identifier generated by the Browser agent for a stack trace. The stackHash for a stack trace is the same across different browsers. An identical stack trace will generate the same identifier. JavaScriptError stackTrace A collection of the active stack frames when the error occurred. JavaScriptError stackTraceGzip A compressed version of the stackTrace attribute. JavaScriptError timestamp The time that the error occurred, in Unix time. JavaScriptError transactionName The full metric name of the transaction in which the error occurred, or Unknown if the error occurs outside of a transaction. JavaScriptError userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Metric Data source : Metrics Represents a metric data point (a measurement over a range of time, or a sample at a specific point in time) with multiple attributes attached, which allow for in-depth analysis and querying. This metric data comes from our Metric API, our Telemetry SDKs, network performance monitoring, and some of our open-source exporters/integrations. Attribute name Definition Data types endTimestamp milliseconds (ms) The end of the time range associated with the metric, in Unix time, in milliseconds. This is calculated by adding the metric interval to the timestamp of the metric (timestamp + interval.ms). Metric interval.ms milliseconds (ms) The length of the time window. Metric metricName Name of the metric. Metric newrelic.source The source of this data. For example: metricAPI. Metric timestamp milliseconds (ms) The start time for the metric, in Unix time. Metric Mobile Data source : Mobile A Mobile event is created when a crash occurs, when an interaction ends or has run for 1 second, or if a session completes after the app is closed, backgrounded, or has run for 10 minutes. Mobile events were once the only event type and were generated for every event, but now there are several specialized event types. Recommendation: Upgrade to the most recent mobile monitoring agent version to take full advantage of the new event types. Attribute name Definition Data types category The type of data, either session or interaction. Mobile MobileSession interactionDuration For interaction category events only. This is the total time for the interaction to render on the device. In addition to render time, this usually includes all external calls associated with the interaction. Currently, this attribute is measured in seconds for Android devices and in milliseconds for iOS devices. Mobile name For interaction category events only. This is the label of the interaction associated with the event. It is by default assigned by New Relic. For example: ApplicationsListFragment or Display iOS_Example.MasterViewController. Mobile reportedTimestampMs For interaction category events only. The UTC based timestamp for when the event was sent to New Relic. This is different from the attribute ‘timestamp’, which is when the event began. Mobile MobileCrash Data source : Mobile The MobileCrash event is created when an app crashes. MobileCrash includes attributes such as crash line number, class, and crash message. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appToken The mobile application license token. MobileCrash appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession architecture The processor architecture of the device. For example: armv7 or arm64. MobileCrash asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession crashException The exception associated with the crash, if one is present. For example: java.lang.NullPointerException. MobileCrash crashFingerprint ID The New Relic-generated fingerprint used to uniquely identify the crash and other crashes identical to this one. MobileCrash crashLocationFile The file in which the crash occurred. MobileCrash crashMessage The message associated with the crash, if one is present. MobileCrash deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceName The device's name. MobileCrash deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession diskAvailable bytes (B) Space available on the device, in bytes. MobileCrash interactionHistory The client interactions with the application that led to the crash. MobileCrash isFirstOccurrence A boolean value indicating whether or not this was the first occurrence of the crash. MobileCrash lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession modelNumber The model of the device. This is the same as the session-level deviceModel attribute. MobileCrash networkStatus The type of network that the device was on at the time of crash, such as wifi or LTE. MobileCrash newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession occurrenceId ID The ID for this instance of the crash. MobileCrash orientation The orientation of the device, such as landscape or portrait. MobileCrash osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession parentProcess The parent process that launched the crashing process. MobileCrash parentProcessId ID The parent identification number (PID) of the parent process. MobileCrash platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession processId ID The PID of the previously running process on the device. MobileCrash processName The name of the previously running process. MobileCrash processPath The path to the binary. MobileCrash reportedTimestampMs The UTC timestamp for when the event was received by New Relic. (This is different from timestamp, which is when the MobileSession event began that crashed.) MobileCrash runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession symbolicated A boolean value indicating whether or not the crash was properly symbolicated. MobileCrash timeSinceLastInteraction milliseconds (ms) The time, in milliseconds, since the interaction before a crash event. MobileCrash userImageUuids ID The array of build UUIDs for applications and libraries. MobileCrash uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileHandledException Data source : Mobile MobileHandledException is sent when an exception is caught and is used for non-fatal exceptions reported to New Relic using the recordHandledException API for Android or iOS. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession exceptionAppBuildUuid ID The build uuid of the application binary in which the exception was caught. MobileHandledException exceptionCause The unsymbolicated, platform-specific cause of the exception. MobileHandledException exceptionLocation New Relic defined location of an exception. Contains a combination of exception file name, class, line number, and method. MobileHandledException exceptionLocationClass The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationFile The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLibraryOffset For XCFramework agent only. The library offset of the library that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLine Comes from the exception: The line number where the exception was generated. Only present if symbolication succeeded. MobileHandledException exceptionLocationMethod The method that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionMessage The unsymbolicated message from the exception. It can be user-generated or a generic system message. For Android, this is the Throwable message. MobileHandledException exceptionName The unsymbolicated exception type. MobileHandledException fingerprint ID The New Relic-generated identifier used to group like exceptions. MobileHandledException handledExceptionUuid ID The unique ID of the exception event. MobileHandledException lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession libraryName For XCFramework agent only. The library name where the exception was generated. MobileHandledException libraryStartAddr For XCFramework agent only. The library start address where the exception was generated. MobileHandledException memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession occurrenceTimestamp Agent-reported epoch timestamp of the handled exception. MobileHandledException osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession timestamp Epoch timestamp of the handled exception. This exception timestamp represents the time New Relic created the event, if it's older than two days or some other unexpected time. MobileHandledException uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileRequest Data source : Mobile A MobileRequest event is created when an HTTP request successfully completes, resulting in a response code below 400. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestFingerprint ID The New Relic-generated identifier used to group like request events. MobileRequest requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileRequestError Data source : Mobile A MobileRequestError is used for HTTP errors or network failures. HTTP errors are HTTP requests that have a status code greater than 400. A network failure is a HTTP request that results in no response. The event is sent when the HTTP request completes. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError errorType Either HTTPError or NetworkFailure, depending on whether the error is a result of a failed request to a host or a failure on the cellular network. MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession networkError The error message associated with the iOS NSURL Error code. See networkErrorCode for more information. MobileRequestError networkErrorCode If the error is a network error, this is the iOS network error code. For Android applications, this is the mapped value. MobileRequestError newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestErrorFingerprint ID The New Relic-generated identifier used to group like request error events. MobileRequestError requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseBody Optional: The response that is sent from the requestDomain for the HTTP error, up to 4096 bytes. MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileSession Data source : Mobile A MobileSession event is sent when an app is closed, backgrounded, or when 10 minutes of active use has elapsed. This is the source of the general session data used by the other mobile monitoring events. MobileSession captures attributes such as device type, device OS, and geographical information. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession category The type of data, either session or interaction. Mobile MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession install Indicates true only if the current session is the first session after app install. MobileSession lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicAgent The New Relic agent running on the application. For example: the iOSAgent or the androidAgent. MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionDuration seconds (s) The length of time for which the user used the application in seconds. If the session crashes, sessionDuration is not captured (although other events and attributes are still recorded). For sessions longer than 10 minutes, events in the Interaction and Custom event categories are sent to Insights while the session is ongoing, and therefore do not have sessionDuration attributes. Events recorded near the end of the session will include the duration, as will the Session event category. MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession timeSinceLoad seconds (s) The time, in seconds, from the beginning of the mobile session to the time the event occurred. MobileSession timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession upgradeFrom Indictates previous version number only if this is the first launch after app upgrade. MobileSession uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession NetworkSample Data source : Infrastructure NetworkSample event captures the descriptive and state information for each network device associated with a server. It includes the device's interface and address information, as well as current usage data. New Relic samples this data every 10 seconds for each attached network interface and packages it into a NetworkSample event, then sends the raw data to New Relic's collectors every 60 seconds. Attribute name Definition Data types agentName The name of the agent (Infrastructure). NetworkSample ProcessSample StorageSample SystemSample agentVersion The version of the New Relic Infrastructure agent. NetworkSample ProcessSample StorageSample SystemSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample entityID ID New Relic's unique ID number for the entity that is reporting data. This is used by New Relic to distinguish between customers and their entities. NetworkSample ProcessSample StorageSample SystemSample fullHostname The fully qualified (DNS) hostname. NetworkSample ProcessSample StorageSample SystemSample hardwareAddress The unique hardware address of the interface. NetworkSample hostname The short version of the entity's name. NetworkSample ProcessSample StorageSample SystemSample interfaceName The interface name as reported by the operating system.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.04807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>AjaxRequest</em>",
        "body": "Request BrowserInteraction BrowserTiming JavaScriptError <em>Page</em>Action <em>Page</em>View <em>Page</em>ViewTiming Span <em>time</em>SinceBrowserInteractionStart seconds (s) The <em>time</em> in seconds between the start of the BrowserInteraction and the start of the request. <em>Ajax</em>Request BrowserTiming <em>time</em>ToLastCallbackEnd seconds (s) The duration, in seconds"
      },
      "id": "603f53b164441f41894e8875"
    },
    {
      "image": "https://docs.newrelic.com/static/a7f12a1603efe1412d15b9a51a312548/c1b63/browser_sessiontraces_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/browser-pro-features/session-traces-explore-webpages-life-cycle/",
      "sections": [
        "Session traces: Explore a webpage's life cycle",
        "Identify problems and solutions",
        "Requirements",
        "Select a session trace",
        "View session trace details",
        "Session segment definitions",
        "Slow JavaScript execution and repainting"
      ],
      "published_at": "2021-12-25T05:04:48Z",
      "title": "Session traces: Explore a webpage's life cycle",
      "updated_at": "2021-11-06T16:42:11Z",
      "type": "docs",
      "external_id": "2d34d77c7661be3ebd3f04a8188fe36d7233895f",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's session traces provide a detailed timeline of the load and interaction events during a webpage's full life cycle, for as long as ten minutes. Page load timing, individual asset loads, user interactions, AJAX requests, callbacks, errors, and other events appear in an interactive timeline which includes a detailed waterfall visualization, a heat map overview, and highlighted metrics and problems related to that session. Identify problems and solutions Session traces help you understand: How users experience your page load, including time to DOM load, time waiting for AJAX requests to complete, and the user's interactions with the page How the New Relic metrics reflect your end users' experiences What is the sequence of JavaScript and browser events, which take longer than others, and when each event occurs Where bottlenecks occur, and what may be causing them Why one page load may be slower than others, by providing the context for individual events during a session By connecting performance to user experience and interactions to performance, this detailed and intuitive visualization of all events in the user's session can help pinpoint problem areas and easily identify solutions. Requirements To use browser session traces feature, make sure you meet these requirements: Requires the Pro or Pro+SPA agent type Your agent version must support browser monitoring. If you're using multiple names for an app, session traces will only report to the most specific application. Browser randomly captures traces only from browsers that support the Resource Timing API. Select a session trace The Session traces index lists the most recent traces based on the time picker selection for the selected app. Session traces are randomly sampled and stored at a rate of 90/hour. You can page through up to 500 traces at a time. Additionally, you can sort and search the list by attributes, including: Full URL, with query string parameters removed Browser type Started at date/time Page load time one.newrelic.com > Browser > (select an app) > Session traces: You can select a session trace from the browser index. To select a specific session trace: Go to one.newrelic.com and click Browser > (select an app) > Session traces. To locate a session trace from a different date or time period, use the time picker. To limit the index to a specific type of trace, use the search window. To view detailed information, select the session trace's link. View session trace details The Session trace details page provides summary information about the trace, a heat map with timing details, and a waterfall of events that you can explore. The color-coded legend identifies the page load events during the webpage's life cycle. For apps that have been deployed using the copy/paste method, browser monitoring includes web app and queue time in Network time as part of the page load timing process. This is because browser relies on the server-side agent to pass the application values to the browser agent through auto-injection. You can view detailed information about how this \"back end\" time breaks down from the browser's point of view. The session traces report on all the network related events available, so you can see on a case-by-case basis how the browser spends time on DNS lookups and other network events. one.newrelic.com > Browser > (select an app) > Session traces > (select a trace): Use Browser's session trace details to examine events and identify problems during the end user's webpage session. To navigate through a session trace, explore the waterfall chart by scrolling vertically through the event stack, or select individual events to view their details. If you want to... Do this... View the web page for this session trace Select the trace link. Jump to a specific time Select the time indicator or event on the heat map. View details about individual events Select any event in the waterfall chart. From there, select View full details if applicable. Change the location on the session trace Click on the heat map, or scroll vertically through the waterfall chart. Zoom in or out of the overall trace Select the plus or minus icons below the heat map. Share the session trace information Create a permalink to paste into a form, ticket, email, etc. Session segment definitions Important session trace measurements are displayed in the upper right corner of the Session traces page. The first four measurements represent how long into a session that the segment ended. For example, if Page Load is 0.202s, that means that the page load event completed 0.202 seconds after the request began. Session segment Description Backend The time from when the request began to when backend activity finished and DOM loading began. DOM processing The time from when the request began to when DOM processing finished. Page load The time from when the request began to when the page load event fired. Waiting on AJAX The time from when the request began to when AJAX activity ended. First interaction The time from when the request began to when the first user activity, like a mouse click or a scroll, was recorded. Duration The total duration of the session. Slow JavaScript execution and repainting Session traces help you identify callbacks in your JavaScript code that execute slowly and block the execution of subsequent calls on the browser's main thread. These calls should execute quickly in order to allow the browser to quickly repaint the page in response to user actions. Session traces highlight any callbacks longer than 33ms. If called in rapid succession (such as inside a requestAnimationFrame loop), callbacks longer than 33ms reduce the frame rate below 30 frames per second. This speed seems sluggish to users.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.61543,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Identify</em> problems and solutions",
        "body": " timeline which includes a detailed waterfall visualization, a heat map overview, and highlighted metrics and problems related to that session. <em>Identify</em> problems and solutions Session traces help you understand: How users experience your <em>page</em> load, including <em>time</em> to DOM load, <em>time</em> waiting for <em>AJAX</em>"
      },
      "id": "603ecc4de7b9d2843d2a0806"
    }
  ],
  "/docs/browser/browser-monitoring/browser-pro-features/session-traces-explore-webpages-life-cycle": [
    {
      "sections": [
        "Browser monitoring and performance impact",
        "Overall impact",
        "Network impact",
        "Browser agent scripts",
        "Browser agent harvests"
      ],
      "title": "Browser monitoring and performance impact",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "5504ef3846f4bcdae0ff4f58e8c745079d9a5cb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/browser-monitoring-performance-impact/",
      "published_at": "2021-12-25T06:23:54Z",
      "updated_at": "2021-11-25T14:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's JavaScript snippet introduces a nearly invisible impact on website performance and user perception of the time it takes a page to load. The JavaScript is included in a packet of webpage data that is sent anyway. In addition, it immediately begins monitoring for errors and events as the rest of the webpage executes. The negligible amount of overhead required to load the JavaScript results in a significant return of actionable data. Overall impact The JavaScript's overhead takes into consideration both the impact on the user and the impact on your systems' performance: User perception: Typically users cannot detect performance degradations on a website of less than 200ms. Browser's JavaScript adds less than 15ms in aggregated time per page load. This is split up over time, so at no point would a user be able to perceive any performance impact due to the JavaScript. Webserver and systems: Browser app monitoring occurs on the user's browser, not on the server. Processing time does not have an impact on your CPU consumption. In addition, we take additional steps to minimize any potential impact on the apps and webpages being monitored. For example, the \"loader\" script is loaded synchronously in the <HEAD> in order to ensure monitoring is enabled for the entire life cycle of the page. This script is included inline, which eliminates the need for another roundtrip network request to a content delivery network (CDN). The \"loader\" comes with the initial page load. Later in the life cycle of the page, New Relic loads an additional monitoring script asynchronously. This script should not have any perceivable effect to the user and is included in the overall overhead of less than 15ms per page. Network impact Browser monitoring also minimizes network traffic for the end user by aggregating data locally (in the client) and sending it back to New Relic on load, at periodic intervals, on unload, or when data has been collected. (During the browser session's idle periods, transmissions may not be required.) Browser agent scripts The agent consists of two scripts. The first script is inserted inline into the HTML document. The second script is downloaded from the content delivery network (js-agent.newrelic.com) when the window load event happens. Find out about browser agent types here. Script Lite Pro Pro + SPA Inline script size 8.3 KB 22 KB 27 KB Downloaded script size 27 KB 27 KB 38 KB Browser agent harvests Data type Lite Pro Pro + SPA Harvest frequency Page view metrics/events yes yes yes One call. Once the second script is downloaded, we immediately make the first harvest call, which generates page view metrics and the PageView event. This is a JSONP call to bam.nr-data.net or bam-cell.nr-data.net. PageViewTiming events yes yes yes All agent types collect PageViewTiming events. The first harvest happens 10 seconds after the agent initializes, after window load event. After that, we send additional PageViewTiming events every 30 seconds, but only if there's data to send. For information about the event types included in these harvest calls, see the PageViewTiming section of our data dictionary. JavaScriptError metrics/events no yes yes First call when agent initializes; every 60 seconds after that. These calls, sent as metrics data, happen every 60 seconds because we include the Ajax calls that the agent itself makes. This information also applies to Ajax metrics. Ajax metrics no yes yes Sent together with JavaScript errors. Ajax events no yes yes Sent together with BrowserInteraction events. These are collected immediately when an interaction finishes. We only collect interactions for the initial page load and for route changes. We also have an API for generating custom interactions. There will be a separate call for each interaction. Typically, these calls are infrequent because they depend on the user interacting with the page. This information also applies to BrowserInteraction events. Session traces no yes yes First call when agent initializes; after that, every 10 seconds if there is data to send. Session traces send the most data, but they are heavily sampled. Only about 75 page views per hour get enabled to send session trace data. The agent sends data every 10 seconds if it has enough data to send. PageAction events no yes yes First call is made when agent initializes; after that, every 30 seconds if there is data to send. BrowserInteraction events no no yes Sent immediately when an interaction finishes. There will always be at least one interaction that represents the initial page load. Additional interactions are collected only if the URL changes (representing route change). Harvest frequency details for Ajax events apply here as well.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 164.7224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring <em>and</em> performance impact",
        "sections": "Browser monitoring <em>and</em> performance impact",
        "body": "&quot; script is loaded synchronously in the &lt;HEAD&gt; in order to ensure monitoring is enabled for the entire <em>life</em> <em>cycle</em> of the page. This script is included inline, which eliminates the need for another roundtrip network request to a content delivery network (CDN). The &quot;loader&quot; comes with the initial page load"
      },
      "id": "603ec318196a67a757a83dd1"
    },
    {
      "sections": [
        "Introduction to browser monitoring",
        "Tip",
        "More than Real User Monitoring (RUM)",
        "Examine user perceptions",
        "Improve interactive app performance",
        "Correlate front-end and back-end problems",
        "Get started with browser monitoring"
      ],
      "title": "Introduction to browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "4928b2a5981bd2d6263f04b4b882d65adef22779",
      "image": "https://docs.newrelic.com/static/98ad878ffa7b586b779178656f19ec58/c1b63/browser_intro_0.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring/",
      "published_at": "2021-12-26T01:48:40Z",
      "updated_at": "2021-11-25T13:02:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your end-user experience depends on your entire technology stack. You need to quickly understand what's causing a customer complaint or issue. Did the problem come from your infrastructure, your application, or the browsers that ultimately render it? Is it the result of a problematic internet provider, a problem in your own data center with failing CPU or memory, or something else? Tip This doc gives you detailed information about why our browser monitoring solution matters to your business. But if you want to skip ahead, just sign up for a New Relic account. (It's free, forever!) Then, after you install the browser monitoring agent, you can start working with your data. More than Real User Monitoring (RUM) Many websites contain dynamic content that is loaded after the initial page has finished loading, and complex JavaScript code increases the need for error reporting. Browser monitoring in New Relic One provides a Real User Monitoring (RUM) solution that measures the speed and performance of your end users as they navigate to your site from different web browsers, devices, operating systems, and networks. With browser monitoring in New Relic One, you see actionable data about your end users' experience with your app. But browser monitoring in New Relic goes far beyond the initial page load to measure full page life cycle data. For example, our browser UI shows you: Actual performance data, such as by page view popularity and user satisfaction (Apdex) scores Perceived performance data that measures how quickly your async or dynamic visuals and interactive page contents display JavaScript error analytics, stack traces, and line-of-code visibility, to show you the end-user steps leading up to an error itself Session performance with a detailed timeline and heat map of the load and interaction events during a webpage's full life cycle AJAX requests indicating problems with timing, end points, and specific locations in the webpage Hash-based route changes in apps with single-page application (SPA) architectures These tools (and more!) help your teams optimize your end users' page load experience, eliminate bugs, and troubleshoot faster across your full stack. Examine user perceptions Real user data gives insights into actual page performance, but you also need to look into your users' perception of your site's performance. Pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser monitoring agent. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. Additional metrics include: First paint, first contentful paint, and largest contentful paint First input delay First interaction This helps you understand how users experience your site, both from visual and responsiveness standpoints. Improve interactive app performance Our single-page app (SPA) monitoring automatically tracks route changes, initial page loads, and synchronous and asynchronous activity during browser interactions. You can also use our browser agent and SPA API to monitor virtually anything that executes inside the browser. If you are a developer, SPA monitoring can help you: Create faster, more responsive, highly interactive apps. Monitor the throughput and performance that real users are experiencing. Troubleshoot and resolve problems within the context of the page load. Query and visualize the data to assist with business decisions. Bring better apps to the marketplace more quickly. Correlate front-end and back-end problems With New Relic One, you can instrument any type of data you need, such as metrics, events, logs, and traces. This helps you find actionable data about your end users' experience across the stack. For example: Type of data Comments Locations or domains Limit browser monitoring to focus on specific geographical locations or specific types of end-user activity. You can also monitor or block specific domains. Trends in interactions Use our comparative charting feature for a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetic monitors. Distributed tracing Isolate latency from the web browser through back-end services with distributed tracing. The UI helps you see the connection across across a full transaction, from browser activity, to time spent in network, to back-end activity. Browser types Explore your end users' experience with your app segmented by any types of browsers they use, including: Top browsers by throughput Average page load time by platform type (mobile, desktop, and other) Selected browser type by version (for example, Chrome 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Get started with browser monitoring Follow these basic steps, and you'll quickly be up and running in New Relic with browser monitoring! Review the compatibility details and basic requirements for browser monitoring. Install the browser agent. Go to [one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. View summary data from your Browser summary page, then drill down into page load timing details and other UI data. Configure your alerts for key performance data, or use our Applied Intelligence solutions to reduce alert noise, correlate incidents, and automatically detect anomalies. Query and visualize your default data (or customize your own), then analyze what that data says about your business. Customize and share your own charts and dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.2083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Improve interactive <em>app</em> performance",
        "body": " of the load and interaction events during a <em>webpage&#x27;s</em> full <em>life</em> <em>cycle</em> AJAX requests indicating problems with timing, end points, and specific locations in the <em>webpage</em> Hash-based route changes in apps with single-page application (SPA) architectures These tools (and more!) help your teams optimize your"
      },
      "id": "604429a9e7b9d2bde7579a04"
    },
    {
      "sections": [
        "Security for browser monitoring",
        "Reported data",
        "Page view data",
        "AJAX timing data",
        "JavaScript error data",
        "Session trace data",
        "SPA data",
        "URL query strings",
        "Visitor's IP address",
        "Browser types",
        "CDN access",
        "Important",
        "Cookies",
        "JSONP requests"
      ],
      "title": "Security for browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "99cd4023fc519082ebe94082e3a6affd1cc2344f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/security-browser-monitoring/",
      "published_at": "2021-12-25T06:23:06Z",
      "updated_at": "2021-07-09T23:05:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring provides insights into how your application or site behaves when it is loaded in a web browser. Browser only records performance data, as explained in this document. It does not record any data used or stored by the monitored application unless you explicitly configure it to do so. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Reported data Browser reports many different types of data to help you analyze your website's performance. It only reports page view data, unless you have subscribed to Pro features. You can also enable functionality for AJAX requests, JavaScript errors, and session traces. For most data types, browser transmits the data securely using HTTPS encryption. The browser agent transmits data to New Relic's collectors by using either of the domains bam.nr-data.net or bam-cell.nr-data.net. Here is a summary of the types of data reported by browser monitoring. Page view data This data is reported once per page view and consists of: Page load timing data Name of the server-side app controller that served the page, if available (obfuscated in the page and during transmission) Additional custom parameters set by the server-side app controller, if available (obfuscated in the page and during transmission) Additional custom parameters set by the browser agent API, if set prior to page load This information appears on the Page views page. For data security reasons, browser does not record or collect URL query strings. Server-side data can only be collected when the host is also instrumented by New Relic and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. AJAX timing data When enabled, browser periodically reports AJAX timing data until the user navigates away from or closes the page. (New Relic automatically filters out all AJAX requests that take longer than two minutes.) Data includes: Hostnames, ports, and paths (but not search/query parameters) of AJAX request URLs HTTP status code of responses Byte size of request message bodies Name of the server-side app controller servicing the AJAX request and server-side timing data (obfuscated in the page and during transmission), when the browser instrumentation is injected by the New Relic agent Timing data for the AJAX transaction Timing data for the AJAX callbacks This information appears on the AJAX page. JavaScript error data When enabled, browser periodically reports data about every error that occurs on the page until the user navigates away from or closes the page. This information appears on the JavaScript errors page. For each error, the data includes: Exception class of the error Error message containing arbitrary text Stack trace of the error, which may contain function names and URLs of scripts causing the error Error messages typically do not contain any confidential or sensitive information. However, it is possible for messages to be purposefully constructed with sensitive information. Before enabling JavaScript error reporting, ensure that your website does not expose any sensitive information in error messages. Session trace data When enabled, browser periodically reports data on the details of the a single page's life cycle, including user interactions, AJAX loads, and JavaScript errors, until the user navigates away from or closes the page. New Relic automatically stops recording further data after ten minutes. Data includes: Asset load timing details User interactions such as scrolling, mousing, and clicking JavaScript error timing and other JavaScript error information Triggered Javascript events Session traces are captured randomly at a fixed rate from among the monitored page views. Session trace information appears on the Session traces page. SPA data If you use browser's single-page app (SPA) monitoring, New Relic reports the following data once per page load or route change. Browser data for page views, AJAX timing, JavaScript errors, and session traces Hash fragments associated with SPA route changes Additional custom parameters added from the SPA API When SPA monitoring has been enabled, this information appears on the Page views page. Server-side data can only be collected when the host is also instrumented by New Relic, and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. URL query strings The browser agent uses the HTTP referer attribute to track page URLs. URLs can sometimes contain potentially sensitive user-entered query data (for example, a user's name). For data security reasons, browser does not record or collect URL query strings. Visitor's IP address Browser uses the visitor's IP address to enrich data for additional visitor segmentation. Details such as the ASN and geoID are mapped to browser data from the IP address. For data security reasons, browser does not retain the visitor's IP address for reporting. The IP address is obtained in the HTTP header from the request to the New Relic collector. New Relic does not retain the visitor's IP address after the attributes have been mapped. The IP address value is overwritten within 24 hours of data being collected. Browser types Browser determines the browser type from the User-Agent header and the geographical location based on the browser's IP address. New Relic does not retain the IP address, only the country and region associated with the performance data. This information appears on the selected app's Geography page. Also, details about specific browser types appear on the selected app's Browsers page. CDN access Page load timing requires access to the content delivery network (CDN), where New Relic's utility JavaScript file (nr.js) is hosted. The domain name for the file (js-agent.newrelic.com) remains static, but the number in the path (version) may change periodically. A script tag is injected by the New Relic agent (or pasted into the webpage for standalone apps) that references the JavaScript on the CDN, which is then loaded by the browser. The loaded JavaScript collects and reports the metrics dynamically to either of the domains bam.nr-data.net or bam-cell.nr-data.net. Important If your end users are behind a firewall or proxy and do not have access to the CDN or to New Relic's networks (including bam.nr-data.net and bam-cell.nr-data.net), browser monitoring will not work. Cookies Browser monitoring creates cookies in the end user's browser. If the user has cookies disabled, page load timing (sometimes referred to as real user monitoring or RUM) will not be able to track sessions properly. Also, if the user has an older browser that does not support the Navigation Timing Specification API, page load timing will not be able to track response times as accurately. New Relic's cookies generated by browser agents older than version 995 may not contain the secure attribute. This is because page load timing data transmission in versions before version 995 use HTTP when the page is HTTP, but use HTTPS when the page is HTTPS. All browser agent versions above version 995 will always use the secure flag for cookies and transmit over HTTPS. JavaScript and AJAX data may contain more sensitive information, so they are always transmitted over HTTPS. Transmission of these cookies using HTTP or access to them from JavaScript is not a significant security risk, because the cookies are not used to make security decisions or allow access to an account. They are used only to collect performance data, with any identifiable data obfuscated. For customers subject to special guidelines for cookie collection, such as those under the EU GDPR/PECR ICO Guidelines, we now provide the option to disable cookie collection for your application. Please see our browser agent v1169 release notes for more information. Important If your site uses P3P, it must be configured to allow these cookies. JSONP requests Page load timing metrics are reported to New Relic using a Script GET, also known as a JSONP request. The Script GET returns a value that is subsequently stored in a cookie and used to trigger trace capturing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.477806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Session</em> <em>trace</em> data",
        "body": ": Asset load timing details User interactions such as scrolling, mousing, and clicking JavaScript error timing and other JavaScript error information Triggered Javascript events <em>Session</em> <em>traces</em> are captured randomly at a fixed rate from among the monitored page views. <em>Session</em> <em>trace</em> information appears"
      },
      "id": "6043efdf64441f772e378f12"
    }
  ],
  "/docs/browser/browser-monitoring/browser-pro-features/upload-source-maps-un-minify-js-errors": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/upload-source-maps-api/",
      "sections": [
        "Upload source maps via API",
        "Prepare for using the source map API",
        "What is the JavaScript URL?",
        "Is a release name and ID required?",
        "Is a repo URL or a build commit hash required?",
        "Are there limits to source map uploads?",
        "Push source maps to New Relic",
        "Use npm module via command line or client-side script",
        "Important",
        "npm command line: Publish",
        "npm command line: List published maps",
        "npm command line: Delete",
        "npm via Node.js script: Publish",
        "npm via Node.js script: List published maps",
        "npm via Node.js script: Delete",
        "Use API via curl",
        "curl: Upload maps",
        "curl: List existing maps",
        "curl: Delete map",
        "Troubleshoot source maps"
      ],
      "published_at": "2021-12-25T15:12:42Z",
      "title": "Upload source maps via API",
      "updated_at": "2021-12-10T01:54:18Z",
      "type": "docs",
      "external_id": "3c5a8467aa0c47e12cbe83080e701e3c7cee090c",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring supports the uploading of source maps, which are used to un-minify error stack traces on the JS errors page. This document explains how to use the API to publish (upload) source maps to browser. Prepare for using the source map API In order to upload source maps to browser via the API, you'll need this information: A user API key (before November 20, 2020, the Admin API key was required; that will still work if already in place) The New Relic application ID for the deployed app The full JavaScript file URL Optionally, if the JavaScript URL doesn't automatically have release info appended to it, the release name and ID What is the JavaScript URL? Every time the agent captures an error in your code, it's associated with the URL of the JavaScript in which it occurred. This is the src attribute of the script tag in your HTML. This full JavaScript URL is required when sending source maps to browser. You can find the URL for an error's JavaScript file in browser, on the JS errors page. See Browser monitoring source maps for more on finding these errors in the UI. Is a release name and ID required? Many organizations include a version number or hash in the JavaScript URL. This is generally added to \"bust\" caches to ensure your users get the most recent version of your code. This type of URL might look something like: https://example.com/assets/application-59.min.js https://example.com/assets/bundle-d6d031.min.js https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js If your app's URLs automatically have the version info appended to it, the browser agent has everything it needs in order to match errors with your code. You can move ahead to generating source maps. If this doesn't apply to you, and JS URLs do not have version info appended, you’ll have to assist the agent by specifying a release name and ID with the API. Is a repo URL or a build commit hash required? If you're interested in connecting New Relic to your CodeStream organization when this feature is available, your repository URL or build commit hash are required. Otherwise, this is optional. If you're interested in learning more about this, you can read about how CodeStream and New Relic work together to make it easier to identify errors and collaborate on fixing them. Are there limits to source map uploads? There is no limit to the overall number of source maps you can upload. However, the API is rate-limited per account: You can upload a maximum of 1000 source maps per minute. You can upload a maximum of 15,000 source maps per day. Source map files can be a maximum of 50Mb in size. Push source maps to New Relic Now that you have one or more source maps, you are ready to publish it to browser. You can use any of these methods to send source maps to browser: Use the New Relic npm module with the API via the command line or via a client-side JavaScript build/deploy script like Gulp or Grunt. Use API curl commands. Use the browser UI. Use npm module via command line or client-side script The easiest and recommended way to upload source maps to browser is to use the our new @newrelic/publish-sourcemap npm module. It provides a command line tool and Javascript API to accomplish this task. More documentation is available in the npm repo. Here are some examples of using the npm module via the command line. Important The following examples are for US accounts. For EU accounts, the endpoint is https://sourcemaps.service.eu.newrelic.com. For more information, see Introduction to the EU region data center. npm command line: Publish Here's an example of uploading source maps using the npm module via the command line. Note that the source map can come from a local file or a remote URL. npm install -g @newrelic/publish-sourcemap publish-sourcemap PATH_TO_SOURCE_MAP_FILE (local or remote) PATH_TO_ORIGINAL_FILE --apiKey=YOUR_NEW_RELIC_USER_KEY --applicationId=YOUR_NEW_RELIC_APP_ID --repoUrl=GITHUB_REPOSITORY_URL --buildCommit=GIT_BUILD_COMMIT_HASH Copy npm command line: List published maps Here's an example of listing published source maps: list-sourcemaps --applicationId=YOUR_APP_ID --apiKey=YOUR_NEW_RELIC_USER_KEY Options: --applicationId Browser application id --apiKey New Relic user API key Copy npm command line: Delete Here's an example of deleting a source map: delete-sourcemap --applicationId=YOUR_APP_ID --apiKey=YOUR_NEW_RELIC_USER_API_KEY --sourcemapId=YOUR_SOURCE_MAP_ID Options: --applicationId Browser application id --apiKey New Relic user API key --sourcemapId Unique id generated for a source map Copy Here are some examples of using the npm module to publish from client-side JavaScript: npm via Node.js script: Publish Here's an example of publishing a source map via a Node.js script: var publishSourcemap = require('@newrelic/publish-sourcemap').publishSourcemap publishSourcemap({ sourcemapPath: 'SOURCE_MAP_FULL_PATH', javascriptUrl: 'JS_URL', applicationId: YOUR_NEW_RELIC_APP_ID, apiKey: 'YOUR_NEW_RELIC_USER_API_KEY', repoUrl: 'GITHUB_REPOSITORY_URL', buildCommit: 'GIT_BUILD_COMMIT_HASH' }, function (err) { console.log(err || 'Sourcemap upload done')}) Copy npm via Node.js script: List published maps Here's an example of listing all published source maps: var listSourcemaps = require(‘@newrelic/publish-sourcemap’).listSourcemaps listSourcemaps({ applicationId: YOUR_NEW_RELIC_APP_ID, apiKey: 'YOUR_NEW_RELIC_USER_API_KEY', limit: [Max number of results to return || 20]: , offset: [Number of results to skip before returning || 0]: , }, function (err, res) { console.log(err || res.sourcemaps)}) Copy npm via Node.js script: Delete Here's an example of deleting a source map file via a Node.js script: var deleteSourcemap = require(‘@newrelic/publish-sourcemap’).deleteSourcemap deleteSourcemap({ sourcemapId: 'SOURCE_MAP_ID', applicationId: YOUR_NEW_RELIC_APP_ID, apiKey: 'YOUR_NEW_RELIC_USER_API_KEY', }, function (err) { console.log(err || 'Deleted source map')}) Copy When you're done, go to the JS errors page in browser, select an error grouping, and see if your error stack traces have been un-minified. Use API via curl Below are some examples of using curl to publish, list, and delete source maps: curl: Upload maps An example of using API via curl to publish maps to browser: curl -H \"Api-Key: YOUR_NEW_RELIC_USER_API_KEY\" \\ -F \"sourcemap=@SOURCE_MAP_PATH\" \\ -F \"javascriptUrl=JS_URL\" \\ -F \"releaseId=YOUR_RELEASE_ID\" \\ -F \"releaseName=YOUR_UI_PAGE\" \\ https://sourcemaps.service.newrelic.com/v2/applications/YOUR_NEW_RELIC_APP_ID/sourcemaps Copy curl -H \"Api-Key: YOUR_NEW_RELIC_USER_API_KEY\" \\ -F \"sourcemap=@SOURCE_MAP_PATH\" \\ -F \"javascriptUrl=JS_URL\" \\ -F \"releaseId=YOUR_RELEASE_ID\" \\ -F \"releaseName=YOUR_UI_PAGE\" \\ -F \"repoUrl=GITHUB_REPOSITORY_URL\" \\ -F \"buildCommit=GIT_BUILD_COMMIT_HASH\" \\ https://sourcemaps.service.newrelic.com/v2/applications/YOUR_NEW_RELIC_APP_ID/sourcemaps Copy curl: List existing maps Below is an example of how to get a list of source maps previously uploaded to New Relic via curl. New Relic returns the source map's unique SOURCEMAP_ID and its components: curl \\ -H \"Api-Key: YOUR_NEW_RELIC_USER_API_KEY\" \\ https://sourcemaps.service.newrelic.com/v2/applications/YOUR_NEW_RELIC_APP_ID/sourcemaps Copy curl: Delete map To delete a source map: Use the GET endpoint to list existing source maps and locate the SOURCEMAP_ID. Run the following command via curl: curl -X DELETE \\ -H \"Api-Key: YOUR_NEW_RELIC_USER_API_KEY\" \\ https://sourcemaps.service.newrelic.com/v2/applications/YOUR_NEW_RELIC_APP_ID/sourcemaps/SOURCEMAP_ID Copy When you're done, go to the JS errors page in browser, select an error grouping, and see if your error stack traces have been un-minified. Troubleshoot source maps If you are having trouble generating source maps from your build system, or if your errors in browser are remaining minified, see the source maps troubleshooting documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 259.55835,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Upload</em> <em>source</em> <em>maps</em> via API",
        "sections": "<em>Upload</em> <em>source</em> <em>maps</em> via API",
        "body": "Browser monitoring supports the uploading of <em>source</em> <em>maps</em>, which are used to <em>un</em>-<em>minify</em> <em>error</em> stack traces on the <em>JS</em> <em>errors</em> page. This document explains how to use the API to publish (<em>upload</em>) <em>source</em> <em>maps</em> to browser. Prepare for using the <em>source</em> <em>map</em> API In order to <em>upload</em> <em>source</em> <em>maps</em> to browser via"
      },
      "id": "6043fea6196a672dec960f78"
    },
    {
      "sections": [
        "JavaScript errors page: Detect and analyze errors",
        "View JavaScript errors",
        "Query and visualize JS data",
        "Use API to monitor handled errors",
        "Review event logs",
        "Important",
        "Troubleshoot missing event logs",
        "View stack traces",
        "Troubleshoot missing stack traces",
        "Global and generic errors"
      ],
      "title": "JavaScript errors page: Detect and analyze errors",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser Pro features"
      ],
      "external_id": "90edc523244dbf2bf9a9c23b0a00e3e09634e4df",
      "image": "https://docs.newrelic.com/static/2d5c8d1b43fe37ec696af0dbf8e1f7d4/c1b63/browser_jserrors_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/javascript-errors-page-detect-analyze-errors/",
      "published_at": "2021-12-25T02:31:03Z",
      "updated_at": "2021-11-06T17:05:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's JS errors UI page shows you where your JavaScript errors are happening, and provides tools to help you figure out the root cause. You can also query and create dashboards of JS error data in the query builder, or use the browser API to monitor handled errors. View JavaScript errors To examine JavaScript errors: Go to one.newrelic.com > Browser > (select an app) > JS errors. Use the available options in the UI to examine what may be causing the errors. Optional: Review event logs or stack traces in the UI. Optional: Query and create dashboards for JS error data with the query builder, or use the API to monitor or log errors. Available options in the UI include: If you want to... Do this Search through long error lists Use the Search box so you can more quickly find and fix errors by keywords, URLs, etc. Group and filter attributes To change how your error data is grouped, use the Group by function. (The Page loads chart cannot be changed with grouping.) To filter the data by only showing errors with specific attributes, use the Filter dropdown. See notable anomalies and patterns The Error profiles table shows notable statistical variations, such as browser versions or devices that have errors occurring more frequently than normal. Examine error details Select an error from the main page to view detailed information about that error, such as the top five browsers that error occurred on, the top five devices it occurred on, and associated URIs. Select Error instances to see event logs and stack traces, if available. Examine events leading up to error The Event log shows the browser interactions, AJAX calls, and traces that led up to an error. Decode your minified JavaScript If your JavaScript is minified, the errors on the JS errors page may not be very useful. To decode minified JavaScript and make these error stack traces more useful, you can upload JavaScript source maps to New Relic. one.newrelic.com > Browser > (select an app) > JS errors: Use this page to group and filter errors, explore stack trace details, and examine trends. Query and visualize JS data New Relic saves JS errors as event data. This allows you to query your error data in the query builder. To run NRQL queries and create dashboards to view or share, query the JavaScriptError event type in the query builder. Use API to monitor handled errors To notice or log your app's handled errors or other miscellaneous errors, use the browser API's noticeError call. Review event logs Important SPA monitoring must be enabled. The event log shows the browser interactions, AJAX calls, and traces that led up to a JS error. This can help you troubleshoot the root cause of errors. one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances: With SPA monitoring enabled, the event log shows you the activity leading up to an error. To view the Event log (if available): Go to one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances. The event log will not be visible if there are no events in the event log. For example, if a JS error is occurring after an AJAX request that provides an error message, it could be that your AJAX request doesn't contain the right information. This results in a JS error due to a failed AJAX call. Troubleshoot missing event logs Some reasons for events in the event log not being present: Agent version. To capture event log data your site must have SPA monitoring enabled (browser agent version 1071 or higher). JS error not part of a browser interaction. If the JS error occurs outside of an interaction, the related browser interaction details cannot be captured (for example: if an async JS file experiences an error). A click triggered the JS error. In some cases if the error is a direct result of a click, no associated interactions are captured. Without event logs or stack traces, you can use the error detail charts to analyze the impact the error has by browser type, device type, and URI. View stack traces Stack traces can show you if an error is breaking important functionality, or if it's a less important error. To view an error's stack trace (if available): go to one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances. Troubleshoot missing stack traces Some reasons why you may not see a stack trace for an error: If errors are not thrown, they will not produce a stack trace. The JS script is hosted on a CDN or another external location, and New Relic can't see the errors originating from those scripts. This can be solved in some cases by using cross-origin resource sharing (CORS). It is an AngularJS error. For more on this, see Missing Angular errors. The error is a SyntaxError or Script error: These occur while the script is loading, so they do not produce a stack trace. Some older browsers may generate errors without a stack trace, or may provide a stack trace that is not usable. You've captured the error before the New Relic agent sees it. If the error occurs during multiple harvest cycles in the same user visit, only error events reported during the first harvest cycle will have a stack trace recorded. Some solutions for reporting stack traces: Use the noticeError API call. Enable development mode. Use the JS errors UI page to get more information, including the event log. The JS errors page is designed to give you actionable information even without a stack trace. Global and generic errors New Relic wraps JavaScript functions to get information about thrown errors via the stack trace. If errors aren't thrown, they won't be available. For example, if you have an AngularJS application, follow the troubleshooting procedures when AngularJS errors do not appear in the UI. For some older browsers, the following errors may be unavailable: SyntaxError or Script error: These occur while the script is loading, so they do not produce a stack trace. In-line JavaScript or event handler errors: These are unwrapped. Errors thrown from third-party scripts that reside on another domain are not available. Errors occurring on older browsers: These may not be able to provide a usable stack trace. In some cases, they may not provide a stack trace at all. Error collection is done by wrapping JavaScript functions, so errors thrown by the browser at a lower level (such as cross-origin resource sharing errors) also are not available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91705,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JavaScript <em>errors</em> page: Detect and analyze <em>errors</em>",
        "sections": "JavaScript <em>errors</em> page: Detect and analyze <em>errors</em>",
        "body": " not be very useful. To decode minified JavaScript and make these <em>error</em> stack traces more useful, you can <em>upload</em> JavaScript <em>source</em> <em>maps</em> to New Relic. one.newrelic.com &gt; Browser &gt; (select an app) &gt; <em>JS</em> <em>errors</em>: Use this page to group and filter <em>errors</em>, explore stack trace details, and examine trends. Query"
      },
      "id": "6043fcf228ccbc12062c6080"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/mobile-release-notes/android-release-notes/android-5251/",
      "sections": [
        "Android agent v5.25.1",
        "Fixed in this release"
      ],
      "published_at": "2021-12-26T01:23:54Z",
      "title": "Android agent v5.25.1",
      "updated_at": "2021-03-16T17:53:56Z",
      "type": "docs",
      "external_id": "cb82bb315a09a42a7699533e27f2388b2dfcd64d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Fixed in this release Fixed detection of DexGuard-generated mapping.txt files (\"mappingFile is null\") Update OkHttp request transaction state when interceptors are used Improved visibility into obfuscation map uploads. Users can invoke the Gradle task newRelicMapUpload { Variant} (newRelicDexguardMapUpload { Variant} for DexGuard) to resend tagged obfuscation maps. { Variant} is dependent on configuration. Toned-down plugin debugging messages inadvertently emitted as errors",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.05388,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "} (newRelicDexguard<em>MapUpload</em> { Variant} for DexGuard) to resend tagged obfuscation <em>maps</em>. { Variant} is dependent on configuration. Toned-down plugin debugging messages inadvertently emitted as <em>errors</em>"
      },
      "id": "603e93c0e7b9d2a4562a080c"
    }
  ],
  "/docs/browser/browser-monitoring/configuration/browser-license-key-app-id": [
    {
      "sections": [
        "Monitor or block specific domains and subdomains",
        "Tip",
        "Configure domain conditions",
        "Turn off domain conditions"
      ],
      "title": "Monitor or block specific domains and subdomains",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "bf81374c9ec84ce08154a76b10f526fb5ee7e7ec",
      "image": "https://docs.newrelic.com/static/1bf47635bd1556e86b9019a47176e3b9/c1b63/browser_domain_conditions.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains/",
      "published_at": "2021-12-25T06:17:08Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser lets you choose which domains or subdomains that a browser app monitors. This is useful for limiting monitoring only to the application activity you consider important. For example, if you use the copy/paste method to deploy your browser app, you can set domain conditions to protect the security of your browser monitoring license key and app ID. Tip Domain conditions only filter data based on the url of the page that is reported. Domain condition filters do not apply to AJAX data reported to New Relic. Configure domain conditions To view or edit your domain condition settings: Go to one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions. If there are no domain conditions in place, select Enable domain conditions. If conditions exist, select Edit conditions. Select the option to build a list of allowed domains or to build a list of blocked/denied domains. Select the domain conditions (maximum 10 conditions). Select the domain conditions with the Starts with condition, then enter the URL with the subdomain (maximum 10 conditions). one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions: Use this feature to limit monitoring only to your important app activity, or to enhance security for your browser license key and app ID. Review and confirm your domain condition settings. A preview text box displays in real time what domains match the conditions you set. You will also see an estimate of the impact the proposed settings will have on your data. Turn off domain conditions To disable domain conditions and return to monitoring all domains: Go to one.newrelic.com > Browser > (select an app) > Settings > Domain conditions. Set the Enable domain conditions option to Off.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Monitor</em> or block specific domains and subdomains",
        "sections": "<em>Monitor</em> or block specific domains and subdomains",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> lets you choose which domains or subdomains that a <em>browser</em> app monitors. This is useful for limiting <em>monitoring</em> only to the application activity you consider important. For example, if you use the copy&#x2F;paste method to deploy your <em>browser</em> app, you can set domain conditions to protect"
      },
      "id": "6043fd41e7b9d240ca5799bb"
    },
    {
      "sections": [
        "Rename browser apps",
        "Rename app monitored by APM",
        "Caution",
        "Rename app via JavaScript snippet",
        "Rename app via New Relic REST API (v2)"
      ],
      "title": "Rename browser apps",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "6ba80996a8c58869876377c40ba67098f0870475",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/rename-browser-apps/",
      "published_at": "2021-12-25T06:18:04Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow the appropriate procedure to rename your browser app depending on the deployment option you used to add it to browser. Rename app monitored by APM If you added an app to browser already being monitored by APM, the app name that appears in browser is the same as the app name in the APM UI. To rename the app, use any of these options: Option Comments Rename and continue collecting data This option is useful when you simply want to give an app a different display name (alias). To change the alias that appears in the New Relic UI, use the app's Settings page: Go to one.newrelic.com > APM > (select an app) > Settings > Application. Stop reporting under the old name To stop reporting data under the old name and begin collecting data with a new name (app identifer), use the APM agent's configuration file. This changes the identifier that New Relic's data collector uses to distinguish one app from another. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. If one or more apps share the same name, then their data will be aggregated in the UI. Caution If you change the app identifier, a new application will appear in our user interface with the new name, and data will stop reporting to the app(s) with the old name. Rename app via JavaScript snippet This information applies if you inserted the browser agent's JavaScript snippet into your: App monitored by APM that was deployed via the copy/paste method Single page app (SPA) Any standalone browser app that is not also monitored by APM You cannot directly edit the JavaScript snippet in the existing app. Instead, to use your app with a different name: Follow standard procedures to create a new app using the copy/paste method. Provide the new name, and generate the JavaScript snippet. Copy the new JavaScript snippet. In your webpage, replace the JavaScript from your original app with the JavaScript generated for the new app name. If your standalone app has multiple names, copy the custom app IDs in your configuration script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to browser apps that are also monitored by APM. You cannot change the app name via the REST API if you used the copy/paste method to insert browser's JavaScript snippet into your app. Follow standard procedures to change the APM app alias via REST API or API Explorer. New Relic automatically changes the display name for the app everywhere in the New Relic UI, including browser.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35124,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Rename <em>browser</em> apps",
        "sections": "Rename <em>browser</em> apps",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>configuration</em> script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to <em>browser</em> apps that are also monitored"
      },
      "id": "603ea123e7b9d2943f2a07b3"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> settings: UI options for Apdex and geography",
        "sections": "<em>Browser</em> settings: UI options for Apdex and geography",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "As part of the <em>browser</em> setup requirements, you must install the <em>browser</em> agent. Then you can use the your app&#x27;s Applications settings page to update <em>browser</em> <em>monitoring</em> options for: <em>Browser</em> subscription levels <em>Browser</em> Apdex T values Cities, regions, or countries to be highlighted on the Filterable"
      },
      "id": "6043fea6196a676128960f4b"
    }
  ],
  "/docs/browser/browser-monitoring/getting-started/browser-summary-page": [
    {
      "sections": [
        "Introduction to browser monitoring",
        "Tip",
        "More than Real User Monitoring (RUM)",
        "Examine user perceptions",
        "Improve interactive app performance",
        "Correlate front-end and back-end problems",
        "Get started with browser monitoring"
      ],
      "title": "Introduction to browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "4928b2a5981bd2d6263f04b4b882d65adef22779",
      "image": "https://docs.newrelic.com/static/98ad878ffa7b586b779178656f19ec58/c1b63/browser_intro_0.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring/",
      "published_at": "2021-12-26T01:48:40Z",
      "updated_at": "2021-11-25T13:02:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your end-user experience depends on your entire technology stack. You need to quickly understand what's causing a customer complaint or issue. Did the problem come from your infrastructure, your application, or the browsers that ultimately render it? Is it the result of a problematic internet provider, a problem in your own data center with failing CPU or memory, or something else? Tip This doc gives you detailed information about why our browser monitoring solution matters to your business. But if you want to skip ahead, just sign up for a New Relic account. (It's free, forever!) Then, after you install the browser monitoring agent, you can start working with your data. More than Real User Monitoring (RUM) Many websites contain dynamic content that is loaded after the initial page has finished loading, and complex JavaScript code increases the need for error reporting. Browser monitoring in New Relic One provides a Real User Monitoring (RUM) solution that measures the speed and performance of your end users as they navigate to your site from different web browsers, devices, operating systems, and networks. With browser monitoring in New Relic One, you see actionable data about your end users' experience with your app. But browser monitoring in New Relic goes far beyond the initial page load to measure full page life cycle data. For example, our browser UI shows you: Actual performance data, such as by page view popularity and user satisfaction (Apdex) scores Perceived performance data that measures how quickly your async or dynamic visuals and interactive page contents display JavaScript error analytics, stack traces, and line-of-code visibility, to show you the end-user steps leading up to an error itself Session performance with a detailed timeline and heat map of the load and interaction events during a webpage's full life cycle AJAX requests indicating problems with timing, end points, and specific locations in the webpage Hash-based route changes in apps with single-page application (SPA) architectures These tools (and more!) help your teams optimize your end users' page load experience, eliminate bugs, and troubleshoot faster across your full stack. Examine user perceptions Real user data gives insights into actual page performance, but you also need to look into your users' perception of your site's performance. Pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser monitoring agent. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. Additional metrics include: First paint, first contentful paint, and largest contentful paint First input delay First interaction This helps you understand how users experience your site, both from visual and responsiveness standpoints. Improve interactive app performance Our single-page app (SPA) monitoring automatically tracks route changes, initial page loads, and synchronous and asynchronous activity during browser interactions. You can also use our browser agent and SPA API to monitor virtually anything that executes inside the browser. If you are a developer, SPA monitoring can help you: Create faster, more responsive, highly interactive apps. Monitor the throughput and performance that real users are experiencing. Troubleshoot and resolve problems within the context of the page load. Query and visualize the data to assist with business decisions. Bring better apps to the marketplace more quickly. Correlate front-end and back-end problems With New Relic One, you can instrument any type of data you need, such as metrics, events, logs, and traces. This helps you find actionable data about your end users' experience across the stack. For example: Type of data Comments Locations or domains Limit browser monitoring to focus on specific geographical locations or specific types of end-user activity. You can also monitor or block specific domains. Trends in interactions Use our comparative charting feature for a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetic monitors. Distributed tracing Isolate latency from the web browser through back-end services with distributed tracing. The UI helps you see the connection across across a full transaction, from browser activity, to time spent in network, to back-end activity. Browser types Explore your end users' experience with your app segmented by any types of browsers they use, including: Top browsers by throughput Average page load time by platform type (mobile, desktop, and other) Selected browser type by version (for example, Chrome 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Get started with browser monitoring Follow these basic steps, and you'll quickly be up and running in New Relic with browser monitoring! Review the compatibility details and basic requirements for browser monitoring. Install the browser agent. Go to [one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. View summary data from your Browser summary page, then drill down into page load timing details and other UI data. Configure your alerts for key performance data, or use our Applied Intelligence solutions to reduce alert noise, correlate incidents, and automatically detect anomalies. Query and visualize your default data (or customize your own), then analyze what that data says about your business. Customize and share your own charts and dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.37756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>browser</em> <em>monitoring</em>",
        "sections": "<em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific <em>browser</em> type or platform, or whether the problem is more widespread. <em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em> Follow these basic steps, and you&#x27;ll quickly be up and running in New Relic"
      },
      "id": "604429a9e7b9d2bde7579a04"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-25T04:32:43Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.51021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Browser</em> <em>monitoring</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " The <em>browser</em> API resources include: Resource Details <em>Browser</em> agent API Use the <em>browser</em> agent API for tasks such as: Report custom end user data to <em>browser</em> <em>monitoring</em>. <em>Monitor</em> asynchronous <em>browser</em> activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API"
      },
      "id": "609fa5cf196a67066022b194"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-25T17:14:38Z",
      "updated_at": "2021-12-24T01:39:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.95547,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use of other <em>monitoring</em> software",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " integrates with other New Relic products to give you end-to-end visibility: Product Integration <em>Browser</em> <em>monitoring</em> The Java agent automatically injects the <em>browser</em> JavaScript agent when you enable auto-instrumentation. After enabling <em>browser</em> injection, you can view <em>browser</em> data in the APM Summary"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring": [
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.46303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-25T04:32:43Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.51016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Browser</em> <em>monitoring</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " The <em>browser</em> API resources include: Resource Details <em>Browser</em> agent API Use the <em>browser</em> agent API for tasks such as: Report custom end user data to <em>browser</em> <em>monitoring</em>. <em>Monitor</em> asynchronous <em>browser</em> activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API"
      },
      "id": "609fa5cf196a67066022b194"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "2e87a574d5fcccc5f5775c0030f57d39d6672097",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-12-25T17:14:38Z",
      "updated_at": "2021-12-24T01:39:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Want to try out New Relic's Java agent? Create a New Relic account for free! No credit card required. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. In order to continue to innovate and efficiently provide new capabilities to our customers, we'll occasionally need to drop support for older JVM versions. When that happens, you can continue using a version of the agent that supports your older JVM version, but new features and fixes won't be included in those older agent versions. We recommend upgrading to a currently supported JVM version to take advantage of the latest agent releases. Please see the table of compatible agent versions to determine which JVM versions are compatible. Java version Compatible agent versions Not supported Java 5 Agent v1.3.0 to v2.21.7 v2.21.7 and lower Java 6 Agent v3.0.0 to v4.3.0 v4.3.0 and lower Java 7 Agent v3.0.0 to v6.5.0, v6.5.2, and v6.5.3 v4.9.0 and lower Java 8 Agent v3.10.0 to current v4.9.0 and lower Java 9 Agent v3.43.0 to current v4.9.0a and lower Java 10 Agent v4.4.0 to current v4.9.0 and lower Java 11 Agent v4.7.0 to current v4.9.0 and lower Java 12 Agent v4.12.0 to current NA Java 13 Agent v5.7.0 to current NA Java 14 Agent v5.11.0 to current NA Java 15 Agent v6.1.0 to current NA Java 16 Agent v7.3.0 to current NA Java 17 Agent v7.4.0 to current NA Compatible: IBM JVM versions 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 8 to 16 for Linux, Windows, and macOS Oracle Hotspot JVM versions 8 to 16 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS (Java 1.7) Compatible only with Java agent 6.5.x [ ZIP | 16.8 MB] legacy agent: OpenJDK and AdoptOpenJDK JVM versions 7 IBM JVM version 7 Oracle Hotspot JVM version 7 for Linux, Solaris, Windows, macOS (Java 1.6) Compatible only with Java agent 4.3.x [ ZIP | 9.9 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS (Java 1.5) Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 + Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest Cats Effect v2 Scala 2.12: 2.1 to latest Scala 2.13: 2.1 to latest GraphQL 16.0 - 16.2 GraphQL 17.0 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 ZIO Scala 2.13: 1.0.9 to 2.0.0-M2 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to 1.39.0 HTTP4s Blaze client Scala 2.12: 0.21 - 0.23.0-M1 Scala 2.13: 0.21 - 0.23.0-M1 HTTP4s Blaze server Scala 2.12: 0.21 - 0.22.0-M8 Scala 2.13: 0.21 - 0.22.0-M8 HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to 2.8.1 (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest STTP v2 Scala 2.12: 2.2.3 to latest 2.x Scala 2.13: 2.2.3 to latest 2.x, 3.0.0 to latest 3.x Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon v1 DynamoDB 1.11.106 to latest Amazon v2 DynamoDB 2.1.0 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.95538,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use of other <em>monitoring</em> software",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " integrates with other New Relic products to give you end-to-end visibility: Product Integration <em>Browser</em> <em>monitoring</em> The Java agent automatically injects the <em>browser</em> JavaScript agent when you enable auto-instrumentation. After enabling <em>browser</em> injection, you can view <em>browser</em> data in the APM Summary"
      },
      "id": "617e61a1196a670ec4f7d6cf"
    }
  ],
  "/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent": [
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.26897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": ": function (t){var e=new p(t);try{u.emit(&quot;new-xhr&quot;... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting <em>browser</em> <em>monitoring</em> <em>installation</em>. If you see a different response, you may"
      },
      "id": "603e902d196a6762dea83d8a"
    },
    {
      "sections": [
        "Update the browser agent",
        "Check your version number",
        "Check deployment method",
        "Update your APM-managed installation",
        "Update your copy/paste installation",
        "Caution",
        "Retrieve the snippet from the UI",
        "Extract the snippet with the REST API",
        "Update using the loader endpoint"
      ],
      "title": "Update the browser agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "88c27eeabc364683eae41935bd6a1b178cae36ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/installation/update-browser-agent/",
      "published_at": "2021-12-25T06:20:32Z",
      "updated_at": "2021-07-21T20:02:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Running the latest version of our browser agent ensures you can access all browser features and enhancements. To update to the latest version, check your version number, then follow the steps for either updating an APM-managed installation or upgrading a copy/paste installation. Check your version number To verify your browser version number: View the source code of a page which includes the JavaScript snippet. Search the page source for js-agent.newrelic.com/nr-. The numbers that follow nr- are your current version. For example, js-agent.newrelic.com/nr-593.min.js indicates you are running version 593 of the browser script. There are different agent types. The Pro+SPA agent has the format js-agent.newrelic.com/nr-spa-1184.min.js To verify the latest version of the browser script loader: Go to js-agent.newrelic.com/nr-loader-full-current.min.js . Search for js-agent.newrelic.com/nr-, then note the numbers that follow nr-. If the latest version number is higher than the number of the version you are currently running, update your browser agent. Check deployment method Your browser agent may have been deployed in two ways: either using a manual implementation (copying and pasting the snippet) or automatically instrumented using an APM agent. To check which deployment method was used, run this command in the JavaScript console: > newrelic.info.sa Copy If the command returns 1, then your browser agent used the copy/paste method. Update your APM-managed installation To update your APM-managed browser installation, restart your APM agent. Your app will automatically update to the latest JavaScript snippet. To ensure the new script registers, you may need to clear your cache. For more information, follow the troubleshooting procedures to manually check and clear the cache. Update your copy/paste installation Use any of the following options to access the browser JavaScript snippet needed to update a copy/paste installation. After accessing the snippet, be sure to replace all of your existing snippet with the new version. If you have a standalone installation with a few applications, you can retrieve the snippet from the UI, and then replace it with the new version. If you have many applications, you can use the REST API or the loader endpoint to automate the update process. Caution Do not simply change the version number in the existing snippet. This can result in incomplete data collection. For best results after you use any of the following options, always update the agent. Retrieve the snippet from the UI Download the latest version of the snippet: Go to one.newrelic.com > Browser > (select an app) > Application settings. This option is only available for standalone installations. Extract the snippet with the REST API To update the snippet using the New Relic REST API, follow the process for viewing a specific browser app. The loader_script attribute in your response will include the latest JavaScript snippet. This may be a good solution if you have many applications to manage, or if your browser app is linked to an APM app. Update using the loader endpoint To update the snippet from the New Relic loader endpoint, you can choose which type of browser agent you want: Pro+SPA endpoint Pro endpoint Lite endpoint These endpoints always point to the latest version of the agent. We recommend using the Pro+SPA agent. Read more about these agent types. These loader endpoints are generic and do not include your specific configuration data. To add your configuration data to the loaders: Find your browser application ID and license key: Follow standard procedures to use the New Relic UI or the REST API. Set your browser application ID and license key immediately after the snippet. NREUM.info = { applicationID: \"YOUR-APPLICATION-ID\", licenseKey: \"YOUR-BROWSER-LICENSE-KEY\" }; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.83092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>browser</em> agent",
        "sections": "Update your APM-managed <em>installation</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "Running the latest version of our <em>browser</em> agent ensures you can access all <em>browser</em> features and enhancements. To update to the latest version, check your version number, then follow the steps for either updating an APM-managed <em>installation</em> or upgrading a copy&#x2F;paste <em>installation</em>. Check your version"
      },
      "id": "603ec40c64441f245f4e8879"
    },
    {
      "sections": [
        "Disable browser monitoring",
        "Disable monitoring of specific pages/URLs",
        "Deployed with selected APM agent",
        "Deployed with copy/paste method",
        "Disable domain monitoring",
        "Disable browser agent"
      ],
      "title": "Disable browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "0109af1704295c643c93616540cf9667ec6438e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/installation/disable-browser-monitoring/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-07-10T02:44:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using browser to monitor your application, you can manually disable monitoring for your app or for specific pages. Reasons for turning off browser monitoring on certain pages include: Some pages may not be relevant for monitoring. You want to monitor only specific pages. You want to remove the browser script for troubleshooting purposes. Disable monitoring of specific pages/URLs To disable browser on a specific page or URL, follow the procedures based on your deployment method: Deployed with selected APM agent If you used the APM agent to automatically insert your JavaScript snippet, you can disable injection for only those particular pages using the APM language agent's API or config file. For more information, see the instructions for your agent: Go (currently not applicable) Java .NET Node.js: This agent does not automatically insert JavaScript. To turn off monitoring on certain pages, simply remove the API calls from those pages. PHP Python Ruby Deployed with copy/paste method If you used the copy/paste deployment method and want to stop collecting data for a browser app, simply remove the browser monitoring JavaScript snippet from the pages you do not want to monitor. Disable domain monitoring To turn off monitoring for specific domains or sub-domains, update your browser domain conditions. Disable browser agent If you used the copy/paste deployment method and want to stop collecting data for a browser app, simply remove the browser JavaScript snippet from the pages you do not want to monitor. If you used the APM agent to install the browser agent, you can turn off some of the browser monitoring features individually, or you can disable browser entirely. Go to one.newrelic.com, click on Browser > (select a browser app) > Settings > Application settings. To disable only the Pro account level features, select Lite. To turn off browser monitoring completely, select Off. Select Save application settings. If applicable, restart your APM agent. When browser monitoring is off, the agent will not instrument pages with monitoring scripts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.35391,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable <em>browser</em> <em>monitoring</em>",
        "sections": "Disable <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "If you are using <em>browser</em> to <em>monitor</em> your application, you can manually disable <em>monitoring</em> for your app or for specific pages. Reasons for turning off <em>browser</em> <em>monitoring</em> on certain pages include: Some pages may not be relevant for <em>monitoring</em>. You want to <em>monitor</em> only specific pages. You want"
      },
      "id": "6043fd4164441f8728378f17"
    }
  ],
  "/docs/browser/browser-monitoring/page-load-timing-resources/cookie-collection-session-tracking": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.67686,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58653,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    }
  ],
  "/docs/browser/browser-monitoring/page-load-timing-resources/new-relic-cookies-used-browser": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.67685,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58682,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58652,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    }
  ],
  "/docs/browser/browser-monitoring/troubleshooting/troubleshoot-your-browser-monitoring-installation": [
    {
      "sections": [
        "AJAX call fails with a CORS redirect error message",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "AJAX call fails with a CORS redirect error message",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "a4e478428acefb454ab8969cccb666d03ae458f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/ajax-call-fails-cors-redirect-error-message/",
      "published_at": "2021-12-25T02:06:12Z",
      "updated_at": "2021-11-13T07:04:35Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem A redirected AJAX call is being rejected with a CORS error message, for example: Access to XMLHttpRequest at 'https://my-domain-2/path' (redirected from 'https://my-domain-1/path') from origin 'https://my-website-domain' has been blocked by CORS policy: Request header field x-newrelic-id is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The browser agent automatically adds custom headers to outgoing same-origin AJAX calls in order to support the Distributed Tracing feature. When the server that receives the AJAX call responds with a redirect status code (such as 302), the browser will automatically make the same AJAX call to the redirected URL. And if this new URL is on a different origin and the call does not pass the CORS preflight, the browser will fail the call with the error message listed above.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.96497,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The <em>browser</em> agent"
      },
      "id": "603eb41ce7b9d2ce042a07db"
    },
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.96472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Troubleshoot</em> AJAX data collection",
        "sections": "<em>Troubleshoot</em> AJAX data collection",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": ": function (t){var e=new p(t);try{u.emit(&quot;new-xhr&quot;... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see <em>Troubleshooting</em> <em>browser</em> <em>monitoring</em> installation. If you see a different response, you may"
      },
      "id": "603e902d196a6762dea83d8a"
    },
    {
      "sections": [
        "Install the browser monitoring agent",
        "Enable browser monitoring",
        "Deployment options",
        "Enable an APM-monitored app",
        "Enable with copy/paste",
        "Instrument webpages using the APM agent",
        "Use REST API",
        "Browser agent types: Lite, Pro, Pro+SPA"
      ],
      "title": "Install the browser monitoring agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "bc45bbc86cd4d8b81367ad0904907ddc735717f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-11-13T06:04:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser uses a JavaScript snippet, also referred to as an \"agent,\" to instrument your app's webpages. The JavaScript collects data for browser monitoring. To install the browser agent, you can choose from a number of deployment options. If you don't have one already, create a New Relic account. It's free, forever. Get an account Enable browser monitoring Browser Pro+SPA is the default agent when you enable browser monitoring. This automatically gives you access to all of our browser monitoring features. For more information about the browser monitoring options, see Browser agent types in this document. To enable browser monitoring: Go to one.newrelic.com, select Browser, and then select Add more data. Follow the instructions in the UI to add browser monitoring to your app. Generate some traffic for your app, then wait a few minutes for data to appear in New Relic. Optional: After installation is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the browser agent type. It may take several minutes after enabling the browser monitoring agent before your webpage data appear in New Relic. If have problems, follow our troubleshooting tips. Deployment options No matter which option you use to deploy browser monitoring, the end result is the same: the browser monitoring JavaScript snippet (also referred to as the \"agent\") is inserted into your app pages. The method you select depends on your preferences and business needs. Enable an APM-monitored app When enabling browser monitoring, you can use an APM agent to automatically inject the browser monitoring JavaScript snippet for you. This is the easiest way to install the agent for an app that's already being monitored by APM. APM-monitored apps are listed on your APM Applications index. Enable with copy/paste When enabling browser monitoring, you can manually insert the JavaScript snippet into your app's webpages. The copy/paste option gives you control over the exact placement of our JavaScript snippet, which is required to monitor the webpage's performance. This is useful for: Standalone apps, static sites, and cached pages delivered by CDN APM apps that are not as closely coupled to the browser app as with a standard server-side app (for example, when your client-side app talks to a REST API back end) Some tips for using the JavaScript snippet: Placement in your webpage: Copy the code snippet, then paste it inline into your pages as close to the top of the <head> element as possible, but after any position-sensitive <meta> tags (for example, X-UA-Compatible or charset information). For more information on the inline head placement, see JavaScript placement requirements. License key and app ID: Near the bottom of the generated JavaScript is your browser license key and application ID. This is useful with the REST API and API Explorer. Instrument webpages using the APM agent This information applies to apps that are also monitored by APM. Our APM agents can instrument webpages with the required JavaScript for page load timing. If you are using an APM agent's API to manually add the JavaScript snippet to your webpages, insert the instrumentation snippet as close to the top as possible. This allows you to take advantage of detailed information about browser's AJAX calls and JavaScript errors. For more information, see the instructions for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby Use REST API This information applies to apps that are also monitored by APM. The REST API lets you manage deployment outside the browser monitoring UI. This is useful for large organizations deploying multiple apps. Browser agent types: Lite, Pro, Pro+SPA We have three types of browser agents: Lite, Pro, and Pro+SPA. The agent type has no impact on your billing. Browser agent type Comparison Pro+SPA This is the default installed agent when you enable browser monitoring. What it includes: Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications. Pro+SPA is not limited only to single page applications. After install, you can downgrade anytime to the less advanced agents if you don't want or need SPA monitoring. Pro What it includes: Gives you access to the Browser Pro features. What it doesn't include: Lacks the functionality designed for single page app monitoring. Lite What it includes: Gives you information about some basic page load timing and browser user information. What it doesn't include: Lacks the Browser Pro features and SPA features. Details about how agent types relate to pricing: New Relic One pricing: This pricing model has data ingest as a billing factor. If you want to reduce data ingest, you may want to consider downgrading to lesser agent types after install. Original pricing: Your access to browser monitoring features is gated by your subscription plan, not by the agent type. This means there is no reason not to use the default Pro+SPA agent. After initial agent installation is finished, you can go to the App settings page to edit your configuration or to change your subscription.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.778336,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>browser</em> <em>monitoring</em> agent",
        "sections": "Install the <em>browser</em> <em>monitoring</em> agent",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>troubleshooting</em> tips. Deployment options No matter which option you use to deploy <em>browser</em> <em>monitoring</em>, the end result is the same: the <em>browser</em> <em>monitoring</em> JavaScript snippet (also referred to as the &quot;agent&quot;) is inserted into your app pages. The method you select depends on your preferences and business needs"
      },
      "id": "604429e628ccbcb80b2c60d0"
    }
  ],
  "/docs/browser/index": [
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 53.129635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em>",
        "body": "<em>Browser</em> monitoring&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    },
    {
      "sections": [
        "AJAX call fails with a CORS redirect error message",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "AJAX call fails with a CORS redirect error message",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "a4e478428acefb454ab8969cccb666d03ae458f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/ajax-call-fails-cors-redirect-error-message/",
      "published_at": "2021-12-25T02:06:12Z",
      "updated_at": "2021-11-13T07:04:35Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem A redirected AJAX call is being rejected with a CORS error message, for example: Access to XMLHttpRequest at 'https://my-domain-2/path' (redirected from 'https://my-domain-1/path') from origin 'https://my-website-domain' has been blocked by CORS policy: Request header field x-newrelic-id is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The browser agent automatically adds custom headers to outgoing same-origin AJAX calls in order to support the Distributed Tracing feature. When the server that receives the AJAX call responds with a redirect status code (such as 302), the browser will automatically make the same AJAX call to the redirected URL. And if this new URL is on a different origin and the call does not pass the CORS preflight, the browser will fail the call with the error message listed above.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 47.35108,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em>",
        "body": " is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The <em>browser</em> agent"
      },
      "id": "603eb41ce7b9d2ce042a07db"
    },
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 47.35099,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em>",
        "body": "Problem You are not seeing AJAX data for your <em>browser</em> app. Solution If your application is instrumented with <em>browser</em> monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest"
      },
      "id": "603e902d196a6762dea83d8a"
    }
  ],
  "/docs/browser/new-relic-browser/additional-standard-features/browser-geography-webpage-performance-location": [
    {
      "sections": [
        "Page views: Examine page performance",
        "View summary information",
        "Examine timing details for page loads",
        "Examine page view details",
        "Use additional APM-monitored app options"
      ],
      "title": "Page views: Examine page performance",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "33b21f9b95742470a1dec53a56bc8d702a4be066",
      "image": "https://docs.newrelic.com/static/b772b5dac2873a9aa26c4f0848285b19/c1b63/pageview01_overview_1.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/page-views-examine-page-performance/",
      "published_at": "2021-12-25T02:31:03Z",
      "updated_at": "2021-07-10T02:34:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Page views page in browser monitoring provides insight into the performance of your site's pages. Sort options allow you to view details by percentage of page load time, average page load time, or throughput. Detailed information about the top webpages viewed, timing and throughput details, and links to browser traces or session traces also are available as applicable. Browser also offers single-page app (SPA) monitoring. If you have opted in to SPA monitoring, your SPA Page views page will be different. View summary information Browser monitoring lists page views as URLs. This makes it easy to identify specific front-end page views; for example, /browse/plans. In addition: For browser apps that are also monitored by APM, you can view the back-end transactions associated with the page view; for example, ApplicationsController#Show. For URLs that are also monitored by Synthetics, you can use New Relic's comparative charting feature. This provides a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetics monitors. one.newrelic.com > Browser > (select an app) > Page views: This page provides detailed information about page load time, throughput, top transactions, and traces. To view detailed information about which pages the end users are viewing for your app: Go to one.newrelic.com > Browser > (select an app) > Page views. Select the time period or sort order, or keep the defaults. If available, select the type of view for page load timing information as a chart (default), histogram, or percentile. To view summary information about a specific transaction, mouse over the transaction's name on the list. To compare page load time between real user (browser) interactions and trends appearing in Synthetic monitors, select a page monitored by Synthetics, then examine additional comparative charting details. Examine timing details for page loads The Browser page load time chart view shows the average page load time broken down into segments. This chart also appears on the Summary page and Browsers detail page. one.newrelic.com > Browser > (select an app) > Page views: The Browser page load time chart shows the average page load time broken down into segments indicating the end users' experience (sometimes referred to as real user monitoring or RUM). The page load timing process shows colored-coded details: Page load timing process Description Request queuing (black) Wait time between the web server and the application code. Large numbers indicate a busy application server. Web application (purple) Time spent in the application code. Network (brown) The network latency, or the time it takes for a request to make a round trip over the Internet. For apps that have been deployed using the copy/paste method, Browser includes web app and queue time in Network time. DOM processing (yellow) In the browser, parsing and interpreting the HTML. Measured by the browser's DOMContent event. Page rendering (blue) In the browser, the time to display the HTML, run the inline JavaScript, and load images. Measured by the browser's Load event. \"Additional\" timing data If you are using the JavaScript API, your \"additional\" timing data appears in this chart. Examine page view details Use any of New Relic's standard user interface functions to drill down into detailed information. In addition, to view details about a specific page view, select its name from the list. To close an individual page view and return to the Page views page, select X (Close). Each page view listed in the list may include links to additional drill-down details: Page view details Comments Page load performance This includes page load timing breakdown data, throughput, session traces, and browser traces (if available). Historical performance This shows response time, Apdex comparisons, and throughput for the last selected time period, yesterday, and last week. AJAX calls Table with links to detailed information about endpoints, as well as sortable columns by endpoint, average response time, throughput, and total calls. APM transactions For browser apps that are also monitored by APM, this table shows the total call time, average response time, call count, and link to the APM Transactions page. one.newrelic.com > Browser > (select an app) > Page views > (select a transaction): Depending on the app, individual transactions may have links to additional drill-down details, including Page load performance, Historical performance, AJAX calls, and APM transactions. Use additional APM-monitored app options Browser apps that are also monitored by APM may have access to additional functions. To use these functions (if available): From the selected transaction's APM Transactions tab, select an APM transaction from the list. Then select any of these options (from APM): Track as key transaction (create a new key transaction) Key transaction (view existing) Transaction traces > (selected trace) (view)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.10944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use <em>additional</em> APM-<em>monitored</em> app options",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": ") In the <em>browser</em>, the time to display the HTML, run the inline JavaScript, and load images. Measured by the <em>browser</em>&#x27;s Load event. &quot;<em>Additional</em>&quot; timing data If you are using the JavaScript API, your &quot;<em>additional</em>&quot; timing data appears in this chart. Examine page view details Use any of New Relic&#x27;s <em>standard</em>"
      },
      "id": "6044280d28ccbc697e2c60bb"
    },
    {
      "sections": [
        "Browsers: Problem patterns by type or platform",
        "Viewing browsers by type",
        "Viewing specific browser details"
      ],
      "title": "Browsers: Problem patterns by type or platform",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "275b49bb70dc8c016dd8d2cc03f5438f540780fe",
      "image": "https://docs.newrelic.com/static/28f8a0d40fe374ccd766b61d6b89e7a1/c1b63/browsers_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browsers-problem-patterns-type-or-platform/",
      "published_at": "2021-12-25T04:36:44Z",
      "updated_at": "2021-07-09T22:48:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Browsers page in browser monitoring provides information about your end users' experience with your app based on which browser they use, such as Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari. This page includes: Top browsers by throughput (pages per minute or ppm) Average page load time by platform type (mobile, tablet, desktop) Drill-down charts also segment the selected browser type by version; for example, Chrome 31, 32, 33, etc. This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Viewing browsers by type To view browser information: Go to one.newrelic.com, click Browser > (select an app) > Browsers. one.newrelic.com > Browser > (select an app) > Browsers: This page provides information about throughput (pages per minute) and average page load time for your end users' browser types. Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Browsers page: If you want to... Do this... View summary browser information for a specific time Mouse over any area on the chart. Hide (or return) data on the chart Select the corresponding color or title on the chart's legend. View detailed information about the browser Select its name on the list or a place on the chart. Close the detail window and return to the Browsers page Select X (Close). Viewing specific browser details The drill-down details include a breakdown by version and the average page load time. one.newrelic.com > Browser > (select an app) > Browsers > (select a browser type): This example shows a specific browser type selected (Firefox). The largest number of users have version 42.0, so by hiding this label (or any others) in the legend, you can easily examine details about other versions. Color-coded segments for Average page load time include: Request queuing (black): Wait time between the web server and the application code. Large numbers indicate a busy application server. Web application (purple): Time spent in the application code. Network (brown): The network latency, or time it takes for a request to make a round trip over the Internet. DOM processing (yellow): In the browser, parsing and interpreting the HTML and retrieving assets. Measured by the browser's DOMContentLoaded event. Page rendering (blue): In the browser, displaying the HTML, running in-line JavaScript, and loading images. Measured by the browser's Load event. Note: For apps that have been deployed using the copy/paste method, browser includes web app and queue time in Network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.09976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browsers</em>: Problem patterns by type or platform",
        "sections": "<em>Browsers</em>: Problem patterns by type or platform",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": ") and average page load time for your end users&#x27; <em>browser</em> types. Use any of our <em>standard</em> user interface functions and page functions to drill down into detailed information. Here is a summary of <em>additional</em> options with the Browsers page: If you want to... Do this... View summary <em>browser</em> information"
      },
      "id": "6043f968e7b9d2bd425799d3"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/additional-standard-features/browsers-problem-patterns-type-or-platform": [
    {
      "sections": [
        "Browser Geography: Webpage performance by location",
        "Contents",
        "View performance data by region",
        "Important",
        "Use page functions",
        "View drill-down details"
      ],
      "title": "Browser Geography: Webpage performance by location",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "7b26e484a4645be8c580650fd7d71a159114bf50",
      "image": "https://docs.newrelic.com/static/793341e63f8e5b444d7cc98a1f5a7d90/c1b63/geo_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browser-geography-webpage-performance-location/",
      "published_at": "2021-12-25T09:28:29Z",
      "updated_at": "2021-10-31T01:03:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Geography page provides a world view with color-coded Apdex scores and other performance information about your end users' experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load performance and historical performance. Contents View performance data by region Important Firewalls may have an impact on the geographical data collected about your end users. To view or sort the performance information by location: one.newrelic.com > Browser > (select an app) > Geo: This page provides a world view and drill-down details of color-coded performance information for geographic locations. Go to one.newrelic.com > Browser > (select an app) > Geo > Global (for a world view). OR Go to one.newrelic.com > Browser > (select an app) > Geo > (select a location) (for a specific location you identified in the Browser application settings). To drill down to a specific area, select a location from the list, or select any area on the geographical map. To view additional details about the selected location, select the Page load performance or Historical performance links. To return to the main Geography page, select X (Close). one.newrelic.com > B * *rowser > (select an app) > Geo > (select a location): If you selected specific locations from Settings > Application settings * * , the Geography page includes tabs to view their performance data directly. Use page functions Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Geography page: If you want to... Do this... Change how the performance data appears Select your choice from the Sort by menu. Adjust the amount of information that appears Select or clear the Hide < % throughput checkbox ( < 1% for global view, < 2% for selected locations). View a map of a specific location Do any of these as applicable: Select the location's name from the Geo > Global list. Select its physical location on the map. If you have pre-selected the location from Application settings, select its tab. View summary performance information about a specific location Mouse over any colored area. View drill-down details After you select a specific location, the Page load performance page shows: Average page load time in seconds Number of page views and active sessions as pages per minute (ppm) Recent browser traces if applicable one.newrelic.com > Browser > (select an app) > Geo > (select a location): After you select a specific location, you can view specific details about Page load performance and Historical performance. In addition, the Historical performance page shows comparison data for the selected time period, yesterday, and last week for the selected location. This includes: Response time Apdex Throughput in pages per minute (ppm)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.30014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Geography: Webpage performance by location",
        "sections": "<em>Browser</em> Geography: Webpage performance by location",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Geography page provides a world view with color-coded Apdex scores and other performance information about your end users&#x27; experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load"
      },
      "id": "604429e7196a67193d960f75"
    },
    {
      "sections": [
        "Page views: Examine page performance",
        "View summary information",
        "Examine timing details for page loads",
        "Examine page view details",
        "Use additional APM-monitored app options"
      ],
      "title": "Page views: Examine page performance",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "33b21f9b95742470a1dec53a56bc8d702a4be066",
      "image": "https://docs.newrelic.com/static/b772b5dac2873a9aa26c4f0848285b19/c1b63/pageview01_overview_1.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/page-views-examine-page-performance/",
      "published_at": "2021-12-25T02:31:03Z",
      "updated_at": "2021-07-10T02:34:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Page views page in browser monitoring provides insight into the performance of your site's pages. Sort options allow you to view details by percentage of page load time, average page load time, or throughput. Detailed information about the top webpages viewed, timing and throughput details, and links to browser traces or session traces also are available as applicable. Browser also offers single-page app (SPA) monitoring. If you have opted in to SPA monitoring, your SPA Page views page will be different. View summary information Browser monitoring lists page views as URLs. This makes it easy to identify specific front-end page views; for example, /browse/plans. In addition: For browser apps that are also monitored by APM, you can view the back-end transactions associated with the page view; for example, ApplicationsController#Show. For URLs that are also monitored by Synthetics, you can use New Relic's comparative charting feature. This provides a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetics monitors. one.newrelic.com > Browser > (select an app) > Page views: This page provides detailed information about page load time, throughput, top transactions, and traces. To view detailed information about which pages the end users are viewing for your app: Go to one.newrelic.com > Browser > (select an app) > Page views. Select the time period or sort order, or keep the defaults. If available, select the type of view for page load timing information as a chart (default), histogram, or percentile. To view summary information about a specific transaction, mouse over the transaction's name on the list. To compare page load time between real user (browser) interactions and trends appearing in Synthetic monitors, select a page monitored by Synthetics, then examine additional comparative charting details. Examine timing details for page loads The Browser page load time chart view shows the average page load time broken down into segments. This chart also appears on the Summary page and Browsers detail page. one.newrelic.com > Browser > (select an app) > Page views: The Browser page load time chart shows the average page load time broken down into segments indicating the end users' experience (sometimes referred to as real user monitoring or RUM). The page load timing process shows colored-coded details: Page load timing process Description Request queuing (black) Wait time between the web server and the application code. Large numbers indicate a busy application server. Web application (purple) Time spent in the application code. Network (brown) The network latency, or the time it takes for a request to make a round trip over the Internet. For apps that have been deployed using the copy/paste method, Browser includes web app and queue time in Network time. DOM processing (yellow) In the browser, parsing and interpreting the HTML. Measured by the browser's DOMContent event. Page rendering (blue) In the browser, the time to display the HTML, run the inline JavaScript, and load images. Measured by the browser's Load event. \"Additional\" timing data If you are using the JavaScript API, your \"additional\" timing data appears in this chart. Examine page view details Use any of New Relic's standard user interface functions to drill down into detailed information. In addition, to view details about a specific page view, select its name from the list. To close an individual page view and return to the Page views page, select X (Close). Each page view listed in the list may include links to additional drill-down details: Page view details Comments Page load performance This includes page load timing breakdown data, throughput, session traces, and browser traces (if available). Historical performance This shows response time, Apdex comparisons, and throughput for the last selected time period, yesterday, and last week. AJAX calls Table with links to detailed information about endpoints, as well as sortable columns by endpoint, average response time, throughput, and total calls. APM transactions For browser apps that are also monitored by APM, this table shows the total call time, average response time, call count, and link to the APM Transactions page. one.newrelic.com > Browser > (select an app) > Page views > (select a transaction): Depending on the app, individual transactions may have links to additional drill-down details, including Page load performance, Historical performance, AJAX calls, and APM transactions. Use additional APM-monitored app options Browser apps that are also monitored by APM may have access to additional functions. To use these functions (if available): From the selected transaction's APM Transactions tab, select an APM transaction from the list. Then select any of these options (from APM): Track as key transaction (create a new key transaction) Key transaction (view existing) Transaction traces > (selected trace) (view)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.10944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Use <em>additional</em> APM-<em>monitored</em> app options",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": ") In the <em>browser</em>, the time to display the HTML, run the inline JavaScript, and load images. Measured by the <em>browser</em>&#x27;s Load event. &quot;<em>Additional</em>&quot; timing data If you are using the JavaScript API, your &quot;<em>additional</em>&quot; timing data appears in this chart. Examine page view details Use any of New Relic&#x27;s <em>standard</em>"
      },
      "id": "6044280d28ccbc697e2c60bb"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27088,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/additional-standard-features/page-views-examine-page-performance": [
    {
      "sections": [
        "Browser Geography: Webpage performance by location",
        "Contents",
        "View performance data by region",
        "Important",
        "Use page functions",
        "View drill-down details"
      ],
      "title": "Browser Geography: Webpage performance by location",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "7b26e484a4645be8c580650fd7d71a159114bf50",
      "image": "https://docs.newrelic.com/static/793341e63f8e5b444d7cc98a1f5a7d90/c1b63/geo_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browser-geography-webpage-performance-location/",
      "published_at": "2021-12-25T09:28:29Z",
      "updated_at": "2021-10-31T01:03:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Geography page provides a world view with color-coded Apdex scores and other performance information about your end users' experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load performance and historical performance. Contents View performance data by region Important Firewalls may have an impact on the geographical data collected about your end users. To view or sort the performance information by location: one.newrelic.com > Browser > (select an app) > Geo: This page provides a world view and drill-down details of color-coded performance information for geographic locations. Go to one.newrelic.com > Browser > (select an app) > Geo > Global (for a world view). OR Go to one.newrelic.com > Browser > (select an app) > Geo > (select a location) (for a specific location you identified in the Browser application settings). To drill down to a specific area, select a location from the list, or select any area on the geographical map. To view additional details about the selected location, select the Page load performance or Historical performance links. To return to the main Geography page, select X (Close). one.newrelic.com > B * *rowser > (select an app) > Geo > (select a location): If you selected specific locations from Settings > Application settings * * , the Geography page includes tabs to view their performance data directly. Use page functions Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Geography page: If you want to... Do this... Change how the performance data appears Select your choice from the Sort by menu. Adjust the amount of information that appears Select or clear the Hide < % throughput checkbox ( < 1% for global view, < 2% for selected locations). View a map of a specific location Do any of these as applicable: Select the location's name from the Geo > Global list. Select its physical location on the map. If you have pre-selected the location from Application settings, select its tab. View summary performance information about a specific location Mouse over any colored area. View drill-down details After you select a specific location, the Page load performance page shows: Average page load time in seconds Number of page views and active sessions as pages per minute (ppm) Recent browser traces if applicable one.newrelic.com > Browser > (select an app) > Geo > (select a location): After you select a specific location, you can view specific details about Page load performance and Historical performance. In addition, the Historical performance page shows comparison data for the selected time period, yesterday, and last week for the selected location. This includes: Response time Apdex Throughput in pages per minute (ppm)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 206.30014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Geography: Webpage performance by location",
        "sections": "<em>Browser</em> Geography: Webpage performance by location",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Geography page provides a world view with color-coded Apdex scores and other performance information about your end users&#x27; experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load"
      },
      "id": "604429e7196a67193d960f75"
    },
    {
      "sections": [
        "Browsers: Problem patterns by type or platform",
        "Viewing browsers by type",
        "Viewing specific browser details"
      ],
      "title": "Browsers: Problem patterns by type or platform",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "275b49bb70dc8c016dd8d2cc03f5438f540780fe",
      "image": "https://docs.newrelic.com/static/28f8a0d40fe374ccd766b61d6b89e7a1/c1b63/browsers_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browsers-problem-patterns-type-or-platform/",
      "published_at": "2021-12-25T04:36:44Z",
      "updated_at": "2021-07-09T22:48:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Browsers page in browser monitoring provides information about your end users' experience with your app based on which browser they use, such as Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari. This page includes: Top browsers by throughput (pages per minute or ppm) Average page load time by platform type (mobile, tablet, desktop) Drill-down charts also segment the selected browser type by version; for example, Chrome 31, 32, 33, etc. This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Viewing browsers by type To view browser information: Go to one.newrelic.com, click Browser > (select an app) > Browsers. one.newrelic.com > Browser > (select an app) > Browsers: This page provides information about throughput (pages per minute) and average page load time for your end users' browser types. Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Browsers page: If you want to... Do this... View summary browser information for a specific time Mouse over any area on the chart. Hide (or return) data on the chart Select the corresponding color or title on the chart's legend. View detailed information about the browser Select its name on the list or a place on the chart. Close the detail window and return to the Browsers page Select X (Close). Viewing specific browser details The drill-down details include a breakdown by version and the average page load time. one.newrelic.com > Browser > (select an app) > Browsers > (select a browser type): This example shows a specific browser type selected (Firefox). The largest number of users have version 42.0, so by hiding this label (or any others) in the legend, you can easily examine details about other versions. Color-coded segments for Average page load time include: Request queuing (black): Wait time between the web server and the application code. Large numbers indicate a busy application server. Web application (purple): Time spent in the application code. Network (brown): The network latency, or time it takes for a request to make a round trip over the Internet. DOM processing (yellow): In the browser, parsing and interpreting the HTML and retrieving assets. Measured by the browser's DOMContentLoaded event. Page rendering (blue): In the browser, displaying the HTML, running in-line JavaScript, and loading images. Measured by the browser's Load event. Note: For apps that have been deployed using the copy/paste method, browser includes web app and queue time in Network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.09976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browsers</em>: Problem patterns by type or platform",
        "sections": "<em>Browsers</em>: Problem patterns by type or platform",
        "tags": "<em>Additional</em> <em>standard</em> <em>features</em>",
        "body": ") and average page load time for your end users&#x27; <em>browser</em> types. Use any of our <em>standard</em> user interface functions and page functions to drill down into detailed information. Here is a summary of <em>additional</em> options with the Browsers page: If you want to... Do this... View summary <em>browser</em> information"
      },
      "id": "6043f968e7b9d2bd425799d3"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/actiontext-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.29402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/add-page-action": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.29402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/add-release": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.29402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api": [
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    },
    {
      "sections": [
        "onEnd (browser SPA API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "onEnd (browser SPA API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "6ff82386ff972a4593f984745c05745052a9b020",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-on-end/",
      "published_at": "2021-12-25T15:11:51Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax onEnd(function $callback) Copy Change the values associated with a SPA interaction before the interaction is saved . Requirements Agent version nr-963 or higher. Description This call provides the same object as getContext(). When this is called, you can make final adjustments to the interaction before it's recorded. For example, you could add additional attributes based on the context values. Other methods for modifying the interaction include: setName() save() ignore() setAttribute() Parameters Parameter Description $callback function Required. This function is called when the interaction ends. It is called with one parameter, which is the interaction context. Return values This method returns the same API object created by interaction(). Examples // router.js router.addRoute('/dashboard', () => { const interaction = newrelic.interaction().onEnd(ctx => { interaction.setAttribute( 'averageChartLoadTime', ctx.totalChartLoadTime / ctx.chartLoadCount ) }) getCharts().forEach(loadChart) }) // chart-loader.js function loadChart (chart) { const start = Date.now() chart.load().then(() => { const loadTime = Date.now() - start interaction.getContext(ctx => { ctx.totalChartLoadTime = (ctx.totalChartLoadTime || 0) + loadTime ctx.chartLoadCount += (ctx.chartLoadCount || 0) + 1 }) } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "onEnd (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "sections": "onEnd (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax onEnd(function $callback) Copy Change the values associated with a <em>SPA</em> interaction before the interaction is saved . Requirements <em>Agent</em> version nr-963 or higher. Description This call provides the same object as getContext(). When this is called, you can make final adjustments"
      },
      "id": "603ea02d196a67a9dda83dae"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/createtracer-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/end-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/finished": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/getcontext-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/ignore-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61433,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/index": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 2001.4802,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1959.4255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> monitoring with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1901.7634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " structure does not provide useful groupings or if the <em>browser</em> <em>agent</em> doesn&#x27;t capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the <em>browser</em>TransactionName attribute. The custom name will also be visible in the <em>browser</em>"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/interaction-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/noticeerror-browser-agent-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/save-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/set-error-handler": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/setattribute-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/setcurrentroutename-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    },
    {
      "sections": [
        "onEnd (browser SPA API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "onEnd (browser SPA API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "6ff82386ff972a4593f984745c05745052a9b020",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/spa-on-end/",
      "published_at": "2021-12-25T15:11:51Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax onEnd(function $callback) Copy Change the values associated with a SPA interaction before the interaction is saved . Requirements Agent version nr-963 or higher. Description This call provides the same object as getContext(). When this is called, you can make final adjustments to the interaction before it's recorded. For example, you could add additional attributes based on the context values. Other methods for modifying the interaction include: setName() save() ignore() setAttribute() Parameters Parameter Description $callback function Required. This function is called when the interaction ends. It is called with one parameter, which is the interaction context. Return values This method returns the same API object created by interaction(). Examples // router.js router.addRoute('/dashboard', () => { const interaction = newrelic.interaction().onEnd(ctx => { interaction.setAttribute( 'averageChartLoadTime', ctx.totalChartLoadTime / ctx.chartLoadCount ) }) getCharts().forEach(loadChart) }) // chart-loader.js function loadChart (chart) { const start = Date.now() chart.load().then(() => { const loadTime = Date.now() - start interaction.getContext(ctx => { ctx.totalChartLoadTime = (ctx.totalChartLoadTime || 0) + loadTime ctx.chartLoadCount += (ctx.chartLoadCount || 0) + 1 }) } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "onEnd (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "sections": "onEnd (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax onEnd(function $callback) Copy Change the values associated with a <em>SPA</em> interaction before the interaction is saved . Requirements <em>Agent</em> version nr-963 or higher. Description This call provides the same object as getContext(). When this is called, you can make final adjustments"
      },
      "id": "603ea02d196a67a9dda83dae"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/setname-browser-spa-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setPageViewName (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Examples"
      ],
      "title": "setPageViewName (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "06753169e4112e9919b48cd7336a93cd677e9dd9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api/",
      "published_at": "2021-12-25T15:12:42Z",
      "updated_at": "2021-07-10T02:39:24Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setPageViewName(string $name[, string $host]) Copy Groups page views to help URL structure or to capture the URL's routing information. Requirements Agent version nr-593 or higher. Description Customized page names can help you more effectively group your page views if your URL structure does not provide useful groupings or if the browser agent doesn't capture the part of the URL where routing information is stored. When querying the PageView event, the custom name will be exposed as the browserTransactionName attribute. The custom name will also be visible in the browser monitoring UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This API call applies to data in standard page views in browser and the PageView event. To set a custom name for SPA page views and the BrowserInteraction event, see SPA: setName. Using both calls together is recommended. Parameters Parameter Description $name string Required. The page name you want to use. Use alphanumeric characters. $host string Optional. Default is http://custom.transaction. Typically set host to your site's domain URI. To further group these custom transactions, provide a custom host. Otherwise, the page views will be assigned the default domain custom.transaction. Segments within the name must be explicitly added to your URL allow list settings if they do not already appear. Examples newrelic.setPageViewName('/login') // Or newrelic.setPageViewName('/login', 'https://www.myapp.com') Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.3703,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setPageViewName (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>monitoring</em> UI. To use a customized page view name instead of the page URL, format the name as a slash-delimited string. Make this call before the window load event fires in order for it to appear correctly. Tip This <em>API</em> call applies to data in standard page views in <em>browser</em> and the PageView event"
      },
      "id": "6043fe3864441f6899378ec7"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/setpageviewname-browser-agent-api": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setName (browser SPA API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "setName (browser SPA API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "9a9af0c4b58f0cdc3a87d60d7239eca6b9af868b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setname-browser-spa-api/",
      "published_at": "2021-12-25T15:11:51Z",
      "updated_at": "2021-07-10T02:39:25Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.interaction().setName(string $name[, string $trigger]) Copy Sets the name and trigger of a SPA's browser interaction that is not a route change or URL change. Requirements Agent version nr-963 or higher. Description This SPA monitoring method sets the name and trigger of a browser interaction. The name will be exposed as the browserInteractionName attribute in the BrowserInteraction event. It will also be used for grouping in the UI. By default, browserInteractionName is named after an associated URL or route. Use setName() when you want to record an interaction that is not a route change or URL change. The setCurrentRouteName() method also names the current route. When you use both: setName() takes precedence for naming the interaction. The previousRouteName and targetRouteName attributes are still set with values passed to setCurrentRouteName(). Using these methods together allows many options for filtering and grouping in the UI. For example, you can: Filter down to interactions of a certain type, such as LikeButtonClick. Then, group by targetRouteName to see what routes have the most LikeButtonClick interactions. Tip This API call applies to data in SPA page views in browser and the BrowserInteraction event type within New Relic One. To set a custom name for standard page views and the PageView event type, see setPageViewName. Using both calls together is recommended. Parameters Parameter Description $name string Required. If null, the name will be set using the targetGroupedUrl attribute. If not null, this will set the browserInteractionName attribute in the BrowserInteraction event. $trigger string Optional. If not null, this will set the TRIGGER attribute on the BrowserInteraction event. Return values This method returns the same API object created by interaction(). Examples document.getElementById('subscribe').addEventListener('submit', () => { newrelic.interaction().setName('createSubscription') createSubscription() }) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setName (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "sections": "setName (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.interaction().setName(string $name[, string $trigger]) Copy Sets the name and trigger of a <em>SPA</em>&#x27;s <em>browser</em> interaction that is not a route change or URL change. Requirements <em>Agent</em> version nr-963 or higher. Description This <em>SPA</em> <em>monitoring</em> method sets the name and trigger of a <em>browser</em>"
      },
      "id": "6043fe38196a677688960f98"
    }
  ],
  "/docs/browser/new-relic-browser/browser-agent-spa-api/spa-on-end": [
    {
      "sections": [
        "addToTrace (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples"
      ],
      "title": "addToTrace (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "cfc07079342fec5115dbc68cff1d4a40a66f9836",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/addtotrace-browser-agent-api/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-10-01T23:08:02Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements Agent version nr-593 or higher. Description Custom events within browser session traces can provide context for other user actions, errors, and default events within the trace. This event will appear in the browser session trace details. If a session trace currently is in progress, this adds an object with a user-defined name, start time, and other optional fields. If you make this call and a session trace is not already in progress, this will not cause browser to capture a trace. Note that the number of events shared this way is limited by the Browser agent harvest cycle. Here is the last update on that limit. Parameters Parameter Description $custom_object JavaScript object Required. Supply a JavaScript object with these required and optional name/value pairs: Required name/value pairs: NAME, START Optional name/value pairs: END, ORIGIN, TYPE If you are sending the same event object to New Relic One as a PageAction, omit the TYPE attribute. (TYPE is a string to describe what type of event you are marking inside of a session trace.) If included, it will override the event type and cause the PageAction event to be sent incorrectly. Instead, use the NAME attribute for event information. Examples var obj = { // REQUIRED name: 'Event Name', start: 1417044274239, // Time in ms since epoch // OPTIONAL end: 1417044274252, // Time in ms since epoch. Defaults to same as start resulting in trace object with a duration of zero. origin: 'Origin of event', // Defaults to empty string type: 'What type of event was this' // Defaults to empty string } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 205.61432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "addToTrace (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.addToTrace(JavaScript object $custom_object) Copy Adds a JavaScript object with a custom name, start time, etc. to an in-progress session trace. Requirements <em>Agent</em> version nr-593 or higher. Description Custom events within <em>browser</em> session traces can provide context for other user"
      },
      "id": "6043faae196a6774ac960f30"
    },
    {
      "sections": [
        "setCustomAttribute (browser agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Get JavaScript/jQuery for HTML elements"
      ],
      "title": "setCustomAttribute (browser agent API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "45236cf5e08fcdc6cc62c2e1807a0ae25b3b1045",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setcustomattribute-browser-agent-api/",
      "published_at": "2021-12-25T15:11:00Z",
      "updated_at": "2021-09-08T16:30:26Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.setCustomAttribute(string $name, string OR number $value) Copy Adds a user-defined attribute name and value to subsequent events on the page. Requirements Agent version nr-593 or higher. Description Adds a user-defined attribute name and value to subsequent events on the page. Make this call before the window load event fires (when that data is transmitted) in order for the attributes to be included in the PageView event. Once an attribute is set, New Relic One records it with all PageAction events until the page is reloaded or the attribute is manually unset. If you are using SPA monitoring with a compatible agent version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the SPA API will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page. To view or log errors for a custom attribute via API, use the browser API's noticeError call. Parameters Parameter Description $name string Required. Name of the attribute. Appears as column in the PageView event. It will also appear as a column in the PageAction event if you are using it. Avoid using reserved NRQL words when you name the attribute/value. $value string OR integer Required. Value of the attribute. Appears as the value in the named attribute column in the PageView event. It will appear as a column in the PageAction event if you are using it. Custom attribute values cannot be complex objects, only simple types such as Strings and Integers. Avoid using reserved NRQL words when you name the attribute/value. Examples Get JavaScript/jQuery for HTML elements This example uses JavaScript/jQuery to get the values of the following HTML elements on a Drupal-generated page: <link rel=\"shortlink\" href=\"/node/1111\" /> <h1>Using NRQL</h1> New Relic reports them as custom attributes. This is useful to query PageView and PageAction events in New Relic One. var node_id = ''; node_id= jQuery(\"link[rel='shortlink']\").attr(\"href\"); var node_title = ''; node_title= jQuery('h1').text(); if (typeof newrelic == 'object') { newrelic.setCustomAttribute('nodeId', node_id); newrelic.setCustomAttribute('title', node_title); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 201.294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "sections": "setCustomAttribute (<em>browser</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": " <em>SPA</em> <em>monitoring</em> with a compatible <em>agent</em> version, attributes set with this call will also be included in newrelic.interaction events. However, attributes set using the <em>SPA</em> <em>API</em> will take precedence over these attributes. Errors for custom attributes will be included in events on the JS Errors page"
      },
      "id": "6043fe01e7b9d28aff5799e0"
    },
    {
      "sections": [
        "setName (browser SPA API)",
        "Syntax",
        "Requirements",
        "Description",
        "Tip",
        "Parameters",
        "Return values",
        "Examples"
      ],
      "title": "setName (browser SPA API)",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser agent and SPA API"
      ],
      "external_id": "9a9af0c4b58f0cdc3a87d60d7239eca6b9af868b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-agent-spa-api/setname-browser-spa-api/",
      "published_at": "2021-12-25T15:11:51Z",
      "updated_at": "2021-07-10T02:39:25Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.interaction().setName(string $name[, string $trigger]) Copy Sets the name and trigger of a SPA's browser interaction that is not a route change or URL change. Requirements Agent version nr-963 or higher. Description This SPA monitoring method sets the name and trigger of a browser interaction. The name will be exposed as the browserInteractionName attribute in the BrowserInteraction event. It will also be used for grouping in the UI. By default, browserInteractionName is named after an associated URL or route. Use setName() when you want to record an interaction that is not a route change or URL change. The setCurrentRouteName() method also names the current route. When you use both: setName() takes precedence for naming the interaction. The previousRouteName and targetRouteName attributes are still set with values passed to setCurrentRouteName(). Using these methods together allows many options for filtering and grouping in the UI. For example, you can: Filter down to interactions of a certain type, such as LikeButtonClick. Then, group by targetRouteName to see what routes have the most LikeButtonClick interactions. Tip This API call applies to data in SPA page views in browser and the BrowserInteraction event type within New Relic One. To set a custom name for standard page views and the PageView event type, see setPageViewName. Using both calls together is recommended. Parameters Parameter Description $name string Required. If null, the name will be set using the targetGroupedUrl attribute. If not null, this will set the browserInteractionName attribute in the BrowserInteraction event. $trigger string Optional. If not null, this will set the TRIGGER attribute on the BrowserInteraction event. Return values This method returns the same API object created by interaction(). Examples document.getElementById('subscribe').addEventListener('submit', () => { newrelic.interaction().setName('createSubscription') createSubscription() }) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 195.37032,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "setName (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "sections": "setName (<em>browser</em> <em>SPA</em> <em>API</em>)",
        "tags": "<em>Browser</em> <em>agent</em> <em>and</em> <em>SPA</em> <em>API</em>",
        "body": "Syntax newrelic.interaction().setName(string $name[, string $trigger]) Copy Sets the name and trigger of a <em>SPA</em>&#x27;s <em>browser</em> interaction that is not a route change or URL change. Requirements <em>Agent</em> version nr-963 or higher. Description This <em>SPA</em> <em>monitoring</em> method sets the name and trigger of a <em>browser</em>"
      },
      "id": "6043fe38196a677688960f98"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/new-relic-browser-release-notes/browser-agent-release-notes/browser-agent-v1158/",
      "sections": [
        "Browser agent v1158",
        "Notes",
        "Agent release schedule Browser distributed tracing CORS support",
        "Distributed tracing for cross-origin AJAX calls"
      ],
      "published_at": "2021-12-26T00:09:27Z",
      "title": "Browser agent v1158",
      "updated_at": "2021-03-11T04:55:59Z",
      "type": "docs",
      "external_id": "c0401a8459b88dd2ce42f5c0415d7e873dd77e5d",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Notes This agent release includes functionality to support the addition of cross-origin resource sharing (CORS) for Browser's distributed tracing feature. This agent will be rolled out prior to the feature availability in the UI. Please note that the Browser-distributed-tracing feature is only supported with our Browser Pro + SPA agent. Full feature availability delivered on Jan. 2, 2019. Agent release schedule Browser distributed tracing CORS support APM auto-injected agents: 12/19/2019 Copy/Paste agent: 12/30/2019 Distributed tracing for cross-origin AJAX calls The agent can now add the newrelic distributed tracing header to outgoing cross-origin AJAX calls. The origins that the agent should add headers to must be defined in the distributed_tracing.allowed_origins configuration section. Users can now enable CORS from the Browser 'Application settings' page. For complete feature documentation, visit the Enable cross-origin resource sharing (CORS) section of our Browser data in distributed tracing documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 888.1941,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> agent v1158",
        "sections": "Agent release schedule <em>Browser</em> <em>distributed</em> <em>tracing</em> CORS support",
        "body": " the newrelic <em>distributed</em> <em>tracing</em> header to outgoing cross-origin AJAX calls. The origins that the agent should add headers to must be defined in the <em>distributed_tracing</em>.allowed_origins configuration section. Users can now enable CORS from the <em>Browser</em> &#x27;Application settings&#x27; page. For complete feature documentation, visit the Enable cross-origin resource sharing (CORS) section of our <em>Browser</em> <em>data</em> in <em>distributed</em> <em>tracing</em> documentation."
      },
      "id": "60451be2196a6763df960f40"
    },
    {
      "sections": [
        "Missing trace data",
        "Problem",
        "Solution",
        "Important",
        "Problems with enabling or instrumenting",
        "Missing spans due to service not having distributed tracing enabled",
        "Missing apps/services may require manual instrumentation",
        "Problems with spans",
        "Infinite Tracing: missing spans",
        "Missing span not getting exported",
        "Missing spans due to sampling process",
        "Missing spans due to span limits maxed out",
        "Missing spans due to spans being sent late",
        "Problems with trace details",
        "Middleware doesn't recognize proprietary New Relic header",
        "An intermediary is missing or isn't passing trace context",
        "Tip",
        "Stitching together spans from mixed sources",
        "Trace details are obfuscated",
        "Trace list information and trace details don't match",
        "Long traces with short backend times",
        "Problems with browser applications",
        "Missing spans and transactions after enabling for a browser application",
        "Not seeing browser app end-user spans",
        "Browser spans are not connected to other spans",
        "Other problems",
        "Search by entity.name not finding associated app names",
        "Supporting OpenTelemetry"
      ],
      "title": "Missing trace data",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Troubleshooting"
      ],
      "external_id": "2997172d74563c4fa31d5a9fc05c562d62c1c790",
      "image": "https://docs.newrelic.com/static/ef51359ad9a7999f7fdaf812fab535bc/d7542/missing-exporter.png",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/troubleshooting/missing-trace-data/",
      "published_at": "2021-12-25T15:02:18Z",
      "updated_at": "2021-07-08T22:10:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You have enabled distributed tracing but data you expected to see does not appear in New Relic's distributed tracing UI. Solution Important Before performing troubleshooting, we recommend reading How distributed tracing works. Here are some causes and solutions when you have problems finding expected data in the distributed tracing UI: Problems with enabling or instrumenting Missing spans due to service not having distributed tracing enabled In order for distributed tracing to report details for all nodes in a trace, each application must be monitored by a New Relic agent that has had distributed tracing enabled. If an application's New Relic account has not had distributed tracing enabled, it will have these issues: Its distributed tracing UI page won't have data. It won't report data to other accounts' distributed traces. Missing apps/services may require manual instrumentation When you enable distributed tracing for applications and services that New Relic automatically instruments, you'll usually see complete and detailed data for those nodes in the distributed tracing UI. However, you may notice that some services or applications are missing from traces, or that there are some internal spans you expect to see that are missing. If that's the case, you may want to implement custom instrumentation of applications or specific transactions to see more detail in traces. Some examples of when you may need to do this: Transactions not automatically instrumented. To ensure your application is automatically instrumented, read the compatibility and requirements documentation for the New Relic agent you're using. If an application isn't automatically instrumented, or if you'd like to add instrumentation of specific activity, see Custom instrumentation. All Go applications. The Go agent, unlike other agents, requires manual instrumentation of your code. For instructions, see Instrument a Go application. A service doesn't use HTTP. If a service doesn't communicate via HTTP, the New Relic agent won't send distributed tracing headers. This may be the case for some non-web applications or message queues. To remedy this, use the distributed tracing APIs to instrument either the calling or called application. Problems with spans Infinite Tracing: missing spans If your APM agent can’t write data fast enough to the trace observer, queue_size is an additional APM agent configuration to limit the number of spans the agent will hold. See the following examples for your agent: .NET configuration method Example Configuration file <configuration . . . > <infiniteTracing> <trace_observer> <span_events queue_size=\"100000\" /> </trace_observer> </infiniteTracing> </configuration> Copy Environment variable NEW_RELIC_INFINITE_TRACING_SPAN_EVENTS_QUEUE_SIZE=100000 Copy Python configuration method Example Configuration file infinite_tracing.span_queue_size = 100000 Environment Variable NEW_RELIC_INFINITE_TRACING_SPAN_QUEUE_SIZE = 100000 Missing span not getting exported Sometimes header propagation is successful, but the span information isn't getting sent to New Relic. For example, if OpenTelemetry is not instrumented with a New Relic exporter, the span details never make it to New Relic. In this diagram, notice that the header propagation is successful, but no exporter is set up in Service 2 to send the span to New Relic: The following diagram also shows successful header propagation, but it includes an exporter in Service 2 that sends the span details to New Relic (see Trace API): Missing spans due to sampling process Standard distributed tracing for APM uses adaptive sampling. This means that a percentage of calls to a service will be reported as part of a distributed trace. Specific calls to your service might not have been selected to be sampled. Missing spans due to span limits maxed out There are limits on the number of spans that can be collected and displayed. If an application generates a very large number of spans for a single call, it might exceed the APM agent's span-collection limit for that harvest cycle. This could result in missing spans and significantly limit the number of traces the agent can completely sample and report. We currently only show 10,000 spans at a time. Missing spans due to spans being sent late Spans must be sent within the last twenty minutes to be captured in a trace index. If you send any spans older than twenty minutes but newer than a day, the span data will still be written. However, it won't be rolled into the trace index, which controls the trace list in the distributed tracing UI. If a span has a timestamp older than a day, it will be dropped. This often occurs when there is clock skew (timing differences) between systems or long running background jobs. Problems with trace details Middleware doesn't recognize proprietary New Relic header If your transactions are only sending the proprietary New Relic header, some middleware might not recognize the format and then drop the information as shown in this diagram: One solution is to upgrade your New Relic agent to a version that supports W3C trace context. In the diagram below, the W3C-compliant New Relic agent passes the prior header along with two standardized headers: An intermediary is missing or isn't passing trace context Some potential problems with proxies and other intermediaries: Incomplete trace. Some intermediaries won't automatically propagate the distributed tracing header. In that case, you must configure that component to allow the header to be passed from source to destination. For instructions, consult the documentation for that intermediary component. Missing intermediary in trace. If the intermediary is New Relic-monitored, ensure that it propagates the newrelic header that is generated or updated by the New Relic agent running on that intermediary. This may manifest when an intermediary was previously visible in traces, but disappeared after distributed tracing was enabled for an upstream entity (for example, a browser-monitored application). Tip If some entities report trace data to another tracing system, you can use the trace ID from the New Relic UI to search other tracing systems for missing spans. Stitching together spans from mixed sources If each agent in a chain supports W3C Trace Context, then we can stitch the spans together into a complete trace. If part of the chain is from an agent, such as Zipkin, which doesn't support W3C Trace Context, then spans coming from that agent may not be included in the trace. Trace details are obfuscated If a trace contains data from applications monitored by multiple New Relic accounts, and your user permissions don't allow you to access those accounts, some of the span and service details will be obfuscated in the UI. For example, you may see a series of asterisks ( * * * * * ) instead of the service name in your distributed tracing list if you don't have access to the account linked with the service. Trace list information and trace details don't match The trace list is generated by trace indexes, which are captured in a twenty minute window from when the first spans are received. Usually, this is due to late spans. Long traces with short backend times If you're seeing unusually short backend times for long traces, this is likely an issue with the timestamps being sent. For example, the root span might be reposting microseconds as milliseconds. This can also happen if the root span is a browser application. When using an external client like a web browser, you may experience clock skew (timing differences) more often. Problems with browser applications Missing spans and transactions after enabling for a browser application Older versions of some APM agents are incompatible with distributed tracing for browser applications. If the browser application makes an AJAX request to an APM application running an incompatible agent, then the APM agent may not record transaction and span data for that request. If distributed tracing is enabled for a browser application and you are not seeing transaction or span data for downstream APM requests, review the browser data in distributed tracing requirements, and confirm that all applications are running supported versions of the APM agent. Not seeing browser app end-user spans If traces seem to be missing end-user spans, be sure you've read and understand the browser distributed tracing requirements and enable procedures. On the AJAX UI page, there are links to the distributed tracing UI regardless of whether there are end-user spans present in that trace. For details about what data generates spans, see Requirements. Browser spans are not connected to other spans Older versions of some APM agents are incompatible with distributed tracing for browser applications. If APM spans are missing consistently from traces that include browser applications, please refer to the browser data in distributed tracing requirements and confirm that all applications are running supported versions of the APM agent. For other causes of orphaned browser spans, see Browser span reporting. Other problems Search by entity.name not finding associated app names Potential cause: For applications that have multiple app names, the entity.name attribute will be associated only with the primary app name. To search by other app names, search using the appName attribute. Supporting OpenTelemetry Questions about integrating with OpenTelemetry should be taken to the Explorers Hub.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 667.48975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Missing <em>trace</em> <em>data</em>",
        "sections": "Missing spans due to service not having <em>distributed</em> <em>tracing</em> enabled",
        "tags": "<em>Distributed</em> <em>tracing</em>",
        "body": " <em>distributed</em> <em>tracing</em> requirements and enable procedures. On the AJAX UI page, there are links to the <em>distributed</em> <em>tracing</em> UI regardless of whether there are end-user spans present in that <em>trace</em>. For details about what <em>data</em> generates spans, see Requirements. <em>Browser</em> spans are not connected to other"
      },
      "id": "6072a76764441f109b9d857b"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/new-relic-browser-release-notes/browser-agent-release-notes/browser-agent-v1153/",
      "sections": [
        "Browser agent v1153",
        "New features",
        "Support for End User Originated Spans in Distributed Tracing",
        "New PageViewTiming Event to capture User Centric Perceived Performance metrics in real time",
        "Improvements",
        "How to upgrade"
      ],
      "published_at": "2021-12-26T00:08:50Z",
      "title": "Browser agent v1153",
      "updated_at": "2021-03-11T04:55:59Z",
      "type": "docs",
      "external_id": "7c906e4e2be3219168d283ef8560a72be4f64c0f",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "New features Support for End User Originated Spans in Distributed Tracing New Relic now supports end-to-end distributed tracing with this release. For our Browser & APM Pro customers, you can now enable the Browser spans for any app that uses our Browser Pro + SPA agent. This MVP includes support for same-origin AJAX requests that originate during a BrowserInteraction event. This AJAX request will be listed as the root entry span for a trace. Learn More For more details about APM & Browser agent version requirements and enablement, see our Browser Data in Distributed Tracing Page. Please note that not all APM agents are supported at this time. For more details about all supported Span attributes, visit our Event Data Dictionary Known Issues Enabling Browser in Distributed Tracing for use with current versions of these language agents, Java, PHP, and C, will result in disconnected traces (single span traces for all Browser requests) and potentially the loss of APM transaction traces and spans. Please see the APM compatibility requirements for supported versions and estimated release dates. New PageViewTiming Event to capture User Centric Perceived Performance metrics in real time With this release, we are tying together the visual and responsiveness performance for our customer's site. With every page view, the agent is now capturing the time of the first interaction along with FID (First Input Delay). The existing paint timing metrics (First Paint and First Contentful Paint) are now collected even when they occur after the load event. All of these new metrics are captured on the new PageViewTiming events, available in Insights. This new event type is available for all agents, but requires a Browser Pro subscription. Visit our New Relic Event Data Dictionary for a list of attributes and more details about the PageViewTiming event. First Interaction First Interaction timing captures the moment in time that a user first engages with a site. Within this timing, we also capture the type of interaction (click, key, mousedown, etc). This timing represents the first step in calculating the First Input Delay, which is the time from First Interaction to the moment that the site responds (is interactive). First Input Delay FID is a metric that tracks the delay between the time a user can attempt to interact with a part of the site (for example, when they click a link, tap on a button, or use a custom, JavaScript-powered control), and the time that the interface is able to respond to that interaction. We have all experienced situations where a webpage has visibly loaded, but when we try to click around on buttons or any JavaScript-powered interactive elements, nothing responds. This delay is what the FID metric tracks. The FID metric is in some ways an intersection of the First Contentful Paint and Time to Interactive metrics. It lies in the middle of those two points, measuring the time between the FCP (and therefore when a first input can be made) and when the browser’s main thread is able to respond to any interactions. One major point of FID that differentiates it from Time to Interactive is that it requires a user to interact! TTI can be calculated without user input, so it is somewhat less powerful in the sense that it isn't providing any new information about my user's active experience or frustration, we can only assume that slow = bad. Why only consider the first input Learn more For more information and query examples, see our PageViewTiming event documentation. For more information about the Paint Timing browser compatibility, see the Browser compatibility and requirements documentation. For more information about User-Centric Perceived Performance metrics, visit the Google Developers Web Fundamentals Guides on Performance. For more information about the difference between FID and TTI, see When Users Click: Tracking First Input Delay Improvements Browser interactions now wait on external scripts to finish loading: Browser interactions measure the time of all Javascript code that runs as a result of an interaction. The agent now includes the time it takes to load and execute external scripts. This is useful, for example, when the code started by an interaction must be loaded first (lazy loading). How to upgrade To upgrade your agent to the latest version, see Upgrade the Browser agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 592.9781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> agent v1153",
        "sections": "Support for End User Originated Spans <em>in</em> <em>Distributed</em> <em>Tracing</em>",
        "body": " for same-origin AJAX requests that originate during a <em>Browser</em>Interaction event. This AJAX request will be listed as the root entry span for a <em>trace</em>. Learn More For more details about APM &amp; <em>Browser</em> agent version requirements and enablement, see our <em>Browser</em> <em>Data</em> in <em>Distributed</em> <em>Tracing</em> Page. Please note"
      },
      "id": "60451ba664441f60ee378f2a"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/browser-error-profiles-find-error-causes": [
    {
      "image": "",
      "url": "https://developer.newrelic.com/components/icon/",
      "sections": [
        "Icon",
        "Usage",
        "Examples",
        "Props"
      ],
      "published_at": "2021-12-25T01:53:26Z",
      "title": "Icon",
      "updated_at": "2021-12-18T01:40:46Z",
      "type": "developer",
      "external_id": "c6efdde9954d4b3df76ecab1c3326e5fd5bfe083",
      "document_type": "page",
      "popularity": 1,
      "body": "Usage import { Icon } from 'nr1' Copy Examples Props classNamestring Appends class names to the component. Should be used only for positioning and spacing purposes. colorstring Color of the icon. By default it gets the current value of the css color property of the element. spacingTypeenum[] Spacing property. Spacing is defined as a tuple of zero to four values, which follow the same conventions as CSS properties like margin or padding. To omit a value, use SPACING_TYPE.OMIT. <Array of <One of Icon.SPACING_TYPE.EXTRA_LARGE , Icon.SPACING_TYPE.LARGE , Icon.SPACING_TYPE.MEDIUM , Icon.SPACING_TYPE.NONE , Icon.SPACING_TYPE.OMIT , Icon.SPACING_TYPE.SMALL , > > styleobject Inline style for custom styling. Should be used only for positioning and spacing purposes. testIdstring Adds a data-test-id attribute. Use it to target the component in unit and E2E tests. For a test id to be valid, prefix it with your nerdpack id, followed up by a dot. For example, my-nerdpack.some-element. Note: You might not see data-test-id attributes as they are removed from the DOM, to debug them pass a e2e-test query parameter to the URL. typerequiredenum Name of the icon to display. <One of Icon.TYPE.DATAVIZ__DATAVIZ__AREA_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__BAR_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__BULLET_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__CHART , Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD , Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT , Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE , Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD , Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD , Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT , Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER , Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE , Icon.TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__LINE_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__MARKDOWN , Icon.TYPE.DATAVIZ__DATAVIZ__PIE_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__TABLE_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART , Icon.TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD , Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE , Icon.TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT , Icon.TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION , Icon.TYPE.DOCUMENTS__DOCUMENTS__EMAIL , Icon.TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE , Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE , Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD , Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE , Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER , Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD , Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE , Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES , Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD , Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT , Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD , Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS , Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM , Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE , Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD , Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT , Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT , Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT , Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT , Icon.TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL , Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT , Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE , Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD , Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT , Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE , Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD , Icon.TYPE.INTERFACE__ARROW__ARROW_TOP , Icon.TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE , Icon.TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD , Icon.TYPE.INTERFACE__ARROW__ARROW_VERTICAL , Icon.TYPE.INTERFACE__ARROW__EXPAND , Icon.TYPE.INTERFACE__ARROW__GO_TO , Icon.TYPE.INTERFACE__ARROW__MOVE , Icon.TYPE.INTERFACE__ARROW__RESIZE , Icon.TYPE.INTERFACE__ARROW__RETURN_LEFT , Icon.TYPE.INTERFACE__ARROW__RETURN_RIGHT , Icon.TYPE.INTERFACE__ARROW__SHRINK , Icon.TYPE.INTERFACE__ARROW__SORT , Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM , Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE , Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_LEFT , Icon.TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE , Icon.TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_RIGHT , Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE , Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_TOP , Icon.TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8 , Icon.TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE , Icon.TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8 , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD , Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8 , Icon.TYPE.INTERFACE__INFO__ANNOUNCEMENT , Icon.TYPE.INTERFACE__INFO__HELP , Icon.TYPE.INTERFACE__INFO__INFO , Icon.TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD , Icon.TYPE.INTERFACE__OPERATIONS__ADJUST , Icon.TYPE.INTERFACE__OPERATIONS__ALERT , Icon.TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE , Icon.TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF , Icon.TYPE.INTERFACE__OPERATIONS__ALERT__S_ON , Icon.TYPE.INTERFACE__OPERATIONS__ARCHIVE , Icon.TYPE.INTERFACE__OPERATIONS__CENTER , Icon.TYPE.INTERFACE__OPERATIONS__CLOSE , Icon.TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8 , Icon.TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__CONFIGURE , Icon.TYPE.INTERFACE__OPERATIONS__COPY_TO , Icon.TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD , Icon.TYPE.INTERFACE__OPERATIONS__DOWNLOAD , Icon.TYPE.INTERFACE__OPERATIONS__DRAG , Icon.TYPE.INTERFACE__OPERATIONS__EDIT , Icon.TYPE.INTERFACE__OPERATIONS__EXPORT , Icon.TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK , Icon.TYPE.INTERFACE__OPERATIONS__FILTER , Icon.TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD , Icon.TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE , Icon.TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__FOLLOW , Icon.TYPE.INTERFACE__OPERATIONS__GROUP , Icon.TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE , Icon.TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__HIDE , Icon.TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS , Icon.TYPE.INTERFACE__OPERATIONS__HIGHLIGHT , Icon.TYPE.INTERFACE__OPERATIONS__IMPORT , Icon.TYPE.INTERFACE__OPERATIONS__MORE , Icon.TYPE.INTERFACE__OPERATIONS__PAUSE , Icon.TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__PIN , Icon.TYPE.INTERFACE__OPERATIONS__PLAY , Icon.TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__REARRANGE , Icon.TYPE.INTERFACE__OPERATIONS__REDO , Icon.TYPE.INTERFACE__OPERATIONS__REFRESH , Icon.TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY , Icon.TYPE.INTERFACE__OPERATIONS__SEARCH , Icon.TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__SELECTION , Icon.TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE , Icon.TYPE.INTERFACE__OPERATIONS__SHARE , Icon.TYPE.INTERFACE__OPERATIONS__SHARE_LINK , Icon.TYPE.INTERFACE__OPERATIONS__SHOW , Icon.TYPE.INTERFACE__OPERATIONS__SKIP_BACK , Icon.TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD , Icon.TYPE.INTERFACE__OPERATIONS__TAG , Icon.TYPE.INTERFACE__OPERATIONS__TRASH , Icon.TYPE.INTERFACE__OPERATIONS__TV_MODE , Icon.TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE , Icon.TYPE.INTERFACE__OPERATIONS__UNDO , Icon.TYPE.INTERFACE__OPERATIONS__UNPIN , Icon.TYPE.INTERFACE__OPERATIONS__UPLOAD , Icon.TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER , Icon.TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER , Icon.TYPE.INTERFACE__SIGN__ASTERISK , Icon.TYPE.INTERFACE__SIGN__CHECKMARK , Icon.TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE , Icon.TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD , Icon.TYPE.INTERFACE__SIGN__CLOSE , Icon.TYPE.INTERFACE__SIGN__DOLLAR_SIGN , Icon.TYPE.INTERFACE__SIGN__EXCLAMATION , Icon.TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE , Icon.TYPE.INTERFACE__SIGN__MINUS , Icon.TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE , Icon.TYPE.INTERFACE__SIGN__NUMBER , Icon.TYPE.INTERFACE__SIGN__PLUS , Icon.TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE , Icon.TYPE.INTERFACE__SIGN__TIMES , Icon.TYPE.INTERFACE__SIGN__TIMES__SIZE_8 , Icon.TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE , Icon.TYPE.INTERFACE__STATE__CLOSED , Icon.TYPE.INTERFACE__STATE__CRITICAL , Icon.TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD , Icon.TYPE.INTERFACE__STATE__DISABLED , Icon.TYPE.INTERFACE__STATE__ENABLED , Icon.TYPE.INTERFACE__STATE__HEALTHY , Icon.TYPE.INTERFACE__STATE__LOADING , Icon.TYPE.INTERFACE__STATE__LOCK , Icon.TYPE.INTERFACE__STATE__OPEN , Icon.TYPE.INTERFACE__STATE__PRIVATE , Icon.TYPE.INTERFACE__STATE__PUBLIC , Icon.TYPE.INTERFACE__STATE__UNAVAILABLE , Icon.TYPE.INTERFACE__STATE__UNLOCK , Icon.TYPE.INTERFACE__STATE__WARNING , Icon.TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD , Icon.TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN , Icon.TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN , Icon.TYPE.INTERFACE__VIEW__GRID_VIEW , Icon.TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW , Icon.TYPE.INTERFACE__VIEW__LAYER_LIST , Icon.TYPE.INTERFACE__VIEW__LIST_VIEW , Icon.TYPE.INTERFACE__VIEW__SIXTH_SENSE , Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE , Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK , Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT , Icon.TYPE.LOCATION__LOCATION__HOME , Icon.TYPE.LOCATION__LOCATION__MAP , Icon.TYPE.LOCATION__LOCATION__PIN , Icon.TYPE.LOCATION__LOCATION__WORLD , Icon.TYPE.PROFILES__EVENTS__COMMENT , Icon.TYPE.PROFILES__EVENTS__COMMENT__A_EDIT , Icon.TYPE.PROFILES__EVENTS__FAVORITE , Icon.TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD , Icon.TYPE.PROFILES__EVENTS__LIKE , Icon.TYPE.PROFILES__USERS__ORGANIZATION , Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_ADD , Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT , Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE , Icon.TYPE.PROFILES__USERS__TEAM , Icon.TYPE.PROFILES__USERS__TEAM__A_ADD , Icon.TYPE.PROFILES__USERS__TEAM__A_EDIT , Icon.TYPE.PROFILES__USERS__TEAM__A_REMOVE , Icon.TYPE.PROFILES__USERS__USER , Icon.TYPE.PROFILES__USERS__USER__A_ADD , Icon.TYPE.PROFILES__USERS__USER__A_EDIT , Icon.TYPE.PROFILES__USERS__USER__A_REMOVE , >",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.59183,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_<em>ERROR</em> , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__<em>BROWSER</em> , Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__<em>BROWSER</em>"
      },
      "id": "6091f874196a678161d52a63"
    },
    {
      "sections": [
        "Manage error data",
        "View logs for your APM and infrastructure data",
        "Error data types: events and trace details",
        "Events",
        "Trace details",
        "Caps on error reporting",
        "Charting error rates and counts",
        "Report custom errors",
        "Ignore errors",
        "Reduce noise with expected errors",
        "Disable error traces",
        "Delete error traces",
        "Caution"
      ],
      "title": "Manage error data",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "29a2ebdc7b91029a1fada50791b90e9dc548f17e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/manage-error-data/",
      "published_at": "2021-12-25T06:09:38Z",
      "updated_at": "2021-11-14T09:35:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's APM Errors page helps you identify, triage, and fix errors in your services. The Errors page uses data collected by the APM agent to display stack traces, transaction attributes such as HTTP header values, and any other custom attributes, so you can understand the context of the error and fix it. View logs for your APM and infrastructure data You can also bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Error data types: events and trace details By default, our APM agents collect two type of error data: Events Trace details Events The error event data type includes default attributes, as well as any custom attributes instrumented in your service. It doesn't include a stack trace. Find your events data in the Errors UI as follows: The Errors column in the Error traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack trace are based on this type of data. You can disable Show only errors with stack trace to show errors that have this type of data collected, but no associated trace details. Events are subject to sampling (see Caps on error reporting and Charting error rates and counts). For more on error event data, see Events reported by APM. Trace details The trace details error data type includes stack traces and attributes, and supplements events with more data. It's expected that more events will be reported than trace details--see Caps on error reporting. Find your trace details data in the Errors UI as follows: The Stack traces column of the Error traces table. When you’ve drilled into a grouping of errors, those errors with a stack trace use this type of data. Show only errors with stack trace is enabled by default, to constrain the errors shown to just those that have this type of data collected. This data is governed by specific retention rules for Error details. Caps on error reporting New Relic caps error reporting at: 100 events per minute per agent instance 20 trace details per minute per agent instance These caps prevent error reporting from negatively impacting application performance. Examples: App running across five EC2 instances, one JVM each. New Relic caps error reporting at: 100 events per minute x 5 instances = 500 events per minute 20 trace details per minute x 5 instances = 100 trace details per minute App running on one host with ten instances. New Relic caps error reporting at: 100 events per minute x 10 instances = 1000 events per minute 20 trace details per minute x 10 instances = 200 events per minute Charting error rates and counts The Error rate chart is driven by a query on metric timeslice data, which is an unsampled aggregate data type that is accurate but has very limited dimensionality. This data can't be faceted or filtered as flexibly as error event data. You can reproduce this chart in a dashboard, or explore the metric timeslice data further by clicking the ... menu on the Error rate chart, and then using the View query or Add to dashboard options. To chart faceted error counts using event data, as in the Top 5 errors chart, use an NRQL event query. Click the ... menu on the Top 5 errors chart and choose View query for a starting point in creating your chart. Since event data can be sampled (see Caps on error reporting), you can use the EXTRAPOLATE keyword to get an accurate error count, even if sampling is occurring. Report custom errors You can report errors not collected by default with our agents using our agent APIs. For more, see the documentation on the API. Ignore errors You can prevent certain errors that would normally be reported to New Relic from being collected using our agent APIs or the server-side configuration UI. For more details, see Manage errors in APM. Reduce noise with expected errors Sometimes you want to collect error data, but not have those errors wake you up through alerts. Using the agent API, you can mark such errors as “expected”. They’ll still be visible in the Errors page, but won’t affect your service’s error rate or Apdex metrics. Disable error traces To prevent certain errors from being reported to New Relic, disable them in your agent's configuration file. For most agents, you can ignore certain error codes or disable errors completely. For more information, see your specific agent's configuration documentation: C SDK Go (not applicable; the agent only reports errors when configured to do so) Java .NET Node.js PHP Python Ruby Delete error traces Caution You cannot recover error traces after you delete them. Deleting errors is currently only available in the legacy Errors Classic UI. If you want to... Do this... Delete all error traces for your app If you have permissions to delete all error traces for an app: Go to one.newrelic.com > APM > (select an app) > More views > Errors (classic). Select Delete all errors. Delete all error traces for your account To delete all error traces for your New Relic account, get support at support.newrelic.com. Delete individual error traces To delete individual error traces, use APM's Errors (classic) page. Drill into an error from the table of errors, then click Delete this error. In addition to deleting error traces, you may also want to delete transaction traces or database/slow SQL traces. This will remove potentially sensitive data while retaining your other application data (such as Apdex, deployment information, etc.).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.04985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Manage <em>error</em> data",
        "sections": "Manage <em>error</em> data",
        "tags": "<em>Error</em> analytics",
        "body": ", as well as any custom attributes instrumented in your service. It doesn&#x27;t include a stack trace. <em>Find</em> your events data in the Errors UI as follows: The Errors column in the <em>Error</em> traces table. The Top 5 errors chart. When you’ve drilled into a grouping of errors, those errors not displaying a stack"
      },
      "id": "6044077e28ccbcab752c60d1"
    },
    {
      "sections": [
        "Errors page: Find, fix, and verify problems",
        "View the APM Errors page",
        "Important",
        "Use the Errors workflow to identify problems",
        "Error rate chart: See patterns immediately",
        "Top five errors: Correlate to alerts or find significant groupings",
        "Error traces: Find the line of code and data needed to reproduce the issue",
        "Examine logs for error details",
        "Expected errors",
        "Errors outside transactions",
        "Select the time period for error data"
      ],
      "title": "Errors page: Find, fix, and verify problems",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Error analytics"
      ],
      "external_id": "fe321816a8727f65e32b4ec1f381ba9d17c432b7",
      "image": "https://docs.newrelic.com/static/1b3bf12a5d48aa0396de5e488bf17f27/c1b63/WebPortal___New_Relic_One.png",
      "url": "https://docs.newrelic.com/docs/apm/apm-ui-pages/error-analytics/errors-page-find-fix-verify-problems/",
      "published_at": "2021-12-25T05:40:24Z",
      "updated_at": "2021-11-14T09:35:11Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Errors UI in New Relic One, you can see the line of code that's causing a bad experience for your users, and get enough data to reproduce the issue so you can fix it. When you do, you’ll be able to confirm your fix is working in production. Use Errors in New Relic One to: Group and filter events to triage important errors. Get alert notifications about errors. Review stack traces, logs, and other details. Share the error information with charts and dashboards. Report new errors using instrumentation, prevent certain errors from being reported, and filter out noisy errors using expected errors. View the APM Errors page Important As of November 1, 2021, the APM Errors (classic) UI will be discontinued in favor of the New Relic One APM Errors UI. For more details, see our Explorers Hub post. To view the Errors page: Go to one.newrelic.com > APM > (select an app), then click the Error rate table's title on your selected app's Summary page. OR Go to one.newrelic.com > APM > (select an app) > Events > Errors. APM Errors UI: The Error rate chart always shows the rate for all errors, even if a filter is applied. To drill down further, use grouping and filter options for the Top 5 by count chart and Error traces table. Use the Instance dropdown to focus on a specific instance. Use the Errors workflow to identify problems Use this basic workflow to get the most out of the information you see from the Errors page. Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. Correlate any general patterns on the Top 5 errors chart to alerts occurring during the same time period. Use the groups and filters to examine the error events and attributes in more detail, and look for patterns with error messages, transaction names, or other groupings. Explore and share Error trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the Error profiles page to guide your investigation into which attribute values might be correlated to the cause of errors, by comparing the frequency of those values between transactions where the error did and didn't occur (only in the old UI). Error rate chart: See patterns immediately Start with the Error rate chart to see at a glance whether there are any unexpected spikes, dips, or patterns with errors in general. For example, are there any spikes near a recent deployment? You may want to change the selected time period to look for other historical patterns. This chart always shows the overall error rate and count for the selected time period, even when you filter the rest of the page. If you want to focus your investigation on a particular type of error, use the Top 5 errors chart or the Error traces table. Top five errors: Correlate to alerts or find significant groupings Use the Top 5 errors chart to identify what error types and how many of those errors occurred during the same time period as the Error rate chart. For example: Is the error spike related to a specific exception class or transaction? Do the top errors point to a new host/container that recently got moved into production? Are the top error messages repeatedly about failed connections by hosts that you know are in a specific region of your organization? Have the chart backgrounds changed color to indicate an alert condition? (Light pink indicates the alert condition's Warning threshold, and dark pink indicates the Critical threshold.) If you want to... Do this... Change the \"top 5\" selection By default, Top 5 errors chart shows the top five errors by error class and transaction name. To group by other attributes, such as error message, host, or custom attribute, use the search bar. Explore or share error trend data The Top 5 errors chart uses error events, which include rich attribute data b default, along with any custom attributes you have added to the error event type. To examine this data in more detail, or to share it with others, select the View query or Add to dashboard links that appear when you click the chart's ... menu. Error traces: Find the line of code and data needed to reproduce the issue The Error traces table groups errors by the attributes you've selected, and links them to relevant detailed error traces. Each row helps you find answers to questions such as: How many of this transaction/class (or custom grouping) occurred within the selected time period? What is the most recent error message? When did this error first and last occur? Sometimes it may be useful to sort error trace data other than from the most to fewest occurrences. You can change the sort order or filter options to focus on just the types of errors that matter the most to you and your teams. For example: Which error has the fewest occurrences (sort on Errors column)? When did a particular error stop (sort on Last occurred)? Once you find the group of errors you want to fix, click a row in the Error traces table to drill down into the stack traces and attribute data that help pinpoint the cause. Examine logs for error details You can bring your logs and application's data together to make troubleshooting easier and faster. With logs in context, you can see log messages related to your errors and traces directly in your app's UI. From the Errors page, click on an error to go to the Error details page. From the error details page, click See logs. To view details related to an individual log message, click directly on the message. With logs in context, you can examine log data directly within your error details. You can also see logs in context of your infrastructure data, such as Kubernetes clusters. No need to switch to another UI page in New Relic One. Expected errors Reduce noisy errors by marking them as “expected errors”. Such errors won't affect reported error rate or Apdex metrics. See Manage errors for more details. Expected errors aren't shown by default on the Errors page. You can show them by turning on the Show N expected errors switch below the Group by bar. Errors outside transactions Using the New Relic agent API, you can record custom errors at any point in the execution of your code. Sometimes, such custom errors will occur when a transaction is not executing, such as in high-volume aynchronous code that doesn't handle an HTTP transaction. Errors outside transactions are shown by default on the Errors page, but you can hide them by turning off the Show N errors outside transactions switch below the Group by bar. Select the time period for error data Use the time picker to examine details of error events over the past week. The error events view is available for up to a seven-day window of data collected over the last eight days. You may notice slight differences in count if your time window is set to ending now. This occurs because the counts for the list and table may be requested at slightly different times as the page auto-refreshes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.04967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Errors</em> page: <em>Find</em>, fix, and verify problems",
        "sections": "<em>Errors</em> page: <em>Find</em>, fix, and verify problems",
        "tags": "<em>Error</em> analytics",
        "body": " messages, transaction names, or other groupings. Explore and share <em>Error</em> trace table information, including specific stack trace details, logs, and attributes (host, URL, user, custom attributes, etc.) Also review the <em>Error</em> <em>profiles</em> page to guide your investigation into which attribute values might"
      },
      "id": "60440747e7b9d2f2295799b6"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/filterable-geography-webpage-metrics-location": [
    {
      "sections": [
        "Synthetic monitoring best practices guide",
        "1. Match your monitor type to monitoring need",
        "How to do it",
        "2. View all monitors with the Monitors index page",
        "How to view your monitors in the New Relic One:",
        "New Relic Explorer",
        "Monitors index page",
        "3. View individual monitor results",
        "How to do it:",
        "4. Understand the load-time impact of each resource",
        "5. Configure and develop a scripted browser test"
      ],
      "title": "Synthetic monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides"
      ],
      "external_id": "e76eb0669a1433bb9d0de70d90413e19749adf61",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/synthetic-monitoring-best-practices-guide/",
      "published_at": "2021-12-25T11:14:52Z",
      "updated_at": "2021-12-25T11:14:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's synthetic monitoring—powered by a Selenium-driven Chrome browser—allows you to monitor and test your apps and address issues before they affect your end users. Here are five tips to help you take immediate advantage of its full power. 1. Match your monitor type to monitoring need Synthetic monitors are virtual browsers that measure the performance of your website, recording each check in detail. They also capture aggregate numbers for load time, uptime, and average download size, as well as an overview, detailed statistics for each page resource, and downtime incidents. There are four types of synthetic monitors; the ones you deploy will depend on the things you want to monitor: Ping monitors—to ensure that your site is accessible. Simple browser monitors—to ensure end-user performance. Scripted browsers—to ensure that particular resources are present. API monitors—to ensure that your app server works as well as your website. How to do it To add a monitor, go to one.newrelic.com > Synthetics (or one.eu.newrelic.com if you have an EU-based account) and click Create monitor. Specify monitor type, name, and URL. Optional: Add a validation string (available for ping and simple browser) or advanced options, which enable substring monitoring for the following types of response validation: Verify SSL (for ping and simple browser). This option verifies the validity of the SSL certificate chain. It can be duplicated by running the following syntax: openssl s_client -servername {YOUR_HOSTNAME} -connect {YOUR_HOSTNAME}:443 -CApath /etc/ssl/certs > /dev/null Copy Bypass HEAD request (for ping). This option skips the default HEAD request and instead uses the GET verb with a ping check. Redirect is Failure (for ping). If a redirect result occurs when Redirect is Failure is enabled, Synthetics categorizes it as a failure (rather than following the redirect and checking the resulting URL). Select the locations where you want your monitor to run. Choose a frequency to determine how often each location will run your monitor. Optional: Set up alert notifications. Select Create my monitor to confirm. Wait a few minutes; then from the Monitors index check your monitor. 2. View all monitors with the Monitors index page Continuous application performance monitoring is essential to ensure that web services are in place, working correctly, and error-free. Synthetic monitoring provides this type of assurance by performing automated tests on your web application for each selected location—noting downtime instances (“violations”) and collecting aggregate numbers, results, and detailed statistics for each page resource. Use the Monitors index page to get a high level view of this information, or select an individual monitor to view the Summary, for ping monitors, or Overview, for simple and scripted monitors, page and get a deeper insight into its performance over time. How to view your monitors in the New Relic One: New Relic Explorer To view a list of monitors using the New Relic One Monitors index page: Go to one.newrelic.com > Explorer > Synthetic monitors. For more information, see the documentation about navigating core UI components in New Relic One. Monitors index page To view a list of monitors using the Monitors index page: Go to one.newrelic.com > Synthetics. 3. View individual monitor results It’s not enough to understand how your web apps are performing for your West Coast customers; you need to be able to view how they’re performing across the country and around the globe. By taking advantage of synthetic monitors and visiting your Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or filter by location to understand how monitor performance varies with geography. (The “Network timings” graph below provides a snapshot of webpage performance over a given period.) How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors tab, select your monitor. Select Monitor > Results. Gain an up-to-the-minute view of the slowest page loads for every monitored location. 4. Understand the load-time impact of each resource Visit the synthetics Resources page to see how each resource on your website—including CSS, JavaScript, images, HTML and more—is affecting your overall load. You can drill into detailed metrics collected at run time, locate performance information for time spent by third-party resources, and identify HTTP response codes for each resource. How to do it: Go to one.newrelic.com > Synthetics and, from the Monitors drop-down menu, select your monitor. Select Monitor > Resources. 5. Configure and develop a scripted browser test Using scripted browsers, you can build complex monitoring workflows using the Selenium JavaScript Webdriver bindings. For instance, you can log in to the application, navigate to a particular link, and wait for a page element to load and add an assertion. How to do it: Go to one.newrelic.com > Synthetics. Choose your monitor type (for example, scripted browser). Enter the name and details of your monitor (for example, Sitename.com scripted browser) Select the locations from which you want your monitor to run (for example, Mumbai, Seoul, Columbus, and Montreal). Choose a frequency to determine how often each location will run your monitor (for example, five minutes). Set a notification method to alert your team when performance violations occur. You are now ready to write your script. (Below is an example of a script used to test the performance of a main navigation page.) var assert = require('chai').assert; // script-wide timeout for all wait and waitandfind functions (in ms) var default_element_timeout = 190000; //3 mins var default_pageload_timeout = 240000; //4 mins var navlinks = [\"css-locator-1\", \"css-locator-2\"]; //sets element load timeout to 3 mins $browser.manage().timeouts().implicitlyWait(default_element_timeout); //sets page load timoeout to 4 mins $browser.manage().timeouts().pageloadTimeout(default_pageload_timeout); //test all the main nav page performances $browser.get(\"http://www.sitename.com\").then(function() { return $browser.findelement($driver.by.classname(\"site-theme-example\")); }).then(function() { //verifies the nav list has loaded return $browser.findelement($driver.by.classname(\"site-nav-list-example\")); }).then(function() { //loops through the navlinks array navlinks.foreach(function(val, i, arr) { //finds and navigates to each navlink page return $browser.findelement($driver.by.classname(navlinks[i])).click().then(function() { //verifies that the nav list loaded before moving on return $browser.findelement($driver.by.classname(\"site-nav-list-example\")).then(function() { //verifies that the page logo footer at bottom of page has loaded return $browser.findelement($driver.by.classname(\"site-footer-logo\")); }); }); }); }); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.98169,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": " Results page, you can see how everything from development to production affects user experience. You can locate interesting results by sorting the list to identify slow, fast, or other unusual results. Or <em>filter</em> by <em>location</em> to understand how monitor performance varies with <em>geography</em>. (The “Network"
      },
      "id": "603e84bb28ccbce555eba771"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 125.37253,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser settings: UI options for Apdex and <em>geography</em>",
        "sections": "Browser settings: UI options for Apdex and <em>geography</em>",
        "body": " <em>geography</em> page Select Apdex and <em>geography</em> settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the <em>Filterable</em> <em>geography</em> page. Go to one.newrelic.com &gt; Browser"
      },
      "id": "6043fea6196a676128960f4b"
    },
    {
      "sections": [
        "Browser Geography: Webpage performance by location",
        "Contents",
        "View performance data by region",
        "Important",
        "Use page functions",
        "View drill-down details"
      ],
      "title": "Browser Geography: Webpage performance by location",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "7b26e484a4645be8c580650fd7d71a159114bf50",
      "image": "https://docs.newrelic.com/static/793341e63f8e5b444d7cc98a1f5a7d90/c1b63/geo_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browser-geography-webpage-performance-location/",
      "published_at": "2021-12-25T09:28:29Z",
      "updated_at": "2021-10-31T01:03:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Geography page provides a world view with color-coded Apdex scores and other performance information about your end users' experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load performance and historical performance. Contents View performance data by region Important Firewalls may have an impact on the geographical data collected about your end users. To view or sort the performance information by location: one.newrelic.com > Browser > (select an app) > Geo: This page provides a world view and drill-down details of color-coded performance information for geographic locations. Go to one.newrelic.com > Browser > (select an app) > Geo > Global (for a world view). OR Go to one.newrelic.com > Browser > (select an app) > Geo > (select a location) (for a specific location you identified in the Browser application settings). To drill down to a specific area, select a location from the list, or select any area on the geographical map. To view additional details about the selected location, select the Page load performance or Historical performance links. To return to the main Geography page, select X (Close). one.newrelic.com > B * *rowser > (select an app) > Geo > (select a location): If you selected specific locations from Settings > Application settings * * , the Geography page includes tabs to view their performance data directly. Use page functions Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Geography page: If you want to... Do this... Change how the performance data appears Select your choice from the Sort by menu. Adjust the amount of information that appears Select or clear the Hide < % throughput checkbox ( < 1% for global view, < 2% for selected locations). View a map of a specific location Do any of these as applicable: Select the location's name from the Geo > Global list. Select its physical location on the map. If you have pre-selected the location from Application settings, select its tab. View summary performance information about a specific location Mouse over any colored area. View drill-down details After you select a specific location, the Page load performance page shows: Average page load time in seconds Number of page views and active sessions as pages per minute (ppm) Recent browser traces if applicable one.newrelic.com > Browser > (select an app) > Geo > (select a location): After you select a specific location, you can view specific details about Page load performance and Historical performance. In addition, the Historical performance page shows comparison data for the selected time period, yesterday, and last week for the selected location. This includes: Response time Apdex Throughput in pages per minute (ppm)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.2223,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser <em>Geography</em>: <em>Webpage</em> performance <em>by</em> <em>location</em>",
        "sections": "Browser <em>Geography</em>: <em>Webpage</em> performance <em>by</em> <em>location</em>",
        "body": " to the main <em>Geography</em> page, select X (Close). one.newrelic.com &gt; B * *rowser &gt; (select an app) &gt; Geo &gt; (select a <em>location</em>): If you selected specific locations from Settings &gt; Application settings * * , the <em>Geography</em> page includes tabs to view their performance data directly. Use page functions Use any"
      },
      "id": "604429e7196a67193d960f75"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/intro-to-browser-pro-features": [
    {
      "sections": [
        "JavaScript errors page: Detect and analyze errors",
        "View JavaScript errors",
        "Query and visualize JS data",
        "Use API to monitor handled errors",
        "Review event logs",
        "Important",
        "Troubleshoot missing event logs",
        "View stack traces",
        "Troubleshoot missing stack traces",
        "Global and generic errors"
      ],
      "title": "JavaScript errors page: Detect and analyze errors",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Browser Pro features"
      ],
      "external_id": "90edc523244dbf2bf9a9c23b0a00e3e09634e4df",
      "image": "https://docs.newrelic.com/static/2d5c8d1b43fe37ec696af0dbf8e1f7d4/c1b63/browser_jserrors_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/javascript-errors-page-detect-analyze-errors/",
      "published_at": "2021-12-25T02:31:03Z",
      "updated_at": "2021-11-06T17:05:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's JS errors UI page shows you where your JavaScript errors are happening, and provides tools to help you figure out the root cause. You can also query and create dashboards of JS error data in the query builder, or use the browser API to monitor handled errors. View JavaScript errors To examine JavaScript errors: Go to one.newrelic.com > Browser > (select an app) > JS errors. Use the available options in the UI to examine what may be causing the errors. Optional: Review event logs or stack traces in the UI. Optional: Query and create dashboards for JS error data with the query builder, or use the API to monitor or log errors. Available options in the UI include: If you want to... Do this Search through long error lists Use the Search box so you can more quickly find and fix errors by keywords, URLs, etc. Group and filter attributes To change how your error data is grouped, use the Group by function. (The Page loads chart cannot be changed with grouping.) To filter the data by only showing errors with specific attributes, use the Filter dropdown. See notable anomalies and patterns The Error profiles table shows notable statistical variations, such as browser versions or devices that have errors occurring more frequently than normal. Examine error details Select an error from the main page to view detailed information about that error, such as the top five browsers that error occurred on, the top five devices it occurred on, and associated URIs. Select Error instances to see event logs and stack traces, if available. Examine events leading up to error The Event log shows the browser interactions, AJAX calls, and traces that led up to an error. Decode your minified JavaScript If your JavaScript is minified, the errors on the JS errors page may not be very useful. To decode minified JavaScript and make these error stack traces more useful, you can upload JavaScript source maps to New Relic. one.newrelic.com > Browser > (select an app) > JS errors: Use this page to group and filter errors, explore stack trace details, and examine trends. Query and visualize JS data New Relic saves JS errors as event data. This allows you to query your error data in the query builder. To run NRQL queries and create dashboards to view or share, query the JavaScriptError event type in the query builder. Use API to monitor handled errors To notice or log your app's handled errors or other miscellaneous errors, use the browser API's noticeError call. Review event logs Important SPA monitoring must be enabled. The event log shows the browser interactions, AJAX calls, and traces that led up to a JS error. This can help you troubleshoot the root cause of errors. one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances: With SPA monitoring enabled, the event log shows you the activity leading up to an error. To view the Event log (if available): Go to one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances. The event log will not be visible if there are no events in the event log. For example, if a JS error is occurring after an AJAX request that provides an error message, it could be that your AJAX request doesn't contain the right information. This results in a JS error due to a failed AJAX call. Troubleshoot missing event logs Some reasons for events in the event log not being present: Agent version. To capture event log data your site must have SPA monitoring enabled (browser agent version 1071 or higher). JS error not part of a browser interaction. If the JS error occurs outside of an interaction, the related browser interaction details cannot be captured (for example: if an async JS file experiences an error). A click triggered the JS error. In some cases if the error is a direct result of a click, no associated interactions are captured. Without event logs or stack traces, you can use the error detail charts to analyze the impact the error has by browser type, device type, and URI. View stack traces Stack traces can show you if an error is breaking important functionality, or if it's a less important error. To view an error's stack trace (if available): go to one.newrelic.com > Browser > (select an app) > JS errors > (select an error) > Error instances. Troubleshoot missing stack traces Some reasons why you may not see a stack trace for an error: If errors are not thrown, they will not produce a stack trace. The JS script is hosted on a CDN or another external location, and New Relic can't see the errors originating from those scripts. This can be solved in some cases by using cross-origin resource sharing (CORS). It is an AngularJS error. For more on this, see Missing Angular errors. The error is a SyntaxError or Script error: These occur while the script is loading, so they do not produce a stack trace. Some older browsers may generate errors without a stack trace, or may provide a stack trace that is not usable. You've captured the error before the New Relic agent sees it. If the error occurs during multiple harvest cycles in the same user visit, only error events reported during the first harvest cycle will have a stack trace recorded. Some solutions for reporting stack traces: Use the noticeError API call. Enable development mode. Use the JS errors UI page to get more information, including the event log. The JS errors page is designed to give you actionable information even without a stack trace. Global and generic errors New Relic wraps JavaScript functions to get information about thrown errors via the stack trace. If errors aren't thrown, they won't be available. For example, if you have an AngularJS application, follow the troubleshooting procedures when AngularJS errors do not appear in the UI. For some older browsers, the following errors may be unavailable: SyntaxError or Script error: These occur while the script is loading, so they do not produce a stack trace. In-line JavaScript or event handler errors: These are unwrapped. Errors thrown from third-party scripts that reside on another domain are not available. Errors occurring on older browsers: These may not be able to provide a usable stack trace. In some cases, they may not provide a stack trace at all. Error collection is done by wrapping JavaScript functions, so errors thrown by the browser at a lower level (such as cross-origin resource sharing errors) also are not available.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 182.64244,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>Pro</em> <em>features</em>",
        "body": " to a failed AJAX call. Troubleshoot missing event logs Some reasons for events in the event log not being present: <em>Agent</em> version. To capture event log data your site must have SPA monitoring enabled (<em>browser</em> <em>agent</em> version 1071 or higher). JS error not part of a <em>browser</em> interaction. If the JS error"
      },
      "id": "6043fcf228ccbc12062c6080"
    },
    {
      "sections": [
        "Install the browser monitoring agent",
        "Enable browser monitoring",
        "Deployment options",
        "Enable an APM-monitored app",
        "Enable with copy/paste",
        "Instrument webpages using the APM agent",
        "Use REST API",
        "Browser agent types: Lite, Pro, Pro+SPA"
      ],
      "title": "Install the browser monitoring agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "bc45bbc86cd4d8b81367ad0904907ddc735717f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-11-13T06:04:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser uses a JavaScript snippet, also referred to as an \"agent,\" to instrument your app's webpages. The JavaScript collects data for browser monitoring. To install the browser agent, you can choose from a number of deployment options. If you don't have one already, create a New Relic account. It's free, forever. Get an account Enable browser monitoring Browser Pro+SPA is the default agent when you enable browser monitoring. This automatically gives you access to all of our browser monitoring features. For more information about the browser monitoring options, see Browser agent types in this document. To enable browser monitoring: Go to one.newrelic.com, select Browser, and then select Add more data. Follow the instructions in the UI to add browser monitoring to your app. Generate some traffic for your app, then wait a few minutes for data to appear in New Relic. Optional: After installation is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the browser agent type. It may take several minutes after enabling the browser monitoring agent before your webpage data appear in New Relic. If have problems, follow our troubleshooting tips. Deployment options No matter which option you use to deploy browser monitoring, the end result is the same: the browser monitoring JavaScript snippet (also referred to as the \"agent\") is inserted into your app pages. The method you select depends on your preferences and business needs. Enable an APM-monitored app When enabling browser monitoring, you can use an APM agent to automatically inject the browser monitoring JavaScript snippet for you. This is the easiest way to install the agent for an app that's already being monitored by APM. APM-monitored apps are listed on your APM Applications index. Enable with copy/paste When enabling browser monitoring, you can manually insert the JavaScript snippet into your app's webpages. The copy/paste option gives you control over the exact placement of our JavaScript snippet, which is required to monitor the webpage's performance. This is useful for: Standalone apps, static sites, and cached pages delivered by CDN APM apps that are not as closely coupled to the browser app as with a standard server-side app (for example, when your client-side app talks to a REST API back end) Some tips for using the JavaScript snippet: Placement in your webpage: Copy the code snippet, then paste it inline into your pages as close to the top of the <head> element as possible, but after any position-sensitive <meta> tags (for example, X-UA-Compatible or charset information). For more information on the inline head placement, see JavaScript placement requirements. License key and app ID: Near the bottom of the generated JavaScript is your browser license key and application ID. This is useful with the REST API and API Explorer. Instrument webpages using the APM agent This information applies to apps that are also monitored by APM. Our APM agents can instrument webpages with the required JavaScript for page load timing. If you are using an APM agent's API to manually add the JavaScript snippet to your webpages, insert the instrumentation snippet as close to the top as possible. This allows you to take advantage of detailed information about browser's AJAX calls and JavaScript errors. For more information, see the instructions for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby Use REST API This information applies to apps that are also monitored by APM. The REST API lets you manage deployment outside the browser monitoring UI. This is useful for large organizations deploying multiple apps. Browser agent types: Lite, Pro, Pro+SPA We have three types of browser agents: Lite, Pro, and Pro+SPA. The agent type has no impact on your billing. Browser agent type Comparison Pro+SPA This is the default installed agent when you enable browser monitoring. What it includes: Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications. Pro+SPA is not limited only to single page applications. After install, you can downgrade anytime to the less advanced agents if you don't want or need SPA monitoring. Pro What it includes: Gives you access to the Browser Pro features. What it doesn't include: Lacks the functionality designed for single page app monitoring. Lite What it includes: Gives you information about some basic page load timing and browser user information. What it doesn't include: Lacks the Browser Pro features and SPA features. Details about how agent types relate to pricing: New Relic One pricing: This pricing model has data ingest as a billing factor. If you want to reduce data ingest, you may want to consider downgrading to lesser agent types after install. Original pricing: Your access to browser monitoring features is gated by your subscription plan, not by the agent type. This means there is no reason not to use the default Pro+SPA agent. After initial agent installation is finished, you can go to the App settings page to edit your configuration or to change your subscription.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.228874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>browser</em> monitoring <em>agent</em>",
        "sections": "<em>Browser</em> <em>agent</em> types: Lite, <em>Pro</em>, <em>Pro</em>+SPA",
        "tags": "<em>Browser</em>",
        "body": ". It&#x27;s free, forever. Get an account Enable <em>browser</em> monitoring <em>Browser</em> <em>Pro</em>+SPA is the default <em>agent</em> when you enable <em>browser</em> monitoring. This automatically gives you access to all of our <em>browser</em> monitoring <em>features</em>. For more information about the <em>browser</em> monitoring options, see <em>Browser</em> <em>agent</em> types"
      },
      "id": "604429e628ccbcb80b2c60d0"
    },
    {
      "sections": [
        "Browser Geography: Webpage performance by location",
        "Contents",
        "View performance data by region",
        "Important",
        "Use page functions",
        "View drill-down details"
      ],
      "title": "Browser Geography: Webpage performance by location",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Additional standard features"
      ],
      "external_id": "7b26e484a4645be8c580650fd7d71a159114bf50",
      "image": "https://docs.newrelic.com/static/793341e63f8e5b444d7cc98a1f5a7d90/c1b63/geo_overview.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/additional-standard-features/browser-geography-webpage-performance-location/",
      "published_at": "2021-12-25T09:28:29Z",
      "updated_at": "2021-10-31T01:03:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Geography page provides a world view with color-coded Apdex scores and other performance information about your end users' experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load performance and historical performance. Contents View performance data by region Important Firewalls may have an impact on the geographical data collected about your end users. To view or sort the performance information by location: one.newrelic.com > Browser > (select an app) > Geo: This page provides a world view and drill-down details of color-coded performance information for geographic locations. Go to one.newrelic.com > Browser > (select an app) > Geo > Global (for a world view). OR Go to one.newrelic.com > Browser > (select an app) > Geo > (select a location) (for a specific location you identified in the Browser application settings). To drill down to a specific area, select a location from the list, or select any area on the geographical map. To view additional details about the selected location, select the Page load performance or Historical performance links. To return to the main Geography page, select X (Close). one.newrelic.com > B * *rowser > (select an app) > Geo > (select a location): If you selected specific locations from Settings > Application settings * * , the Geography page includes tabs to view their performance data directly. Use page functions Use any of our standard user interface functions and page functions to drill down into detailed information. Here is a summary of additional options with the Geography page: If you want to... Do this... Change how the performance data appears Select your choice from the Sort by menu. Adjust the amount of information that appears Select or clear the Hide < % throughput checkbox ( < 1% for global view, < 2% for selected locations). View a map of a specific location Do any of these as applicable: Select the location's name from the Geo > Global list. Select its physical location on the map. If you have pre-selected the location from Application settings, select its tab. View summary performance information about a specific location Mouse over any colored area. View drill-down details After you select a specific location, the Page load performance page shows: Average page load time in seconds Number of page views and active sessions as pages per minute (ppm) Recent browser traces if applicable one.newrelic.com > Browser > (select an app) > Geo > (select a location): After you select a specific location, you can view specific details about Page load performance and Historical performance. In addition, the Historical performance page shows comparison data for the selected time period, yesterday, and last week for the selected location. This includes: Response time Apdex Throughput in pages per minute (ppm)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.262474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Geography: Webpage performance by location",
        "sections": "<em>Browser</em> Geography: Webpage performance by location",
        "tags": "Additional standard <em>features</em>",
        "body": "<em>Browser</em> monitoring&#x27;s Geography page provides a world view with color-coded Apdex scores and other performance information about your end users&#x27; experience. You can select specific geographic regions, such as countries or states, and then you can drill down to detailed information about page load"
      },
      "id": "604429e7196a67193d960f75"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/javascript-errors-page-detect-analyze-errors": [
    {
      "sections": [
        "Install the browser monitoring agent",
        "Enable browser monitoring",
        "Deployment options",
        "Enable an APM-monitored app",
        "Enable with copy/paste",
        "Instrument webpages using the APM agent",
        "Use REST API",
        "Browser agent types: Lite, Pro, Pro+SPA"
      ],
      "title": "Install the browser monitoring agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "bc45bbc86cd4d8b81367ad0904907ddc735717f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-11-13T06:04:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser uses a JavaScript snippet, also referred to as an \"agent,\" to instrument your app's webpages. The JavaScript collects data for browser monitoring. To install the browser agent, you can choose from a number of deployment options. If you don't have one already, create a New Relic account. It's free, forever. Get an account Enable browser monitoring Browser Pro+SPA is the default agent when you enable browser monitoring. This automatically gives you access to all of our browser monitoring features. For more information about the browser monitoring options, see Browser agent types in this document. To enable browser monitoring: Go to one.newrelic.com, select Browser, and then select Add more data. Follow the instructions in the UI to add browser monitoring to your app. Generate some traffic for your app, then wait a few minutes for data to appear in New Relic. Optional: After installation is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the browser agent type. It may take several minutes after enabling the browser monitoring agent before your webpage data appear in New Relic. If have problems, follow our troubleshooting tips. Deployment options No matter which option you use to deploy browser monitoring, the end result is the same: the browser monitoring JavaScript snippet (also referred to as the \"agent\") is inserted into your app pages. The method you select depends on your preferences and business needs. Enable an APM-monitored app When enabling browser monitoring, you can use an APM agent to automatically inject the browser monitoring JavaScript snippet for you. This is the easiest way to install the agent for an app that's already being monitored by APM. APM-monitored apps are listed on your APM Applications index. Enable with copy/paste When enabling browser monitoring, you can manually insert the JavaScript snippet into your app's webpages. The copy/paste option gives you control over the exact placement of our JavaScript snippet, which is required to monitor the webpage's performance. This is useful for: Standalone apps, static sites, and cached pages delivered by CDN APM apps that are not as closely coupled to the browser app as with a standard server-side app (for example, when your client-side app talks to a REST API back end) Some tips for using the JavaScript snippet: Placement in your webpage: Copy the code snippet, then paste it inline into your pages as close to the top of the <head> element as possible, but after any position-sensitive <meta> tags (for example, X-UA-Compatible or charset information). For more information on the inline head placement, see JavaScript placement requirements. License key and app ID: Near the bottom of the generated JavaScript is your browser license key and application ID. This is useful with the REST API and API Explorer. Instrument webpages using the APM agent This information applies to apps that are also monitored by APM. Our APM agents can instrument webpages with the required JavaScript for page load timing. If you are using an APM agent's API to manually add the JavaScript snippet to your webpages, insert the instrumentation snippet as close to the top as possible. This allows you to take advantage of detailed information about browser's AJAX calls and JavaScript errors. For more information, see the instructions for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby Use REST API This information applies to apps that are also monitored by APM. The REST API lets you manage deployment outside the browser monitoring UI. This is useful for large organizations deploying multiple apps. Browser agent types: Lite, Pro, Pro+SPA We have three types of browser agents: Lite, Pro, and Pro+SPA. The agent type has no impact on your billing. Browser agent type Comparison Pro+SPA This is the default installed agent when you enable browser monitoring. What it includes: Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications. Pro+SPA is not limited only to single page applications. After install, you can downgrade anytime to the less advanced agents if you don't want or need SPA monitoring. Pro What it includes: Gives you access to the Browser Pro features. What it doesn't include: Lacks the functionality designed for single page app monitoring. Lite What it includes: Gives you information about some basic page load timing and browser user information. What it doesn't include: Lacks the Browser Pro features and SPA features. Details about how agent types relate to pricing: New Relic One pricing: This pricing model has data ingest as a billing factor. If you want to reduce data ingest, you may want to consider downgrading to lesser agent types after install. Original pricing: Your access to browser monitoring features is gated by your subscription plan, not by the agent type. This means there is no reason not to use the default Pro+SPA agent. After initial agent installation is finished, you can go to the App settings page to edit your configuration or to change your subscription.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.25368,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>browser</em> <em>monitoring</em> agent",
        "sections": "Install the <em>browser</em> <em>monitoring</em> agent",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": ". It&#x27;s free, forever. Get an account Enable <em>browser</em> <em>monitoring</em> <em>Browser</em> <em>Pro</em>+SPA is the default agent when you enable <em>browser</em> <em>monitoring</em>. This automatically gives you access to all of our <em>browser</em> <em>monitoring</em> <em>features</em>. For more information about the <em>browser</em> <em>monitoring</em> options, see <em>Browser</em> agent types"
      },
      "id": "604429e628ccbcb80b2c60d0"
    },
    {
      "sections": [
        "Compatibility and requirements for browser monitoring",
        "Basic requirements",
        "Important",
        "Browser types",
        "APM agents",
        "Supported frameworks",
        "Content Security Policy (CSP) considerations"
      ],
      "title": "Compatibility and requirements for browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "538a44c0c5def08c38b57c43fff73aa1002e2a5f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/getting-started/compatibility-requirements-browser-monitoring/",
      "published_at": "2021-12-25T06:18:52Z",
      "updated_at": "2021-09-02T06:45:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring includes strict security measures to provide a robust, standalone product with browser monitoring features. Before you install the browser agent, make sure your system meets these requirements. Want to try out our browser monitoring? Create a New Relic account for free! No credit card required. Basic requirements To report data to browser, your application must at a minimum meet two basic requirements: The traffic to the application must be from clients able to load and execute browser JavaScript code and set cookies. Clients accessing the application must be able to send data to New Relic through HTTP requests. HTTPS is required for browser Pro features. Important Browsers that subscribe to a disconnect list or that use content filtering extensions such as AdBlock may not be able to send data to New Relic. For example, if you are using the Enhanced Tracking Prevention disconnect list for Mozilla Firefox 69.0 or higher, you will need to change the default configuration. Most typical browser applications meet these requirements. However, browser applications in restricted environments may have difficulty reporting data to New Relic; for example: Hybrid mobile applications Applications installed on unusual hardware, such as point-of-sale terminals or consumer appliances For more information, review the instrumentation for browser monitoring documentation, and verify end-user network access. Browser types Instrumentation is compatible with every browser type, including Google Chrome, Mozilla Firefox, Microsoft Internet Explorer and Edge, and Apple Safari. The user interface is compatible with New Relic's supported browser versions. Exceptions Comments Paint timings The firstPaint and firstContentfulPaint attributes in BrowserInteraction, PageView, and PageViewTiming events are only compatible with: Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile AJAX AJAX timing features are not available with: Chrome for iPhone and iPad IE 7 and 8 PageAction events PageAction events require a browser that fully supports cross-domain XMLHttpRequests. Internet Explorer versions 9 and lower cannot record PageAction events. Learn more on querying your data. Session traces Session traces are reported only from browsers that support the Resource Timing Specification. SHA-256 New Relic can only monitor browsers that are compatible with SHA-256. APM agents You can deploy the browser agent for apps monitored by APM, or you can deploy the browser agent for your standalone apps. For more information, see the installation procedures. If you are deploying browser for an app using APM, make sure your agent supports browser monitoring: C SDK: Version 1.0.0 or higher Go: Version 2.5.0 or higher Java: Version 3.4.0 or higher .NET: Version 2.20.25.0 or higher Node.js: Version 1.4.0 or higher PHP: Version 4.4.5.35 or higher Python: Version 2.10.1.9 or higher Ruby: Version 3.7.0.177 or higher Supported frameworks The browser agent collects data on all front-end frameworks. However, the monitoring occurs on lower-level \"primitives\" that JavaScript frameworks use, so the level of detail collected by the instrumentation may vary depending on your specific framework. Exceptions Comments Zone.js If you're using AngularJS and you want to use our SPA monitoring features, note that Zone.js versions 0.6.18 to 0.6.24 are not compatible with browser. In all cases, the browser agent must be loaded before Zone.js to avoid errors. Cypress.io Browser is unable to properly instrument the open and send methods of requests when tests are run in Cypress. This will cause the following error to be thrown: Cannot set property 'status' of undefined Copy This will only affect customers running tests with the Browser agent present in their code. Production applications should not be affected. html2pdf.js This library is not compatible with our Pro+SPA agent due to the way this library wraps promises. If you're using this library, we recommend selecting the Pro agent type. Content Security Policy (CSP) considerations In order to obtain accurate browser performance metrics, browser requires the use of a small, inline JavaScript snippet. New Relic carefully reviews the inline JavaScript to prevent Cross-Site Scripting (XSS) and other potential vulnerabilities. Content Security Policy Level 2 adds restrictions to the types of JavaScript allowed, such as inline scripts. It also limits which domains can load scripts during page load. Important If your website does not allow any third-party hosted JavaScript to run, you must request a CSP exception via your organization’s standard procedures in order to install the browser monitoring agent. When requesting a CSP exception, follow your organization's standard procedures to contact your web or security team. The browser JavaScript agent requires the following CSP exceptions in order to run properly. Alternatively, you can add all of these exceptions to the fallback default-src directive (instead of script-src and connect-src). CSP exception Comments unsafe-inline Add to the script-src directive or to the fallback default-src directive. This is required because the agent is installed by including an inline script. https://js-agent.newrelic.com Add to the script-src directive or to the fallback default-src directive. This is where additional script files that the agent requires are hosted. https://bam.nr-data.net https://bam-cell.nr-data.net Important Add https://gov-bam.nr-data.net if you're using FedRAMP-compliant endpoints. Add to the script-src directive or to the fallback default-src directive. This is where the agent sends its collected data. One of the calls to this URL is a JSONP call, which means that the URL must be allowed as a script source. Add to the connect-src directive or to the fallback default-src directive. The connect-src directive affects the URLs that scripts can call (for example, using the XMLHttpRequest interface). If you have CSP restrictions specifically around this directive, then add this URL as an exception.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.413956,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for <em>browser</em> <em>monitoring</em>",
        "sections": "Compatibility and requirements for <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em> includes strict security measures to provide a robust, standalone product with <em>browser</em> <em>monitoring</em> <em>features</em>. Before you install the <em>browser</em> agent, make sure your system meets these requirements. Want to try out our <em>browser</em> <em>monitoring</em>? Create a New Relic account for free! No credit"
      },
      "id": "603ed6b664441f4a784e883f"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.3884,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/browser-pro-features/upload-source-maps-api": [
    {
      "image": "https://docs.newrelic.com/static/e6ad2975a5ef8d6c5f5ff030e9aca62c/9bb7a/browser-source-map-ui-ss.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/browser-pro-features/upload-source-maps-un-minify-js-errors/",
      "sections": [
        "Upload source maps to un-minify JS errors",
        "Import source maps via the New Relic UI",
        "Tip",
        "Troubleshooting",
        "Stack traces are still minified",
        "Can't generate source maps",
        "Generate source maps with UglifyJS",
        "Generate source maps with webpack"
      ],
      "published_at": "2021-12-25T07:13:45Z",
      "title": "Upload source maps to un-minify JS errors",
      "updated_at": "2021-07-09T23:32:24Z",
      "type": "docs",
      "external_id": "965a3764d519b00e672d93f45a58ae1eec1e9585",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring supports the uploading of source maps. Source maps support is primarily useful for \"decoding\" minified JavaScript. Minified JavaScript results in mostly useless error stack traces on browser's JS errors page. Uploading source maps converts these errors to understandable stack traces, with useful references to code lines. This feature might also be useful for bundled or transpiled JavaScript code. Browser gives you two options for using source maps: Upload source maps via the browser UI Publish source maps to browser via the API This document will explain the first method: how to upload source maps via the UI, along with general troubleshooting help. For instructions on using the API method, see Push source maps via the API. Import source maps via the New Relic UI You can drag and drop, or upload, a source map file into the browser UI to associate it with a specific JavaScript file. New Relic will then convert minified stack traces into un-minified traces and source code visible on the JS errors page. To drag in or upload a source map to browser, the source map must be on your local machine. To associate a source map with an error stack trace on the JS errors page: Go to one.newrelic.com > Browser > (select an app) > JS Errors, then select a JS error group. (Don't select an Errors without a stack trace group.) From the selected JS error group, select the error instance details tab (next to the Summary tab). Error groupings will have one or more frames listed that reference JavaScript files. Select the + icon on the right side of a frame to expand it. Then drag the matching source map file into the frame. Alternative option: when the frame is expanded, select find file to upload the file manually. Tip An error frame with a gray strip on the left side indicate minified JS; a blue strip indicates it has had a source map applied. Other JS error frame features include: If you want to... Do this... See more of the surrounding code Select Show 10 more lines above/below to view the code before or after the code in the stack trace. See original, minified file information For individual frame info: Next to the frame's source line and column, mouse over the ellipsis. For raw data of the entire stack trace: At the top of the error tab, select < /> Raw. Remove a source map From an expanded stack trace frame, select Remove file. Troubleshooting Stack traces are still minified If you have uploaded source maps to New Relic and still see minified stack traces, there are a few things to check. Using the API is the best way to investigate potential issues, by listing or deleting published source maps. Typical problems Troubleshooting tips URL mismatch Each frame in the stack trace is associated with a specific JavaScript URL. That URL must match the JavaScript URL that was used when publishing the source map. Ensure that these URLs match exactly. Release name/ID mismatch If the JavaScript URL is not versioned when you deploy your front end assets, a release name and release ID must be specified using the newrelic.addRelease API method, and also when publishing your source maps. Ensure that these strings match exactly. 409 error: Combination of javascriptUrl, releaseName, and releaseId must be unique If a source map file for a particular JavaScript URL is uploaded without a release name or ID specified, New Relic treats the URL as a unique identifier. To resolve this, delete the source map that has NULL release name and ID values and re-upload all versions for that URL including those parameters. This will allow multiple versions of source maps for a particular JS URL. Missing SourcesContent component Your mapping file must contain the SourcesContent component for New Relic to un-minify your stack traces. If you have uploaded your map successfully and are still not seeing un-minified code, check the original source map for this component. If you can't find it, regenerate the source map so the component is included, and upload your map to New Relic. If the SourcesContent component is not added, an error similar to Whoops, that was the wrong file. Please try again. will appear. Can't generate source maps Having trouble even generating source maps? Every build system has its own instructions for generating source maps. For more specific details, please see the documentation for your particular tool. Below are source map generation instructions for two popular build systems: Generate source maps with UglifyJS Generate source maps using UglifyJS: When \"uglifying\" source files, specify a source map file name and include the original source content: Starting on version v3.12.5: uglifyjs [source files] \\ -o bundle.min.js \\ -c -m --source-map \"includeSources=true\" Copy For older versions: uglifyjs [source files] \\ -o bundle.min.js \\ --source-map bundle.min.js.map \\ --source-map-include-sources \\ -c -m Copy Generate source maps with webpack Generate source maps using Webpack: In your production webpack config, simply specify source-map for the config.devtool property. The sourceMapFilename property of config.output is optional and defaults to [name].js.map. devtool: 'source-map', output: { path: path.join(__dirname, 'dist'), filename: '[name].js', sourceMapFilename: '[name].js.map', }, Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.95373,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Upload</em> <em>source</em> <em>maps</em> to un-minify JS errors",
        "sections": "<em>Upload</em> <em>source</em> <em>maps</em> to un-minify JS errors",
        "body": ": how to <em>upload</em> <em>source</em> <em>maps</em> <em>via</em> the UI, along with general troubleshooting help. For instructions on using the <em>API</em> method, see Push <em>source</em> <em>maps</em> <em>via</em> the <em>API</em>. Import <em>source</em> <em>maps</em> <em>via</em> the New Relic UI You can drag and drop, or <em>upload</em>, a <em>source</em> <em>map</em> file into the browser UI to associate it with a specific"
      },
      "id": "604429a828ccbcfaad2c60be"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-12-25T16:04:50Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.5255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Enable <em>map</em> <em>uploads</em> for multiple variants",
        "body": " types (default: Release) <em>uploadMaps</em>ForVariant(&quot;Release&quot;) &#x2F;&#x2F; instrument all variants excludeVariantInstrumentation(&quot;&quot;) } Copy Enable <em>map</em> uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { &#x2F;&#x2F; default build types <em>uploadMaps</em>ForVariant(&quot;Release&quot;, &quot;Debug"
      },
      "id": "603e7ad7196a67dde6a83df3"
    },
    {
      "sections": [
        "Android agent crash reporting",
        "Upload the ProGuard or DexGuard file",
        "Use mapping.txt file",
        "Exception",
        "Map Processing",
        "Important",
        "Maps are reported for select variant builds",
        "Variants are assigned unique build IDs",
        "Compress maps prior to upload",
        "Deferred crash reporting",
        "Disable crash reporting",
        "Debug the crash reporter",
        "Manually upload a ProGuard or DexGuard map file"
      ],
      "title": "Android agent crash reporting",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "f954a196ede1c24634e45c82e0f7cf9fce4dc1c9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/android-agent-crash-reporting/",
      "published_at": "2021-12-25T16:04:51Z",
      "updated_at": "2021-07-09T15:00:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "By default, mobile monitoring enables crash reporting for your mobile applications to help track and diagnose crashes. When an Android application crashes, the agent uploads a crash report to the New Relic collector. The crash details will then be processed and de-obfuscated automatically if you are using ProGuard or DexGuard. You can view detailed information about crashes in the Crash analysis UI, or receive crash notifications by email. You can also explore the crash data deeper with New Relic Insights, or integrate with ticketing systems for further investigation. Upload the ProGuard or DexGuard file The Android agent supports ProGuard and DexGuard. DexGuard is an extension to ProGuard, and it behaves the same as ProGuard when dealing with crash symbolication and obfuscated code maps. ProGuard obfuscates your code by renaming classes, fields, and methods with semantically obscure labels. DexGuard adds another additional layer of obfuscation and security, but otherwise behaves identically to ProGuard. If ProGuard or DexGuard is enabled, the stack trace produced by a crash consists only of these obfuscated labels, which are not human-readable. Follow the SDK installation or upgrade instructions to configure ProGuard or DexGuard and enable crash reporting. Be sure to create the newrelic.properties file containing your application token. Use mapping.txt file The agent uses the mapping.txt file produced during a ProGuard/DexGuard-enabled build. This file consists of the obfuscated label names, and provides reverse mapping between obfuscated and plain text labels. You must use the copy of mapping.txt generated during the build that produced your final application. The application's build ID changes each time an APK is generated, and the build ID in the mapping file must match the ID contained in each uploaded crash report. After you create a newrelic.properties file containing your New Relic app token in your project, the ProGuard or DexGuard mapping.txt file will be uploaded automatically after each build. Exception If either of the following situations occur, you must manually upload the mapping.txt replacement file: If the mapping.txt file is renamed using the DexGuard -printmapping option, the Android agent will be unable to locate or upload the stripped names. If you see obfuscated crash reports in the Crashes page, you may not have a mapping.txt file uploaded. Map Processing Important Agent version 5.27.0 introduces changes to the way the agent plugin process maps during builds. Maps are reported for select variant builds The agent will tag and report only those mapping.txt files generated by Release build-type variants. This behavior can be configured or disabled through the New Relic Gradle Plugin extension. Variants are assigned unique build IDs During an execution of a Gradle build, a single unique ID (build ID) was generated to represent all variants of the app built during that invocation. This often led to mismatched crash reports for customers using variants to customize a common app code base. Each variant is now identified by its own unique ID, which is used when reporting the variant's ProGuard map to New Relic. You can disable this behavior through the New Relic Gradle Plugin extension. Compress maps prior to upload As apps get larger, so do their associated maps, which then results in longer upload times when reporting the map. If map reporting time is unreasonably long, the agent can compress the map prior to transfer. To enable compressed map uploads, add the following to your app's newrelic.properties file: com.newrelic.compressed_uploads=true Copy Deferred crash reporting Important Agent version 6.0.0 introduces changes to the way the agent plugin processes crashes at runtime. In an attempt to address crash report duplication, deferred crash reporting is now the default crash reporting behavior. In this case, crash reports are recorded when they occur, but they're not uploaded until the next application launch. The previous crash reporting behavior is still available: uploading the crash as soon as it occurs before the application process terminates. You can use the NewRelic.withCrashReportingEnabled(boolean) API method. For example: NewRelic .withApplicationToken(\"<appToken>\") .withCrashReportingEnabled(true) .start(this.getApplication()); Copy Disable crash reporting If you want to use another crash reporting tool, you can disable crash reporting by calling NewRelic.disableFeature(FeatureFlag.CrashReporting) prior to agent initialization. For example: NewRelic.disableFeature(FeatureFlag.CrashReporting); NewRelic .withApplicationToken(\"<appToken>\") .start(this.getApplication()); Copy Debug the crash reporter Crash reporting for Android is designed to work with other crash reporting frameworks by chaining the uncaught exception handler if it is already registered. If no other framework has been found (or if New Relic is the first framework registered), the debug logs will include: Installing New Relic crash handler. Copy If another handler is already registered, debug logs will include: Installing New Relic crash handler and chaining previous exception handler. Copy Every time New Relic catches an exception, it is logged to DEBUG level. For example: A crash has been detected in <className>. Copy If New Relic catches an exception but crash reporting has been disabled for any reason, this message is logged: A crash has been detected but crash reporting is disabled. Copy If you don't see crash reports, check the debug logs for messages like this. Manually upload a ProGuard or DexGuard map file In some unusual circumstances, it may not be possible to automatically upload the ProGuard or DexGuard mapping file. This is often due to incorrectly creating a newrelic.properties file containing your application token. This will result in build errors or warnings with detailed log messages. To manually upload a ProGuard or DexGuard map file: Find the mapping.txt file(s) in the project's build directory For example, the file is located in the <PROJECT_ROOT>/app/build/outputs/mapping/<BUILD_VARIANT> directory for projects that use Android Studio. Generally, a release variant is used when building the final version of the application. The following command is useful for finding map files: find <project_root> -name mapping.txt Copy Using a command terminal, upload the ProGuard or DexGuard mapping file: For a US account: curl -v -F upload=@\"<mapping.txt>\" -H \"X-APP-LICENSE-KEY:<APPLICATION_TOKEN>\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -v -F upload=@\"<mapping.txt>\" -H \"X-APP-LICENSE-KEY:<APPLICATION_TOKEN>\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Replace the following in your command: <mapping.txt> is the full path to the ProGuard or DexGuard mapping.txt file. <APPLICATION_TOKEN> is your mobile monitoring application token.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.996605,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Compress <em>maps</em> prior to <em>upload</em>",
        "body": " for customers using variants to customize a common app code base. Each variant is now identified by its own unique ID, which is used when reporting the variant&#x27;s ProGuard <em>map</em> to New Relic. You can disable this behavior through the New Relic Gradle Plugin extension. Compress <em>maps</em> prior to <em>upload</em> As apps"
      },
      "id": "603ed67564441ffa8f4e8883"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/browser-app-settings-page": [
    {
      "sections": [
        "Server-side agent configuration",
        "Requirements",
        "Centralization and security",
        "Server-side configuration precedence",
        "Configure from the UI",
        "Configure from NerdGraph API",
        "View or change server-side configuration settings",
        "Disable server-side configuration"
      ],
      "title": "Server-side agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "34c443ebbf3a304d6aeb3e3f012b4ddd11b06765",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/agents/manage-apm-agents/configuration/server-side-agent-configuration/",
      "published_at": "2021-12-25T19:39:51Z",
      "updated_at": "2021-12-25T19:39:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Server-side configuration transitions some core settings from your language agent's configuration file to the New Relic collector. Depending on the language agent, available settings may include: Transaction tracing SQL recording and logging SQL query plans Error collection Thread profiling Distributed tracing Cross application tracing Requirements Server-side configuration is not available for our C SDK agent or our PHP agent. Centralization and security Server-side configuration provides an easy way to manage the available settings from the New Relic server side. Centralized configuration settings can also help you ensure standards compliance and security management for your settings. Any change to a monitored application automatically applies to all APM agents monitoring that application, even if they run across multiple hosts. The agent still follows the local configurations for any settings that can't be set . Server-side configuration precedence This feature provides the convenience of managing the available configuration settings directly from the New Relic side, without the need for deployments or restarts. Available options to change settings, and the order of precedence they take when you use environment variables or other configuration options, will depend on the language agent used. For more information about the hierarchy of settings, see the illustration for the specific agent: C SDK configuration: A hierarchy is not applicable, because configuration values come from API calls. Also, server-side configuration is not supported. However, you can change the app name from the UI or from the C SDK configuration settings. Go hierarchy Java hierarchy .NET hierarchy Node.js hierarchy PHP hierarchy (server-side configuration not supported) Python hierarchy Ruby hierarchy Configure from the UI The C SDK and PHP agent do not support server-side configuration. To enable server-side configuration settings for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. After you enable server-side configuration, you can view and change the available settings through the UI. Configure from NerdGraph API For how to enable this with NerdGraph, see the NerdGraph tutorial. View or change server-side configuration settings If you use server-side configuration, you must still include your license_key and app_name in the local config file. These settings are required for the agent to communicate with the New Relic collector. The C SDK and PHP agent do not support server-side configuration. To view or change the available server-side configuration settings through the UI for apps that use other New Relic agents: Go to one.newrelic.com and click APM. Click on your app. Then click Settings > Application > Server-side agent configuration. Once you set any of these options from the UI, they will override any conflicting options in the agent's configuration file. Disable server-side configuration Once you enable server-side configuration for an account, server-side configuration cannot be turned off without assistance from New Relic Support. This helps mitigate issues that could arise from conflicts with configuration settings if you need to transition back to a local configuration setup.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 226.45882,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Server-side <em>agent</em> <em>configuration</em>",
        "sections": "Server-side <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " hierarchy <em>Configure</em> from the UI The C SDK and PHP <em>agent</em> do not support server-side configuration. To enable server-side configuration <em>settings</em> for monitored apps from the UI: Go to one.newrelic.com and click APM. Click on your <em>app</em>. Then click <em>Settings</em> &gt; Application &gt; Server-side <em>agent</em> configuration"
      },
      "id": "617e649c196a67df22f7bb1c"
    },
    {
      "sections": [
        "Node.js agent configuration",
        "Get started",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Environment variables",
        "Server-side configuration",
        "Exports variables",
        "app_name (REQUIRED)",
        "Tip",
        "license_key (REQUIRED)",
        "agent_enabled",
        "allow_all_headers",
        "Caution",
        "apdex_t (DEPRECATED)",
        "certificates",
        "high_security",
        "host",
        "Important",
        "labels",
        "port",
        "proxy",
        "proxy_host",
        "proxy_pass",
        "proxy_port",
        "proxy_user",
        "Logging variables",
        "enabled",
        "level",
        "filepath",
        "Audit logging",
        "endpoints",
        "API configuration",
        "custom_attributes_enabled",
        "custom_events_enabled",
        "notice_error_enabled",
        "Attributes",
        "exclude",
        "include",
        "include_enabled",
        "Error collector variables",
        "ignore_status_codes",
        "ignore_classes",
        "ignore_messages",
        "expected_status_codes",
        "expected_classes",
        "expected_messages",
        "attributes.enabled",
        "attributes.exclude",
        "attributes.include",
        "max_event_samples_stored",
        "Transaction tracer variables",
        "explain_threshold",
        "record_sql",
        "top_n",
        "transaction_threshold",
        "hide_internals",
        "Rules variables",
        "name",
        "ignore",
        "enforce_backstop",
        "Transaction events variables",
        "max_samples_stored",
        "max_samples_stored (DEPRECATED)",
        "max_samples_per_minute (DEPRECATED)",
        "Browser monitoring variables",
        "enable",
        "debug",
        "Custom events variables",
        "Slow queries variables",
        "max_samples",
        "Custom hostname variables",
        "display_name",
        "ipv_preference",
        "Environment variable overrides",
        "NEW_RELIC_HOME",
        "NEW_RELIC_NO_CONFIG_FILE",
        "Datastore tracer variables",
        "instance_reporting.enabled",
        "database_name_reporting.enabled",
        "Cross application tracing (DEPRECATED)",
        "Error message redaction variables",
        "Distributed tracing",
        "exclude_newrelic_header",
        "Span events",
        "Infinite Tracing",
        "trace_observer.host"
      ],
      "title": "Node.js agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Nodejs agent",
        "Installation and configuration"
      ],
      "external_id": "4f576eccf990e090f3c829dba158ac21583f8b5a",
      "image": "https://docs.newrelic.com/static/bab8ec5bda2eda3aaa5ddaefbed52d93/9fc4b/nodejs-configuration-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/nodejs-agent/installation-configuration/nodejs-agent-configuration/",
      "published_at": "2021-12-25T21:44:25Z",
      "updated_at": "2021-12-20T13:54:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can tailor the Node.js agent to your app's requirements by editing your newrelic.js config file or by setting an environment variable. The config file resides in the root directory of your app. You can also configure a few options from New Relic, or use the Node.js agent API. Get started You'll be able to configure our Node.js agent to suit your environnment after you create a New Relic account (it's free, forever) and install the Node.js agent. The license_key setting is required. Also, we highly recommend setting the app_name so that your app has a meaningful name instead of the default My Application. Configuration methods and precedence The primary method to configure the Node.js agent is the agent configuration file (newrelic.js). You can also configure most settings with environment variables. You can also adjust some settings with server-side configuration. The Node.js agent uses this order of precedence for configuration methods: Node.js configuration hierarchy: Server-side configuration settings override environment variables. Environment variables override the agent config file. The config file overrides the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file The config file (newrelic.js) contains every Node.js agent setting. When you install the Node.js agent, you must copy newrelic.js into your app's root directory. Most settings are empty by default; they inherit their values from config/default.js. Environment variables Most configuration settings in newrelic.js have equivalent environment variables. These are useful, for example, if your agent runs in a PaaS environment such as Heroku or Microsoft Azure. Node.js agent environment variables always start with NEW_RELIC_. Where available, these environment variables are documented below under individual config options as the Environ variable. There are also two rarely used settings that can only be configured via environment variables. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Server-side configuration Owners and Admins can view and configure a few settings directly in New Relic. Where available, the UI labels for server-side config are listed in this document under individual config options as the Server-side label. Exports variables This section defines the Node.js agent variables in the order they typically appear in the exports.config = { section of your app's newrelic.js configuration file. app_name (REQUIRED) Type String Default \"My Application\" Environ variable NEW_RELIC_APP_NAME The name New Relic uses to identify your app. For example, app_name: ['MyNodeApp']. To use multiple names for your app, specify a comma-delimited list of names. Data for all applications with the same name will be merged in the New Relic UI, so set this carefully. We highly recommend that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Tip For Azure users, the Node.js agent will use APP_POOL_ID if it is set, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY This setting is required. Your New Relic license key. For example, license_key: '40HexadecimalCharacters'. agent_enabled Type Boolean Default true Environ variable NEW_RELIC_ENABLED Set to false to stop the agent from starting up. This is useful when debugging your code requires temporarily disabling the agent. It prevents the agent from bootstrapping its instrumentation or setting up all its pieces, which prevents the agent from starting up and connecting to New Relic's servers. allow_all_headers If true, enables capture of all HTTP headers, except for those filtered by exclude rules. If false, collected headers are limited to those defined in Node.js agent attributes. Type Boolean Default false Caution Any header-related include/exclude rules must be in camelCase form to be filtered. apdex_t (DEPRECATED) Type Number Default 0.100 Server-side label Apdex T Set your Apdex T via the New Relic UI. certificates Type Array of strings Default (none) Additional certificates to trust for SSL connections, specified as an array of strings in PEM format. This affects both connections to an HTTPS proxy and connections to New Relic. Tip You can also configure the agent to read its certificates from a file: certificates: [ fs.readFileSync('myca.crt', {encoding: 'utf8'}) ] Copy high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY When set to true, enables high security v2. You must also enable the ssl setting and enable high security in the UI. host Type String Default collector.newrelic.com Environ variable NEW_RELIC_HOST Important Do not edit this value unless New Relic Support asks you to change it. Hostname for the New Relic collector to connect to the Internet; for example, host: 'collector.newrelic.com'. labels Adds tags. Specify your tags as objects or a semicolon-delimited string of colon-separated pairs (for example, Server:One;Data Center:Primary). Type Object or string Default (none) Environ variable NEW_RELIC_LABELS port Type Integer Default 443 Environ variable NEW_RELIC_PORT Important Do not edit this value unless New Relic Support asks you to change it. Port number to connect to the New Relic collector; for example, port: 443. proxy Type String Default (none) Environ variable NEW_RELIC_PROXY_URL A URL specifying the proxy server to connect to the Internet. For example, proxy: 'http://user:pass@10.0.0.1:8000/'. Important The proxy config file setting overrides the other config file proxy settings (proxy_host, proxy_port, proxy_user, proxy_pass) if used. Similarly, the NEW_RELIC_PROXY_URL environment variable overrides the other environment variable proxy settings (NEW_RELIC_PROXY_HOST, NEW_RELIC_PROXY_PORT, NEW_RELIC_PROXY_USER, and NEW_RELIC_PROXY_PASS) if used. proxy_host Type String Default (none) Environ variable NEW_RELIC_PROXY_HOST Hostname or IP address of the proxy server to connect to the Internet. proxy_pass Type String Default (none) Environ variable NEW_RELIC_PROXY_PASS Password for authenticating to the proxy server. The agent supports only basic HTTP authentication. proxy_port Type String Default (none) Environ variable NEW_RELIC_PROXY_PORT Port number of the proxy server to connect to the Internet. proxy_user Type String Default (none) Environ variable NEW_RELIC_PROXY_USER User name for authenticating to the proxy server. The agent supports only basic HTTP authentication. Logging variables This section defines the Node.js agent variables in the order they typically appear in the logging: { section of your app's newrelic.js configuration file. enabled Type String Default true (false in serverless_mode) Environ variable NEW_RELIC_LOG_ENABLED Enables or disables agent specific logging. level Type String Default info Environ variable NEW_RELIC_LOG_LEVEL Defines the level of detail recorded in the agent logs. From least detail to most detail, possible values are fatal, error, warn, info, debug, or trace. Caution Do not use debug or trace logging unless New Relic Support asks you to use them. These levels of logging can generate excessive overhead. For most situations, use info. filepath Type String Default process.cwd() plus newrelic_agent.log Environ variable NEW_RELIC_LOG Complete path to the New Relic agent log, including the filename. Defaults to filepath: require('path').join(process.cwd(), 'newrelic_agent.log'). The agent will shut down the process if it cannot create this file. The agent creates a log file with the same permissions as the parent Node.js agent process. To write all logging to stdout, set this to stdout. To write all logging to stderr, set this to stderr. Audit logging This section defines the Node.js agent variables in the order they typically appear in the audit_log: { section of your app's newrelic.js configuration file. enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED When enabled, the agent logs the payloads it sends to the collector. This data is included in the main log file even when logging level is set to the lowest level. endpoints Type Array Default Empty array (include all types) Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS The agent sends several different types of data to the collector in separate payloads. By default, all of them are included in the log file. This option makes it possible to limit logging only to specific types of data. Valid values include: agent_settings analytic_event_data connect custom_event_data error_data error_event_data metric_data preconnect shutdown span_event_data sql_trace_data transaction_sample_data API configuration This section allows you to choose which API methods are enabled. Each configuration option allows you to modularly enable API methods that are responsible for sending custom information to New Relic. Important All of these are set to false when the agent is in high security mode. custom_attributes_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_ATTRIBUTES This option enables newrelic.addCustomAttribute and newrelic.addCustomAttributes. custom_events_enabled Type Boolean Default true Environ variable NEW_RELIC_API_CUSTOM_EVENTS This option enables recordCustomEvent. notice_error_enabled Type Boolean Default true Environ variable NEW_RELIC_API_NOTICE_ERROR This option enables newrelic.noticeError. Attributes This section defines the variables for Node.js agent attributes in the order they typically appear in the attributes: { section of your app's newrelic.js configuration file. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include from all destinations. Allows * as wildcard at end. include_enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE_ENABLED When true, patterns may be added to the attributes.include list. Error collector variables You can manage how error are handled in New Relic. This section defines the Node.js agent variables in the order they typically appear in the error_collector: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED Server-side label Enable error collection? When enabled, the agent collects error traces from your app. ignore_status_codes Type Array of Integers Default [404] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERROR_CODES Server-side label Ignore these status codes Comma-delimited list of HTTP status codes for the error collector to ignore. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_classes Type Array|Object Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Comma-delimited list of javascript error types/classes for the error collector to ignore. The following configuration /* ... */ error_collector: { ignore_classes: [\"ReferenceError\"] } /* ... */ Copy Would ignore all reference errors. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. ignore_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ ignore_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would ignore all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_status_codes Type Array of integers Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERROR_CODES Comma-delimited list of HTTP status codes for the error collector to mark as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_classes Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_EXPECTED_ERRORS The following configuration /* ... */ error_collector: { expected_classes: [\"ReferenceError\"] } /* ... */ Copy Would mark all reference errors as expected. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. expected_messages Type Object Default {} A javascript object describing a list of javascript classes tied to javascript error messages for the collector to ignore. The following configuration. /* ... */ error_collector: { /* ... */ expected_messages: {\"Error\":[\"Undefined\", \"Out of time\"]} /* ... */ } /* ... */ Copy Would mark all errors of type Error, with the exact (case-sensitive) message strings of Undefined and Out of time. Caution Errors recorded using newrelic.noticeError do not obey this configuration value. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Transaction tracer variables The agent groups your requests into transactions, which are used to: Visualize where your app spends its time (in transaction breakdowns). Identify slow requests. Group metrics. Isolate other issues, such as slow database performance. This section defines the Node.js agent variables in the order they typically appear in the transaction_tracer: { section of your app's newrelic.js configuration file. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. enabled Type Boolean Default true Environ variable NEW_RELIC_TRACER_ENABLED Server-side label Enable transaction tracing? When enabled, the agent collects slow transaction traces. explain_threshold Type Integer Default 500 Environ variable NEW_RELIC_EXPLAIN_THRESHOLD Minimum query duration (in milliseconds) for a transaction to be eligible for slow queries in transaction traces. record_sql Type String (off, obfuscated, or raw) Default off Environ variable NEW_RELIC_RECORD_SQL This option affects both slow queries and record_sql for transaction traces. It can have one of three values: off, obfuscated, or raw. When set to off no slow queries will be captured, and backtraces and SQL will not be included in transaction traces. If set to raw or obfuscated, the agent sends raw or obfuscated SQL and a slow query sample to the collector. The agent may also send SQL when other criteria are met, such as when slow_sql.enabled is set. top_n Type Integer Default 20 Environ variable NEW_RELIC_TRACER_TOP_N Defines the maximum number of requests eligible for transaction traces. Transactions are named based on the request, and top_n refers to the \"top n slowest transactions\" grouped by these names. The module replaces a recorded trace with a new trace only if the new trace is slower than the previous slowest trace of that name. The default value for this setting is top_n: 20, because the Transactions page also defaults to the 20 slowest transactions. The Node.js agent captures at least five different slow transactions in the first harvest cycle after start up. It will also reset and capture different transactions if no slow transactions have been captured for the last five harvest cycles. This allows you to see more information about more of your app's request paths, at the possible cost of not focusing on the absolutely slowest request for that harvest cycle. Tip To record the absolute slowest transaction over the last minute, you can set top_n: 0 or top_n: 1. However, this causes one very slow route to dominate your transaction traces. transaction_threshold Type Integer or apdex_f Default apdex_f Environ variable NEW_RELIC_TRACER_THRESHOLD Server-side label Threshold Threshold of web transaction response time in seconds beyond which a transaction is eligible for transaction tracing. The default value is apdex_f; this sets the trace threshold to four times your application's Apdex T. You can also enter a specific time value in milliseconds. Example: Threshold set to apdex_f The default apdex_t is 100 milliseconds. If your transaction threshold is set to apdex_f, a \"slow\" transaction is 400 milliseconds. hide_internals Type boolean Default true Environ variable NEW_RELIC_HIDE_INTERNALS The agent uses a small amount of CPU in order to hide internal properties that are attached to the web application. If you change this configuration to false, it may slightly decrease your agent overhead, but it could also have an impact on the performance of the agent. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. Rules variables This section defines the Node.js agent variables in the order they typically appear in the rules: { section of your app's newrelic.js configuration file. name Type Strings or regular expressions Default (none) Environ variable NEW_RELIC_NAMING_RULES A comma-delimited list of rules to match incoming request URLs and name the associated New Relic transaction. Uses the format: name: [ {pattern: 'STRING_OR_REGEX', name: 'NAME'}, {pattern: 'STRING_OR_REGEX', name: 'NAME'} ], Copy Both parameters are required. For strings, you must escape control characters. You do not need to escape control characters in regular expressions. Additional attributes are ignored. Regular expressions support JavaScript-style capture groups, and names use $1-style replacement strings. Regular expressions only find the first matching result; subsequent matches are ignored. For more information, see Node.js transaction naming API. For the NEW_RELIC_NAMING_RULES environment variable, pass the rules as comma-delimited JSON object literals: NEW_RELIC_NAMING_RULES='{\"pattern\":\"^t\",\"name\":\"u\"},{\"pattern\":\"^u\",\"name\":\"t\"}' Copy ignore Type Strings or regular expressions Default Regular expression to match socket.io long-polling requests (\"^ \\ /socket \\ .io \\ /. * \\ /xhr-polling/\"). Environ variable NEW_RELIC_IGNORING_RULES Define a list of request URLs you want the agent to ignore. Specify the list as patterns, which can be strings or regular expressions. enforce_backstop Type Boolean Default true Environ variable NEW_RELIC_ENFORCE_BACKSTOP Caution Do not change this setting unless you understand metric grouping issues. When enabled, the agent renames transactions that are not affected by other naming logic (such as the API, rules, or metric normalization rules) to NormalizedUri/*. If you set this to false, the agent sets transaction names to Uri/path/to/resource. Transaction events variables This section defines the Node.js agent variables in the order they typically appear in the transaction_events: { section of your app's newrelic.js configuration file. enabled Type Boolean Default true When enabled, the agent sends transaction events to New Relic. This event data includes transaction timing, transaction name, and any custom parameters. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 10000 Environ variable NEW_RELIC_TRANSACTION_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10,000. The server will cap data at 10,000 per-minute. Important This configuration had different behavior in agent versions lower than 6.0.0. See max_samples_stored (DEPRECATED) for agent versions 5.x or lower. max_samples_stored (DEPRECATED) Type Integer Default 20000 Defines the maximum number of events the agent stores if it is unable to communicate with the New Relic collector. The values from the previous harvest cycle will be merged into the next one, with this option limiting the maximum number. Make sure this number is greater than max_samples_per_minute; for example, set it to twice as much. Consider your memory overhead before increasing this value. Caution This configuration has different behavior starting with agent version 6.0.0 and a new recommended maximum. See max_samples_stored for agent versions 6.x or higher. max_samples_per_minute (DEPRECATED) Type Integer Default 10000 Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. Caution This configuration has been replaced with max_samples_stored starting with version 6.0.0 of the agent. See max_samples_stored for 6.x or later agents. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. Browser monitoring variables This section defines the Node.js agent variables in the order they typically appear in the browser_monitoring: { section of your app's newrelic.js configuration file. enable Type Boolean Default true Environ variable NEW_RELIC_BROWSER_MONITOR_ENABLE Server-side label Enable browser monitoring? Generate JavaScript headers for browser instrumentation. Although this defaults to true, the agent doesn't inject the browser JS code unless you have enabled browser monitoring. Even if you have enabled it and added the browser timing header, you can disable browser monitoring for your app by setting this to false. debug Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITOR_DEBUG If true, request un-minified sources from the server. attributes.enabled Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent sends custom attributes to browser monitoring. Caution Any header-related include/exclude rules must be in camelCase form to be filtered. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. Custom events variables This section defines the Node.js agent variables in the order they typically appear in the custom_insights_events: { section of your app's newrelic.js configuration file. Currently there are no environment variables for custom events. enabled Type Boolean Default true When enabled, the agent sends custom events recorded with recordCustomEvent() to New Relic. If this is disabled, the agent does not collect this data or send it to New Relic. max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of custom events the agent collects per minute. If the number of custom events exceeds this limit, the agent collects a statistical sampling. Important Increasing this limit increases memory usage. Slow queries variables This section defines the Node.js agent variables in the order they typically appear in the slow_sql: { section of your app's newrelic.js configuration file. These options control behavior for slow queries, but do not affect SQL nodes in transaction traces. enabled Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_ENABLED When enabled, the agent collects slow query details. max_samples Type Integer Default 10 Environ variable NEW_RELIC_MAX_SQL_SAMPLES Defines the maximum number of slow queries the agent collects per minute. The agent discards additional queries after the limit is reached. Important Increasing this limit increases memory usage. Custom hostname variables This section defines the Node.js agent variables in the order they typically appear in the process_host: { section of your app's newrelic.js configuration file. These options control behavior regarding the host display name in the APM UI. display_name Type String of 255 bytes or less Default (none) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom hostname for display in New Relic. If you do not set this field, New Relic will continue to use the default hostname found by calling os.hostname(). If you use the default hostname settings, New Relic finds the hostname through os.hostname(). If this call fails, New Relic uses the host's IP as the name. If you set ipv_preference: 4 or ipv_preference: 6, you can select the type of IP address (IPv4 or IPv6) that appears in the New Relic UI. ipv_preference Type Integer (4 or 6) Default 4 Environ variable NEW_RELIC_IPV_PREFERENCE Environment variable overrides This section defines two configuration options only available with environment variables. These overrides are not used in most configurations. NEW_RELIC_HOME Path to the directory containing newrelic.js. This is available only as an environment variable. You cannot set it in your config file. Type String Default (none) NEW_RELIC_NO_CONFIG_FILE If used, this prevents the agent from reading configuration settings from newrelic.js. Default values and values from environment variables will still be set. This is available only as an environment variable. You cannot set it in your config file. Type Boolean Default False Datastore tracer variables This section defines the Node.js agent variables in the order they typically appear in the datastore_tracer section of your app's newrelic.js configuration file. These options control behavior for collecting datastore instance metrics. instance_reporting.enabled Type Boolean Default true When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are reported on slow query traces and transaction traces. database_name_reporting.enabled Type Boolean Default true When enabled, the agent collects database name on slow query traces and transaction traces for some database drivers. Cross application tracing (DEPRECATED) The Node.js agent variables that control cross application tracing typically appear in the cross_application_tracer section of your app's newrelic.js configuration file: enabled Type Boolean Default false When set to true, allows tracing of transactions across more than one New Relic-monitored applications. Important Cross application tracing (CAT) has been deprecated and will be removed in a future major release. For cross-service visibility, we recommend using distributed tracing, which is enabled by default as of agent version 8.3.0. Before enabling, read the transition guide. Error message redaction variables The Node.js agent variables that control error message redaction appear in the allow_raw_exception_messages section of your app's newrelic.js configuration file: enabled Type Boolean Default true Environ variable NEW_RELIC_ALLOW_RAW_EXCEPTION_MESSAGES_ENABLED When false, the agent will redact the messages of captured errors. Distributed tracing Important Enabling distributed tracing disables cross application tracing, and has effects on other APM features. Before enabling, read the transition guide. Requires Node.js agent version 4.7.0 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When configuring via the config file, place the following option in the distributed_tracing section. enabled Type Boolean Default true Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. For example, to enable this in the config file, you would use: distributed_tracing: { enabled: true } Copy exclude_newrelic_header Type Boolean Default false Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. For example, to enable this in the config file, you would use: distributed_tracing:{ enabled: true, exclude_newrelic_header: true } Copy Span events Span data is reported for distributed tracing. Distributed tracing must be enabled to report spans. Span configuration is set in the span_events stanza. Options include: enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED Turns reporting of span events on or off. attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED This setting can be used to turn reporting of attributes on or off for spans. If attributes.enabled at the root level is false, no attributes will be sent with spans regardless on how this is set. attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE If attributes are enabled for spans, all attribute keys found in this list will be attached to spans. For more information, see the agent attribute rules. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE All attribute keys found in this list will not be sent with spans. For more information, see the agent attribute rules. max_samples_stored Type Integer Default 2000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of events the agent collects per minute. If there are more than this number, the agent collects a statistical sampling. We do not recommend configuring past 10k. The server will cap data at 10k per-minute. Infinite Tracing To turn on Infinite Tracing, enable distributed tracing (set distributed_tracing to enabled: true) and add the additional settings below. For an example, see Language agents: configure distributed tracing. trace_observer.host Type String Default (none) Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.76389,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Node.js <em>agent</em> <em>configuration</em>",
        "sections": "Node.js <em>agent</em> <em>configuration</em>",
        "tags": "<em>Agents</em>",
        "body": " to avoid confusion and unintended aggregation of <em>data</em>. Tip For Azure users, the Node.js <em>agent</em> will use <em>APP</em>_POOL_ID if it is <em>set</em>, so you can use the name you chose for your Azure Web Server without setting it twice. license_key (REQUIRED) Type String Default (none) Environ variable NEW_RELIC_LICENSE_KEY"
      },
      "id": "617e95b528ccbc0ba67ffd8b"
    },
    {
      "sections": [
        "Go agent configuration",
        "Configuration methods and precedence",
        "Server-side configuration (2.7.0 or higher)",
        "Caution",
        "In process newrelic.Config struct",
        "Change configuration settings",
        "General configuration settings",
        "License (REQUIRED)",
        "AppName (REQUIRED)",
        "Enabled",
        "Labels",
        "Creating four tag pairs",
        "Logger",
        "HighSecurity",
        "Important",
        "UseTLS (DEPRECATED)",
        "HostDisplayName",
        "Transport",
        "RuntimeSampler.Enabled",
        "Custom events configuration",
        "CustomInsightsEvents.Enabled",
        "Transaction events configuration",
        "TransactionEvents.Enabled",
        "TransactionEvents.Attributes",
        "TransactionEvents.MaxSamplesStored",
        "Error collector configuration",
        "Tip",
        "ErrorCollector.Enabled",
        "ErrorCollector.CaptureEvents",
        "ErrorCollector.IgnoreStatusCodes",
        "Example of ignoring error code",
        "ErrorCollector.Attributes",
        "Transaction tracer configuration",
        "TransactionTracer.Enabled",
        "TransactionTracer.Threshold.IsApdexFailing",
        "TransactionTracer.Threshold.Duration",
        "TransactionTracer.Segments.Threshold",
        "TransactionTracer.Segments.Attributes",
        "TransactionTracer.Segments.StackTraceThreshold",
        "TransactionTracer.Attributes",
        "Datastore tracer configuration",
        "DatastoreTracer.InstanceReporting.Enabled",
        "DatastoreTracer.NameReporting.Enabled",
        "DatastoreTracer.QueryParameters.Enabled",
        "DatastoreTracer.SlowQuery.Enabled",
        "DatastoreTracer.SlowQuery.Threshold",
        "Cross application tracing configuration",
        "CrossApplicationTracer.Enabled",
        "Distributed tracing configuration",
        "DistributedTracer.Enabled",
        "DistributedTracer.ExcludeNewRelicHeader",
        "Span events configuration",
        "SpanEvents.Enabled",
        "SpanEvents.Attributes",
        "Infinite Tracing configuration",
        "InfiniteTracing.TraceObserver.Host"
      ],
      "title": "Go agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Configuration"
      ],
      "external_id": "c7a89427e84c67b96f58c4357b36047af2dff0b6",
      "image": "https://docs.newrelic.com/static/0ba97f20e12a085ba9ec9d472c59b5b5/9fc4b/go-config-precedence.png",
      "url": "https://docs.newrelic.com/docs/apm/agents/go-agent/configuration/go-agent-configuration/",
      "published_at": "2021-12-25T17:55:57Z",
      "updated_at": "2021-12-15T12:50:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can edit configuration settings for the Go agent to control some aspects of how New Relic monitors your app; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the collection of errors, transaction events, transaction traces, and custom events. Configuration methods and precedence The primary way to configure the Go agent is by modifying the newrelic.Config struct as part of calling newrelic.NewApplication(), which is part of the standard installation process. With Go agent versions 2.7.0 or higher, you can also set a limited number of configuration options using server-side configuration in the UI. The Go agent follows this order of precedence for configuration. If enabled, server-side configuration overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. If server-side configuration is enabled with the Go agent, it overrides all corresponding values in the newrelic.Config struct, even if the server-side values are left blank. Here are detailed descriptions of each configuration method: Server-side configuration (2.7.0 or higher) Server-side configuration is available with Go agent versions 2.7.0 or higher. This allows you to configure certain settings in the UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. You must still call newrelic.NewApplication() in your application process following the steps described in the in-process configuration. Configuration options set server-side will overwrite those set locally. Since not all configuration options are available server side, you may want to still update your newrelic.Config struct. Caution If server-side config is enabled, the agent ignores any value in the newrelic.Config struct that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty value and does not use the newrelic.Config value. In process newrelic.Config struct You configure your Go agent from the local in process newrelic.Config struct. This struct can be accessed when calling newrelic.NewApplication(). Add the following in the main function or in an init block: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Update values on the newrelic.Config struct to configure your application using newrelic.ConfigOptions. These are functions that accept a pointer to the newrelic.Config struct. Add additional newrelic.ConfigOptions to further configure your application. For example, you can use one of the predefined options to do common configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), // add debug level logging to stdout newrelic.ConfigDebugLogger(os.Stdout), ) Copy Or, you can create your own newrelic.ConfigOption to do more complex configurations: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), newrelic.ConfigDebugLogger(os.Stdout), func(config *newrelic.Config) { // add more specific configuration of the agent within a custom ConfigOption config.HighSecurity = true config.CrossApplicationTracer.Enabled = false }, ) Copy Change configuration settings To make Go agent configuration changes, set the values in the newrelic.Config struct from within a custom newrelic.ConfigOption. For example, to turn New Relic monitoring off temporarily for testing purposes, change the Enabled value to false: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy In this and the following examples, config represents your New Relic config struct, although you may have given it a different variable name when you installed the Go agent and initiated the configuration in your app. General configuration settings License (REQUIRED) Type String Default (none) Set in newrelic.Config struct Specifies your New Relic license key, used to associate your app's metrics with a New Relic account. The license and the app name are both set as part of the New Relic installation process. AppName (REQUIRED) Type String Default (none) Set in newrelic.Config struct This is the application name used to aggregate data in the New Relic UI. You set both the license and the app name as part of the New Relic installation process. To report data to multiple apps at the same time, specify a list of names separated with a semicolon. Do not put a space before the semicolon itself. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"YOUR_APP_NAME;APP_GROUP_1;ALL_APPS\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), ) Copy Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends data from your app to the New Relic collector. To turn off New Relic monitoring, set this to false. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Enabled = false }, ) Copy This can be useful for installing New Relic in a development environment or for troubleshooting purposes. When Enabled is set to false: The New Relic Go agent will not communicate with the New Relic collector. The agent will not spawn goroutines. The license key is not required during installation. Labels Type map [ string]string Default (none) Set in newrelic.Config struct Add tags. Creating four tag pairs Here's an example of setting four tags: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.Labels = map[string]string{ \"Env\": \"Dev\", \"Label2\": \"label2\", \"Label3\": \"label3\", \"Label4\": \"label4\", } }, ) Copy Logger Type Interface Default (none) Set in newrelic.Config struct You can use the Logger interface to write Go log files to a specific location or logging system. HighSecurity Type Boolean Default false Set in newrelic.Config struct Important This feature requires Enterprise tier. High security mode enforces certain security settings and prevents them from being overridden, so that the agent sends no sensitive data. High security mode does the following: Turns SSL on Turns off reporting of error message strings Turns off reporting of custom events This setting must match the corresponding account setting in the UI. For example: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.HighSecurity = true }, ) Copy The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and our REST API. UseTLS (DEPRECATED) Type Boolean Default true Set in newrelic.Config struct Important This option was removed in agent version 2.0. Controls whether HTTPS or HTTP is used to send data to New Relic. The agent communicates with New Relic via HTTPS by default (which uses TLS protocol), and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. HostDisplayName Type String Default (none) Set in newrelic.Config struct This sets the hostname displayed in the APM UI. This is an optional configuration. Transport Type http.RoundTripper Default (none) Set in newrelic.Config struct This customizes http.Client communication with New Relic collectors. This can be used to configure a proxy. RuntimeSampler.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent captures runtime statistics. If you're using New Relic APM and CodeStream, see how to associate repositories and how to associate build SHAs or release tags with errors inbox. Custom events configuration You can create custom events and make them available for querying and analysis. CustomInsightsEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent sends custom events to New Relic. This setting is overridden by HighSecurity, which disables custom events. To disable custom events, place the following in your Go app after the New Relic config is initiated: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.CustomInsightsEvents.Enabled = false }, ) Copy Transaction events configuration Transaction events are used in collecting events corresponding to web requests and background tasks. Event data allows the New Relic UI to show additional information such as histograms and percentiles. TransactionEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects transaction events. TransactionEvents.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionEvents.Attributes.Enabled to turn attribute collection on or off for transaction events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from transaction events: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionEvents.Attributes.Exclude = allAgentAttributeNames }, ) Copy TransactionEvents.MaxSamplesStored Type Integer Default 10000 Set in newrelic.Config struct Defines the maximum number of transaction events per minute to be sent to New Relic, up to the default maximum of 10,000 transaction events. Error collector configuration The following settings are used to configure the error collector: Tip For an overview of error configuration in New Relic, see Manage errors in APM. ErrorCollector.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Error Collection on/off When false, the agent collects no errors or error traces. ErrorCollector.CaptureEvents Type Boolean Default true Set in newrelic.Config struct When true, the agent collects error analytic events. ErrorCollector.IgnoreStatusCodes Type Integer Default Error codes 399 and below, and 404, are ignored. Set in newrelic.Config struct, Server-side config Server-side label Error Collection: Ignore from error collection This controls which HTTP response codes are ignored as errors. Response codes that are greater than or equal to 100 and strictly less than 400 are ignored by default and never have to be specified when calling this function. Response codes 0, 5, and 404 are included on the list by default, but must be specified when adding to the ignore list. This function's default form is: config.ErrorCollector.IgnoreStatusCodes = []int{ 0, // gRPC OK 5, // gRPC NOT_FOUND http.StatusNotFound, // 404 } Copy You can also add response codes as HTTPs, as http.StatusNotFound above. Important If used, server-side configuration will override any values set on the newrelic.Config struct. Therefore to ignore 404 when server-side configuration is enabled, you must include 404 in the configuration set in the UI. Example of ignoring error code To add HTTP response code 418 to the default ignore list, which includes 0, 5, and 404: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.IgnoreStatusCodes = []int{0, 5, 404, 418} }, ) Copy ErrorCollector.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct ErrorCollector.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use ErrorCollector.Attributes.Enabled to turn attribute collection on or off for errors. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from errors: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.ErrorCollector.Attributes.Exclude = allAgentAttributeNames }, ) Copy Transaction tracer configuration Here are settings for changing transaction tracer configuration. For more information about transaction traces, see Transaction traces. TransactionTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing on/off When true, the agent collects transaction traces (detailed information about slow transactions). TransactionTracer.Threshold.IsApdexFailing Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold Controls whether the transaction trace threshold is based on Apdex. If true, then the trace threshold is four times the Apdex threshold. If false, the agent uses Threshold.Duration as the transaction trace threshold. TransactionTracer.Threshold.Duration Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Threshold If Threshold.IsApdexFailing is set to false, the agent uses this duration as the transaction trace threshold. TransactionTracer.Segments.Threshold Type time.Millisecond Default 2 Set in newrelic.Config struct This is the threshold at which segments will be added to the trace. TransactionTracer.Segments.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Segments.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Segments.Attributes.Enabled to turn attribute collection on or off for transaction trace segments. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSegmentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSegmentAttributeNames }, ) Copy TransactionTracer.Segments.StackTraceThreshold Type time.Millisecond Default 500 Set in newrelic.Config struct, Server-side config Server-side label Transaction Tracing: Stack trace threshold This is the threshold at which segments will be given a stack trace in the transaction trace. Caution Lowering this setting may drastically increase agent overhead. TransactionTracer.Attributes Type Struct Default Enabled, no exclusions Set in newrelic.Config struct TransactionTracer.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use TransactionTracer.Attributes.Enabled to turn attribute collection on or off for transaction traces. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allAgentAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Attributes.Exclude = allAgentAttributeNames }, ) Copy Datastore tracer configuration Here are datastore settings, including slow query enabling and settings. DatastoreTracer.InstanceReporting.Enabled Type Boolean Default true Set in newrelic.Config struct This enables collection of datastore instance metrics (such as the host and port) for some database drivers. These are reported on transaction traces and as part of slow query data. DatastoreTracer.NameReporting.Enabled Type Boolean Default true Set in newrelic.Config struct Use this to enable collection of the database name on slow query traces and transaction traces. The default value of attribute enabled is true. DatastoreTracer.QueryParameters.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent collects datastore call query parameters. DatastoreTracer.SlowQuery.Enabled Type Boolean Default true Set in newrelic.Config struct Controls whether slow queries are captured. DatastoreTracer.SlowQuery.Threshold Type time.Millisecond Default 10 Set in newrelic.Config struct The agent captures slow query data for queries slower than this. Cross application tracing configuration Here are settings for changing the cross application tracing feature. CrossApplicationTracer.Enabled Type Boolean Default true Set in newrelic.Config struct, Server-side config Server-side label Cross-application tracing on/off When true, the agent will add cross application tracing headers in outbound requests, and scan incoming requests for cross application tracing headers. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the Go agent disables distributed tracing and enables cross application tracing. Distributed tracing configuration Important Enabling distributed tracing requires Go agent version 2.1.0 or higher, and it disables cross application tracing. It also has effects on other features. Before enabling, read the transition guide. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. When distributed tracing is enabled, you can collect span events. DistributedTracer.Enabled Type Boolean Default false Set in newrelic.Config struct When true, the agent will add distributed tracing headers in outbound requests, and scan incoming requests for distributed tracing headers. Enabling distributed tracing disables cross application tracing. DistributedTracer.ExcludeNewRelicHeader Type Boolean Default false Set in newrelic.Config struct Set this to true to exclude the New Relic header that is attached to outbound requests, and instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are used. Span events configuration Span events are reported for distributed tracing. Distributed tracing must be enabled to report span events. These settings control the collection of span events: SpanEvents.Enabled Type Boolean Default true Set in newrelic.Config struct When true, the agent will collect span events. SpanEvents.Attributes Important Available for Go agent version 2.6.0 or higher. Type Struct Default Enabled, no exclusions Set in newrelic.Config struct SpanEvents.Attributes is a struct with three fields: Enabled bool Include []string Exclude []string Copy Use SpanEvents.Attributes.Enabled to enable or disable attribute collection for span events. Use Include and Exclude to include or exclude specific attributes. An example of excluding an attribute slice named allSpanAttributeNames from traces: app, err := newrelic.NewApplication( newrelic.ConfigAppName(\"Your Application Name\"), newrelic.ConfigLicense(\"__YOUR_NEW_RELIC_LICENSE_KEY__\"), func(config *newrelic.Config) { config.TransactionTracer.Segments.Attributes.Exclude = allSpanAttributeNames }, ) Copy Infinite Tracing configuration To enable Infinite Tracing, enable distributed tracing (set config.DistributedTracer.Enabled = true on the newrelic.Config struct) and add the additional settings below. For an example, see Language agents: Configure distributed tracing. InfiniteTracing.TraceObserver.Host Type string Default (none) Set in newrelic.Config struct For help getting a valid Infinite Tracing trace observer host entry, see Find or create a trace observer endpoint.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.53307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Go <em>agent</em> <em>configuration</em>",
        "sections": "Change <em>configuration</em> <em>settings</em>",
        "tags": "<em>Agents</em>",
        "body": "You can edit configuration <em>settings</em> for the Go <em>agent</em> to control some aspects of how New Relic monitors your <em>app</em>; for example: Turn high-security mode on. Add custom tags for filtering and sorting in the UI. Turn off the <em>collection</em> of errors, transaction events, transaction traces, and custom events"
      },
      "id": "617e6db6e7b9d27fbbc05f72"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography": [
    {
      "sections": [
        "Monitor or block specific domains and subdomains",
        "Tip",
        "Configure domain conditions",
        "Turn off domain conditions"
      ],
      "title": "Monitor or block specific domains and subdomains",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "bf81374c9ec84ce08154a76b10f526fb5ee7e7ec",
      "image": "https://docs.newrelic.com/static/1bf47635bd1556e86b9019a47176e3b9/c1b63/browser_domain_conditions.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains/",
      "published_at": "2021-12-25T06:17:08Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser lets you choose which domains or subdomains that a browser app monitors. This is useful for limiting monitoring only to the application activity you consider important. For example, if you use the copy/paste method to deploy your browser app, you can set domain conditions to protect the security of your browser monitoring license key and app ID. Tip Domain conditions only filter data based on the url of the page that is reported. Domain condition filters do not apply to AJAX data reported to New Relic. Configure domain conditions To view or edit your domain condition settings: Go to one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions. If there are no domain conditions in place, select Enable domain conditions. If conditions exist, select Edit conditions. Select the option to build a list of allowed domains or to build a list of blocked/denied domains. Select the domain conditions (maximum 10 conditions). Select the domain conditions with the Starts with condition, then enter the URL with the subdomain (maximum 10 conditions). one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions: Use this feature to limit monitoring only to your important app activity, or to enhance security for your browser license key and app ID. Review and confirm your domain condition settings. A preview text box displays in real time what domains match the conditions you set. You will also see an estimate of the impact the proposed settings will have on your data. Turn off domain conditions To disable domain conditions and return to monitoring all domains: Go to one.newrelic.com > Browser > (select an app) > Settings > Domain conditions. Set the Enable domain conditions option to Off.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Monitor</em> or block specific domains and subdomains",
        "sections": "<em>Monitor</em> or block specific domains and subdomains",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> lets you choose which domains or subdomains that a <em>browser</em> app monitors. This is useful for limiting <em>monitoring</em> only to the application activity you consider important. For example, if you use the copy&#x2F;paste method to deploy your <em>browser</em> app, you can set domain conditions to protect"
      },
      "id": "6043fd41e7b9d240ca5799bb"
    },
    {
      "sections": [
        "Rename browser apps",
        "Rename app monitored by APM",
        "Caution",
        "Rename app via JavaScript snippet",
        "Rename app via New Relic REST API (v2)"
      ],
      "title": "Rename browser apps",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "6ba80996a8c58869876377c40ba67098f0870475",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/rename-browser-apps/",
      "published_at": "2021-12-25T06:18:04Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow the appropriate procedure to rename your browser app depending on the deployment option you used to add it to browser. Rename app monitored by APM If you added an app to browser already being monitored by APM, the app name that appears in browser is the same as the app name in the APM UI. To rename the app, use any of these options: Option Comments Rename and continue collecting data This option is useful when you simply want to give an app a different display name (alias). To change the alias that appears in the New Relic UI, use the app's Settings page: Go to one.newrelic.com > APM > (select an app) > Settings > Application. Stop reporting under the old name To stop reporting data under the old name and begin collecting data with a new name (app identifer), use the APM agent's configuration file. This changes the identifier that New Relic's data collector uses to distinguish one app from another. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. If one or more apps share the same name, then their data will be aggregated in the UI. Caution If you change the app identifier, a new application will appear in our user interface with the new name, and data will stop reporting to the app(s) with the old name. Rename app via JavaScript snippet This information applies if you inserted the browser agent's JavaScript snippet into your: App monitored by APM that was deployed via the copy/paste method Single page app (SPA) Any standalone browser app that is not also monitored by APM You cannot directly edit the JavaScript snippet in the existing app. Instead, to use your app with a different name: Follow standard procedures to create a new app using the copy/paste method. Provide the new name, and generate the JavaScript snippet. Copy the new JavaScript snippet. In your webpage, replace the JavaScript from your original app with the JavaScript generated for the new app name. If your standalone app has multiple names, copy the custom app IDs in your configuration script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to browser apps that are also monitored by APM. You cannot change the app name via the REST API if you used the copy/paste method to insert browser's JavaScript snippet into your app. Follow standard procedures to change the APM app alias via REST API or API Explorer. New Relic automatically changes the display name for the app everywhere in the New Relic UI, including browser.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Rename <em>browser</em> apps",
        "sections": "Rename <em>browser</em> apps",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>configuration</em> script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to <em>browser</em> apps that are also monitored"
      },
      "id": "603ea123e7b9d2943f2a07b3"
    },
    {
      "sections": [
        "Browser license key and app ID",
        "Get browser license key and app ID from the UI",
        "Create and manage keys via API"
      ],
      "title": "Browser license key and app ID",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "33c732387b5cec4796c7e0f788601455883587ed",
      "image": "https://docs.newrelic.com/static/cfe79713e0c022d39ff6bd6d66289263/c1b63/lkey_appId.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/configuration/browser-license-key-app-id/",
      "published_at": "2021-12-25T13:34:24Z",
      "updated_at": "2021-07-09T23:33:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic features require your browser monitoring license key or your New Relic application ID. The New Relic collector reads this key to determine which account incoming data belongs to. If you use the copy/paste method to add an app to browser monitoring, your app's browser Settings page will show the generated JavaScript snippet. The bottom of the generated JavaScript includes your browser licenseKey (also known as a browser_monitoring_key) and applicationID. The browser monitoring licenseKey (browser_monitoring_key) is a unique key that is linked to, but is not the same as, your main account license key. The browser key can't be used to determine your account's license key. The browser applicationID is the unique identification code for each app in browser monitoring. To protect the security of your browser_monitoring_key and applicationID, you can monitor or block your domain. Get browser license key and app ID from the UI This procedure applies only when you use the copy/paste deployment method. If you use the APM app deployment method, your Settings page will not show the JavaScript snippet. one.newrelic.com > Browser > Settings: The end of the JavaScript generated for copy/paste deployments includes your browser monitoring license key and application ID. To obtain only the browser monitoring license key and application ID information: Go to one.newrelic.com > Browser > Settings. Select and copy the generated JavaScript, and paste it into a text file. Delete everything in the text file except the browser monitoring license key and app ID information (just above the ending </script> tag), and save. Create and manage keys via API You can create additional license keys and manage them using NerdGraph.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.34608,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> license key and app ID",
        "sections": "<em>Browser</em> license key and app ID",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " main account license key. The <em>browser</em> key can&#x27;t be used to determine your account&#x27;s license key. The <em>browser</em> applicationID is the unique identification code for each app in <em>browser</em> <em>monitoring</em>. To protect the security of your <em>browser_monitoring</em>_key and applicationID, you can <em>monitor</em> or block your domain"
      },
      "id": "603ec39928ccbcd056eba755"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/filter-ajax-request-events": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/attribute-dictionary/",
      "sections": [
        "New Relic data dictionary",
        "AjaxRequest",
        "AwsLambdaInvocation",
        "AwsLambdaInvocationError",
        "BrowserInteraction",
        "BrowserTiming",
        "ContainerSample",
        "DistributedTraceSummary",
        "InfrastructureEvent",
        "JavaScriptError",
        "Metric",
        "Mobile",
        "MobileCrash",
        "MobileHandledException",
        "MobileRequest",
        "MobileRequestError",
        "MobileSession",
        "NetworkSample",
        "NrAiIncident",
        "NrAuditEvent",
        "NrConsumption",
        "NrDailyUsage",
        "NrIntegrationError",
        "NrMTDConsumption",
        "NrUsage",
        "PageAction",
        "PageView",
        "PageViewTiming",
        "ProcessSample",
        "Span",
        "StorageSample",
        "SyntheticCheck",
        "SyntheticRequest",
        "SyntheticsPrivateLocationStatus",
        "SyntheticsPrivateMinion",
        "SystemSample",
        "Transaction",
        "TransactionError",
        "WorkloadStatus"
      ],
      "published_at": "2021-12-26T01:43:57Z",
      "title": "New Relic data dictionary",
      "updated_at": "2021-12-15T01:44:16Z",
      "type": "docs",
      "external_id": "cbca3a897621bcbb31159067d6d4ec27c5178fe4",
      "document_type": "views_page_content",
      "popularity": 1,
      "body": "AjaxRequest Data source : Browser agent An AjaxRequest event is created automatically when an Ajax request occurs during a BrowserInteraction event. The event attributes track geographic and browser info. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming groupedRequestUrl The grouped URL of the AJAX request. For example: myapp.com/acct/*/ajax. AjaxRequest Span hostname The fully qualified domain name (FQDN) of the request URL. AjaxRequest httpMethod enum The HTTP method of the AJAX request. Example: POST. AjaxRequest httpResponseCode enum The HTTP response code. Example: 200. AjaxRequest jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError port enum The request port. AjaxRequest Span priority Likelihood this event will be saved. AjaxRequest regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming requestBodySize bytes (B) The payload size of the request body, in bytes. AjaxRequest requestUrl The URL of the AJAX request. For example: myapp.com/acct/1/ajax. AjaxRequest responseBodySize bytes (B) The payload size of the response body, in bytes. AjaxRequest session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToLoadEventStart seconds (s) The time, in seconds, from the start of the AJAX request to the start of its load event. This value represents the duration of the AJAX request with single page app (SPA) monitoring. For more information, see the Mozilla developer documentation about XMLHttpRequest load events. AjaxRequest timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming AwsLambdaInvocation Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. This event captures overall function timing and associated metadata. A single AwsLambdaInvocation event is generated for each invocation. Attribute name Definition Data types aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocation AwsLambdaInvocationError databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocation AwsLambdaInvocationError externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocation AwsLambdaInvocationError Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocation AwsLambdaInvocationError Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.status bytes (B) The response code for an HTTP request AwsLambdaInvocation totalTime seconds (s) The sum of all async components' duration, in seconds. An async component is a method or function where there is no instrumented encapsulating method or function. AwsLambdaInvocation Transaction traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocation AwsLambdaInvocationError AwsLambdaInvocationError Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. It's generated when an error occurs during a Lambda function invocation. Attribute name Definition Data types aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocation AwsLambdaInvocationError aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocation AwsLambdaInvocationError aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocation AwsLambdaInvocationError databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocation AwsLambdaInvocationError error.class The class name or type for the error. This will be server and platform specific. AwsLambdaInvocationError TransactionError error.message The error message for the transaction. This will be server and platform specific. AwsLambdaInvocationError TransactionError externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocation AwsLambdaInvocationError Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocation AwsLambdaInvocationError Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocation AwsLambdaInvocationError Transaction TransactionError stackTrace The error stack trace. The format will be different depending on the agent language. AwsLambdaInvocationError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span transactionName Name of the transaction in which the error occurred. Example value: Controller/customers/show. Value may be 'Unknown' if an error occurs outside of a transaction. AwsLambdaInvocationError TransactionError type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocation AwsLambdaInvocationError BrowserInteraction Data source : Browser agent A BrowserInteraction represents a unit of work in a browser session, triggered by a user interacting with the webpage. It captures information about the session, AJAX calls and custom JavaScript timing that occurred as a result of the interaction. Initial load and route changes are captured as special types of browser interactions, and are used for SPA monitoring. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError ajaxCount count A count of all XHRs included in the timing of a SPA interaction. BrowserInteraction appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming backendTransactionName The name of the backend transaction that served the initial page load. BrowserInteraction browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming category The type of interaction; either initial page load, route change, or custom. BrowserInteraction city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming duration seconds (s) The total time elapsed of the interaction event BrowserInteraction eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming firstContentfulPaint firstContentfulPaint is the point when the browser renders the first bit of content from the DOM, which may be text, an image, SVG, or a <canvas> element. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstContentfulPaint. See Compatibility and requirements for New Relic Browser for additional information about firstContentfulPaint browser compatibility. BrowserInteraction PageView firstPaint firstPaint marks the point when the browser renders anything that is visually different from what was on the screen prior to navigation. This includes non-default background paint and the enclosing box of an iframe. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstPaint. See Compatibility and requirements for New Relic Browser for additional information about firstPaint browser compatibility. BrowserInteraction PageView jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError previousGroupedUrl The grouped version of the URL in the browser at the start of the interaction. BrowserInteraction previousRouteName The route name of the page at the start of the interaction. This is the last value passed by setCurrentRouteName before the start of the interaction. BrowserInteraction previousURL The ungrouped URL in the browser at the start of the interaction. BrowserInteraction regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span targetGroupedUrl The grouped version of the URL in the browser at the end of the interaction. BrowserInteraction targetRouteName The route name for the page at the end of the interaction. The last value passed by setCurrentRouteName before the end of the interaction. BrowserInteraction targetUrl The ungrouped URL in the browser at the end of the interaction. BrowserInteraction timeToConnectEnd seconds (s) The time, in seconds, from the start of the interaction to the connectEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToConnectStart seconds (s) The time, in seconds, from the start of the interaction to the connectStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomComplete seconds (s) The time, in seconds, from the start of the interaction to the domComplete, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventEnd seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventStart seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomInteractive seconds (s) The time, in seconds, from the start of the interaction to the domInteractive, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomLoading seconds (s) The time, in seconds, from the start of the interaction to the domLoading, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupEnd seconds (s) The time, in seconds, from the start of the interaction to the domainLookupEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupStart seconds (s) The time, in seconds, from the start of the interaction to the domainLookupStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToFetchStart seconds (s) The time, in seconds, from the start of the interaction to the fetchStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToLoadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the loadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLoadEventStart seconds (s) The time, in seconds, from the start of the interaction to the loadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information, see our documentation about instrumentation for the Navigation Timing API. BrowserInteraction timeToRedirectEnd seconds (s) The time, in seconds, from the start of the interaction to the redirectEnd, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRedirectStart seconds (s) The time, in seconds, from the start of the interaction to the redirectStart, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRequestStart seconds (s) The time, in seconds, from the start of the interaction to the requestStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseEnd seconds (s) The time, in seconds, from the start of the interaction to the responseEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseStart seconds (s) The time, in seconds, from the start of the interaction to the responseStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToSecureConnectionStart seconds (s) The time, in seconds, from the start of the interaction to the secureConnectionStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the unloadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventStart seconds (s) The time, in seconds, from the start of the interaction to the unloadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span trigger The cause of the route change or page load. The default values are click, submit, popstate, or initial page load. For a custom event created with the API, the default value for trigger will be api. This value can also be set via the API. BrowserInteraction userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming BrowserTiming Data source : Browser agent BrowserTiming is a custom event that captures SPA timing data for browser interactions started using the custom createTracer SPA API method. BrowserTiming contains many of the same attributes used by other events, especially AjaxRequest. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming browserTimingName The name of the event. This is taken from the name argument of createTracer. BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. This attribute doesn't exist for initial page load events. AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserInteraction BrowserTiming timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. This attribute is only seen in AjaxRequest data that is tied to BrowserInteraction. AjaxRequest BrowserTiming timeToTracedCallbackStart seconds (s) The time in seconds from the start of the custom tracer until the start of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span tracedCallbackDuration seconds (s) The duration in seconds of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming ContainerSample Data source : Infrastructure This event is reported by the New Relic Infrastructure agent. It collects data from all the Docker containers on the host (which may or may not be running). It includes the container's ID, name, image, image name, and metrics about CPU, memory and networking. We take a snapshot of this data every 15 seconds for each container and package it into this event, which is then sent to New Relic. This data appears on the Containers UI page. Attribute name Definition Data types StorageDataAvailableBytes bytes (B) Data space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataTotalBytes bytes (B) Total Data space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsagePercent percentage (%) Percent of Data space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsedBytes bytes (B) Data space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataAvailableBytes bytes (B) Metadata space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataTotalBytes bytes (B) Total Metadata space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsagePercent percentage (%) Percent of Metadata space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsedBytes bytes (B) Metadata space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample commandLine The command line used in the container. ContainerSample containerId ID The unique Docker container ID. ContainerSample cpuKernelPercent percentage (%) CPU time percentage used in kernel space. ContainerSample cpuLimitCores count Number of cores available for the container. ContainerSample cpuPercent percentage (%) CPU usage percentage used. ContainerSample cpuShares count Number of CPU shares assigned to the container. ContainerSample cpuThrottlePeriods count Total number of periods throttled. ContainerSample cpuThrottleTimeMs milliseconds (ms) Total throttling time in milliseconds. ContainerSample cpuUsedCores percentage (%) CPU usage per core. ContainerSample cpuUsedCoresPercent percentage (%) CPU usage percentage per core. ContainerSample cpuUserPercent percentage (%) CPU time percentage used in user space. ContainerSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample image ID The Docker image ID for the image the container is based on. ContainerSample imageName The Docker image name for the container. ContainerSample label_KEY Docker labels associated with this container (where KEY represents a custom label's key value). ContainerSample memoryCacheBytes count The amount of memory used by the container that can be associated precisely with a block on a block device. ContainerSample memoryKernelUsageBytes bytes (B) The amount of current kernel memory allocation. ContainerSample memoryResidentSizeBytes bytes (B) The amount of memory that doesn't correspond to anything on disk: stacks, heaps, and anonymous memory maps. ContainerSample memorySizeLimitBytes bytes (B) The total amount of memory the container is allowed to use. ContainerSample memorySoftLimitBytes bytes (B) The soft limit of memory usage equivalent to the memory reservation of the container. ContainerSample memorySwapLimitBytes bytes (B) The total amount of memory the container is using, including swap. ContainerSample memorySwapLimitUsagePercent percentage (%) This metric is calculated as the percentage of memorySwapUsageBytes over memorySwapLimitBytes, if the limit exists. ContainerSample memorySwapOnlyUsageBytes bytes (B) The amount of swap memory the container is using. This memory doesn't include non-swap memory. ContainerSample memorySwapUsageBytes bytes (B) The amount of memory swap the container is using, including swap. ContainerSample memoryUsageBytes bytes (B) This metric doesn't account for swap usage. ContainerSample memoryUsageLimitPercent percentage (%) This metric is calculated as the memoryUsageBytes percentage over memorySizeLimitBytes, if the limit exists. ContainerSample name The Docker container name. ContainerSample networkRxBytes bytes (B) Total number of received bytes. ContainerSample networkRxBytesPerSecond rate Number of received bytes per second. ContainerSample networkRxDropped count Total number of received packets dropped. ContainerSample networkRxDroppedPerSecond rate Number of received packets dropped per second. ContainerSample networkRxError count Total number of received packets with error. ContainerSample networkRxErrorsPerSecond rate Number of received packets with error per second. ContainerSample networkRxPackets count Total number of received packets. ContainerSample networkRxPacketsPerSecond rate Number of received packets with error per second. ContainerSample networkTxBytesPerSecond rate Number of transmitted bytes per second. ContainerSample networkTxDropped count Total number of transmitted packets dropped. ContainerSample networkTxDroppedPerSecond rate Number of transmitted packets dropped per second. ContainerSample networkTxErrors count Total number of transmitted packets with error. ContainerSample networkTxErrorsPerSecond rate Number of transmitted packets with error per second. ContainerSample networkTxPackets count Total number of transmitted packets. ContainerSample networkTxPacketsPerSecond rate Number of transmitted packets per second. ContainerSample networksTxBytes count Total number of bytes transmitted. ContainerSample restartCount count The number of times the container was restarted. ContainerSample state It can be: created, restarting, running, removing, paused, exited, or dead. ContainerSample status Holds the current container state. ContainerSample warningViolationCount count The number of times that alert conditions violated warning thresholds, causing warning violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample DistributedTraceSummary Data source : Distributed Tracing This event contains summary data about a distributed trace and provides an aggregated view of distributed tracing data. DistributedTraceSummary events are generated by New Relic and are triggered by distributed tracing data from agents or the Trace API. Attribute name Definition Data types accountIds A comma delimited list of newrelic accountIds that took part in this trace. DistributedTraceSummary backend.duration.ms milliseconds (ms) The total elapsed time in milliseconds of all backend services in this trace. DistributedTraceSummary backend.timestamp milliseconds (ms) The timestamp of the first span in this trace from a backend entity. In distributed tracing, any events that are not from client-side applications contributed to the backend duration. DistributedTraceSummary duration.ms The duration of the entire distributed trace, including both backend and client-side entities. the earliest span to the latest. DistributedTraceSummary entityCount count The number of unique entities that took part in this trace. DistributedTraceSummary entityGuids A comma delimited list of entity GUIDs for entities that participated in this trace. These GUIDs are assigned by New Relic for the New Relic-monitored entity (host, application, etc.). Each GUID is stored as a Base64 encoded value. DistributedTraceSummary errorCount count The number of events in this distributed trace that were identified as errors. DistributedTraceSummary newRelic.traceFilter.type The name of the trace filter used by the Infinite Tracing trace observer to select this trace. DistributedTraceSummary Span root.entity.accountId The New Relic account ID that the root entity of this trace reports data to. DistributedTraceSummary root.entity.guid The entity GUID associated with the root entity of this trace. DistributedTraceSummary root.entity.name The name of the root entity of this trace. DistributedTraceSummary root.span.duration.ms milliseconds (ms) The elapsed time in milliseconds of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary root.span.id The unique identifier of the root span of this trace. The root of a distributed trace is the first span, and it has a null value for parent.id. DistributedTraceSummary root.span.name The name of the root span of this trace. DistributedTraceSummary root.span.timestamp milliseconds (ms) The timestamp of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary spanCount count The number of events in this distributed trace. Events in a distributed trace can have several event types, including Span, Transaction, and TransactionError. DistributedTraceSummary timestamp milliseconds (ms) The timestamp of the root span in this distributed trace. DistributedTraceSummary trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError InfrastructureEvent Data sources : InfrastructureCloudTrail InfrastructureEvent describes changes (deltas) that occur in a system's live state. When an inventory or system state is added, removed, or changed, Infrastructure will produce an InfrastructureEvent that logs that activity. Attribute name Definition Data types category A New Relic category used to organize events in the UI. For example: automation, notification, and service. InfrastructureEvent changeType A simple classification of the type of change made to the entity: added, modified, or removed. InfrastructureEvent changedPath The fully specified name of the item that changed. This is constructed by taking the source and adding one or more additional path elements that uniquely identify the item that changed. InfrastructureEvent deltaId Delta refers to a recorded change in the system. The deltaId is a number used by New Relic to organize incoming inventory change data. InfrastructureEvent eventId The unique ID of the event, generated by New Relic. InfrastructureEvent format The type of infrastructure event. Each format type includes attributes that may be used to render the event in the UI. InfrastructureEvent newStatus The new agent status: disconnected or connected. InfrastructureEvent newValue If a change is made to the entity, this attribute contains the new value of the inventory that was changed. This will have no value if no change has been made. The value will display approximately 4K bytes of data. InfrastructureEvent oldValue If a change is made to the entity, this attribute contains the old value of the inventory that was changed. This will be blank if no change has been made. InfrastructureEvent provider For integrations that use generic event types (like the DatastoreSample event), the provider value specifies the source of the data (the service, or a sub-category of data from that service). Some Insights events are generic and are used by several integrations. For example, the DatastoreSample event is used by several integrations, including the AWS DynamoDB integration and the AWS RDS integration. In these cases, the provider attribute value represents the source of that attribute. This will usually be the service that data comes from or, for integrations that use several provider values, a certain sub-category of data from that service. When a provider value is present for a generic event, that event will have additional integration-specific attributes attached to it. Here’s an example of an Insights NRQL query that returns the attributes present for a DatastoreSample event reported by the AWS RDS integration: SELECT * from DatastoreSample where provider = 'RdsDbCluster' InfrastructureEvent source The fully specified origin of this inventory item. This is typically in the form category/plugin, where plugin is the generic word used for the tool that gathered this data. InfrastructureEvent summary A summary of the change that happened. Uses a human-friendly string, such as Agent disconnected. InfrastructureEvent violationUpdateType The type of change to the violation: For example: open or closed. InfrastructureEvent JavaScriptError Data source : Browser agent As JavaScript errors are triggered, we capture details as events. The JavaScriptError event contains information to help you segment errors to understand how they impact performance. Attribute name Definition Data types actionText The text of the HTML element that was clicked when a browser interaction started. Added to BrowserInteraction and any AjaxRequest, JavaScriptError and BrowserTiming events that occurred during that interaction. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError appId ID The identification number for the reporting browser agent. JavaScriptError appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserStackHash ID An unique identifier generated for a stack trace. The browserStackHash for a stack trace is different across different browsers. An identical stack trace will generate the same identifier. JavaScriptError city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming entityGuid The unique identifier of the monitor referenced in New Relic One. JavaScriptError SyntheticCheck SyntheticRequest errorClass The error type of the JavaScript Error object. Examples: ReferenceError, SyntaxError, and UncaughtException. JavaScriptError errorMessage The error message that was delivered. JavaScriptError firstErrorInSession A value to indicate whether or not this was the first JS error in the session. Example: true. JavaScriptError monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming releaseIds ID The releases in which the app was updated. Example: {\\\"jQuery\\\":\\\"v3.1.1\\\",\\\"multiverse\\\":\\\"96e9ac7\\\"}. JavaScriptError requestUri The URI of the requested resource. JavaScriptError session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span stackHash ID A unique identifier generated by the Browser agent for a stack trace. The stackHash for a stack trace is the same across different browsers. An identical stack trace will generate the same identifier. JavaScriptError stackTrace A collection of the active stack frames when the error occurred. JavaScriptError stackTraceGzip A compressed version of the stackTrace attribute. JavaScriptError timestamp The time that the error occurred, in Unix time. JavaScriptError transactionName The full metric name of the transaction in which the error occurred, or Unknown if the error occurs outside of a transaction. JavaScriptError userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Metric Data source : Metrics Represents a metric data point (a measurement over a range of time, or a sample at a specific point in time) with multiple attributes attached, which allow for in-depth analysis and querying. This metric data comes from our Metric API, our Telemetry SDKs, network performance monitoring, and some of our open-source exporters/integrations. Attribute name Definition Data types endTimestamp milliseconds (ms) The end of the time range associated with the metric, in Unix time, in milliseconds. This is calculated by adding the metric interval to the timestamp of the metric (timestamp + interval.ms). Metric interval.ms milliseconds (ms) The length of the time window. Metric metricName Name of the metric. Metric newrelic.source The source of this data. For example: metricAPI. Metric timestamp milliseconds (ms) The start time for the metric, in Unix time. Metric Mobile Data source : Mobile A Mobile event is created when a crash occurs, when an interaction ends or has run for 1 second, or if a session completes after the app is closed, backgrounded, or has run for 10 minutes. Mobile events were once the only event type and were generated for every event, but now there are several specialized event types. Recommendation: Upgrade to the most recent mobile monitoring agent version to take full advantage of the new event types. Attribute name Definition Data types category The type of data, either session or interaction. Mobile MobileSession interactionDuration For interaction category events only. This is the total time for the interaction to render on the device. In addition to render time, this usually includes all external calls associated with the interaction. Currently, this attribute is measured in seconds for Android devices and in milliseconds for iOS devices. Mobile name For interaction category events only. This is the label of the interaction associated with the event. It is by default assigned by New Relic. For example: ApplicationsListFragment or Display iOS_Example.MasterViewController. Mobile reportedTimestampMs For interaction category events only. The UTC based timestamp for when the event was sent to New Relic. This is different from the attribute ‘timestamp’, which is when the event began. Mobile MobileCrash Data source : Mobile The MobileCrash event is created when an app crashes. MobileCrash includes attributes such as crash line number, class, and crash message. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appToken The mobile application license token. MobileCrash appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession architecture The processor architecture of the device. For example: armv7 or arm64. MobileCrash asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession crashException The exception associated with the crash, if one is present. For example: java.lang.NullPointerException. MobileCrash crashFingerprint ID The New Relic-generated fingerprint used to uniquely identify the crash and other crashes identical to this one. MobileCrash crashLocationFile The file in which the crash occurred. MobileCrash crashMessage The message associated with the crash, if one is present. MobileCrash deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceName The device's name. MobileCrash deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession diskAvailable bytes (B) Space available on the device, in bytes. MobileCrash interactionHistory The client interactions with the application that led to the crash. MobileCrash isFirstOccurrence A boolean value indicating whether or not this was the first occurrence of the crash. MobileCrash lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession modelNumber The model of the device. This is the same as the session-level deviceModel attribute. MobileCrash networkStatus The type of network that the device was on at the time of crash, such as wifi or LTE. MobileCrash newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession occurrenceId ID The ID for this instance of the crash. MobileCrash orientation The orientation of the device, such as landscape or portrait. MobileCrash osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession parentProcess The parent process that launched the crashing process. MobileCrash parentProcessId ID The parent identification number (PID) of the parent process. MobileCrash platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession processId ID The PID of the previously running process on the device. MobileCrash processName The name of the previously running process. MobileCrash processPath The path to the binary. MobileCrash reportedTimestampMs The UTC timestamp for when the event was received by New Relic. (This is different from timestamp, which is when the MobileSession event began that crashed.) MobileCrash runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession symbolicated A boolean value indicating whether or not the crash was properly symbolicated. MobileCrash timeSinceLastInteraction milliseconds (ms) The time, in milliseconds, since the interaction before a crash event. MobileCrash userImageUuids ID The array of build UUIDs for applications and libraries. MobileCrash uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileHandledException Data source : Mobile MobileHandledException is sent when an exception is caught and is used for non-fatal exceptions reported to New Relic using the recordHandledException API for Android or iOS. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession exceptionAppBuildUuid ID The build uuid of the application binary in which the exception was caught. MobileHandledException exceptionCause The unsymbolicated, platform-specific cause of the exception. MobileHandledException exceptionLocation New Relic defined location of an exception. Contains a combination of exception file name, class, line number, and method. MobileHandledException exceptionLocationClass The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationFile The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLibraryOffset For XCFramework agent only. The library offset of the library that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLine Comes from the exception: The line number where the exception was generated. Only present if symbolication succeeded. MobileHandledException exceptionLocationMethod The method that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionMessage The unsymbolicated message from the exception. It can be user-generated or a generic system message. For Android, this is the Throwable message. MobileHandledException exceptionName The unsymbolicated exception type. MobileHandledException fingerprint ID The New Relic-generated identifier used to group like exceptions. MobileHandledException handledExceptionUuid ID The unique ID of the exception event. MobileHandledException lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession libraryName For XCFramework agent only. The library name where the exception was generated. MobileHandledException libraryStartAddr For XCFramework agent only. The library start address where the exception was generated. MobileHandledException memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession occurrenceTimestamp Agent-reported epoch timestamp of the handled exception. MobileHandledException osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession timestamp Epoch timestamp of the handled exception. This exception timestamp represents the time New Relic created the event, if it's older than two days or some other unexpected time. MobileHandledException uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileRequest Data source : Mobile A MobileRequest event is created when an HTTP request successfully completes, resulting in a response code below 400. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestFingerprint ID The New Relic-generated identifier used to group like request events. MobileRequest requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileRequestError Data source : Mobile A MobileRequestError is used for HTTP errors or network failures. HTTP errors are HTTP requests that have a status code greater than 400. A network failure is a HTTP request that results in no response. The event is sent when the HTTP request completes. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError errorType Either HTTPError or NetworkFailure, depending on whether the error is a result of a failed request to a host or a failure on the cellular network. MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession networkError The error message associated with the iOS NSURL Error code. See networkErrorCode for more information. MobileRequestError networkErrorCode If the error is a network error, this is the iOS network error code. For Android applications, this is the mapped value. MobileRequestError newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestErrorFingerprint ID The New Relic-generated identifier used to group like request error events. MobileRequestError requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseBody Optional: The response that is sent from the requestDomain for the HTTP error, up to 4096 bytes. MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocation AwsLambdaInvocationError MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession MobileSession Data source : Mobile A MobileSession event is sent when an app is closed, backgrounded, or when 10 minutes of active use has elapsed. This is the source of the general session data used by the other mobile monitoring events. MobileSession captures attributes such as device type, device OS, and geographical information. Attribute name Definition Data types appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileRequest MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession category The type of data, either session or interaction. Mobile MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileHandledException MobileRequest MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileHandledException MobileRequest MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileHandledException MobileRequest MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession install Indicates true only if the current session is the first session after app install. MobileSession lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession newRelicAgent The New Relic agent running on the application. For example: the iOSAgent or the androidAgent. MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession platform The platform type of the mobile monitoring agent, such as native or Cordova. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileHandledException MobileRequest MobileRequestError MobileSession sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionDuration seconds (s) The length of time for which the user used the application in seconds. If the session crashes, sessionDuration is not captured (although other events and attributes are still recorded). For sessions longer than 10 minutes, events in the Interaction and Custom event categories are sent to Insights while the session is ongoing, and therefore do not have sessionDuration attributes. Events recorded near the end of the session will include the duration, as will the Session event category. MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession timeSinceLoad seconds (s) The time, in seconds, from the beginning of the mobile session to the time the event occurred. MobileSession timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession upgradeFrom Indictates previous version number only if this is the first launch after app upgrade. MobileSession uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileHandledException MobileRequest MobileRequestError MobileSession NetworkSample Data source : Infrastructure NetworkSample event captures the descriptive and state information for each network device associated with a server. It includes the device's interface and address information, as well as current usage data. New Relic samples this data every 10 seconds for each attached network interface and packages it into a NetworkSample event, then sends the raw data to New Relic's collectors every 60 seconds. Attribute name Definition Data types agentName The name of the agent (Infrastructure). NetworkSample ProcessSample StorageSample SystemSample agentVersion The version of the New Relic Infrastructure agent. NetworkSample ProcessSample StorageSample SystemSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample entityID ID New Relic's unique ID number for the entity that is reporting data. This is used by New Relic to distinguish between customers and their entities. NetworkSample ProcessSample StorageSample SystemSample fullHostname The fully qualified (DNS) hostname. NetworkSample ProcessSample StorageSample SystemSample hardwareAddress The unique hardware address of the interface. NetworkSample hostname The short version of the entity's name. NetworkSample ProcessSample StorageSample SystemSample interfaceName The interface name as reported by the operating system.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 268.98102,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>AjaxRequest</em>",
        "body": " the page: mobile, tablet, or desktop. <em>AjaxRequest</em> BrowserInteraction BrowserTiming JavaScriptError PageView <em>event</em>Id ID A value that you can link to multiple BrowserInteraction <em>events</em> so you can view the interactions that occurred surrounding a specific <em>event</em>. For example, you can see the browser"
      },
      "id": "603f53b164441f41894e8875"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/data-apis/understand-data/event-data/events-reported-browser-monitoring/",
      "sections": [
        "Events reported by browser monitoring"
      ],
      "published_at": "2021-12-25T07:15:59Z",
      "title": "Events reported by browser monitoring",
      "updated_at": "2021-10-23T17:23:37Z",
      "type": "docs",
      "external_id": "476bd4c3c785fc80e2c917737fb4ac33cfba065b",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring in New Relic reports event data that is displayed in some UI displays and is also available for querying and charting. Select an event name in the following table to see its attributes. Event Description PageView PageView tracks geographic and timing data for each browser page load. PageViewTiming PageViewTiming sends each data point as a separate event as soon as it is available. This is useful for asynchronous, dynamic pages. To use this event, you must have browser agent version 1149 or higher. For more information, see the PageViewTiming query examples. PageAction PageAction event tracks data on each action performed on a page. Its attributes provide app and geographic data, as well as data about the user’s browser dimensions, session IDs, and referring and page URLs. BrowserInteraction (SPA) BrowserInteraction contains several PageView attributes as well as attributes that are specific to single-page apps (SPA) AjaxRequest An AjaxRequest event is created any time an Ajax call is made. When an Ajax call happens during a BrowserInteraction event, it is decorated with additional attributes related to the browser interaction. The event attributes track geographic and browser information. BrowserTiming (SPA) BrowserTiming is a custom event that captures SPA timing data for browser interactions started using the custom createTracer SPA API method. BrowserTiming contains many of the same attributes used by other events, especially AjaxRequest. JavaScriptError When a JavaScript error occurs, a JavaScriptError event is created. JavaScriptError captures JavaScript error data as well as browser interaction data. For more information, see the JS errors page in the browser UI and the example NRQL queries for browser and SPA events. Span When distributed tracing is enabled for browser monitoring, Span data is reported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 197.39075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Events</em> reported by browser monitoring",
        "sections": "<em>Events</em> reported by browser monitoring",
        "body": " geographic and browser information. BrowserTiming (SPA) BrowserTiming is a custom <em>event</em> that captures SPA timing data for browser interactions started using the custom createTracer SPA API method. BrowserTiming contains many of the same attributes used by other <em>events</em>, especially <em>AjaxRequest</em>"
      },
      "id": "609f8fe9196a677e8a22b1ab"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/docs/release-notes/new-relic-browser-release-notes/browser-agent-release-notes/browser-agent-v1211/",
      "sections": [
        "Browser agent v1211",
        "Improvements",
        "AjaxRequest events for all XHR/fetch requests",
        "Span events are for all XHR/fetch requests",
        "Update to Cumulative Layout Shift calculation",
        "Bug Fixes",
        "Prevent duplicate session trace nodes"
      ],
      "published_at": "2021-12-25T10:22:47Z",
      "title": "Browser agent v1211",
      "updated_at": "2021-10-09T00:21:25Z",
      "type": "docs",
      "external_id": "81b8698293a99d7ec2803cc9fe24709917247c2b",
      "document_type": "release_notes",
      "popularity": 1,
      "body": "Improvements AjaxRequest events for all XHR/fetch requests Previously, XHR/fetch requests were captured as AjaxRequest events only when they were part of a route change. With this change, all requests will be captured as events. This feature can be further configured by specifying which requests should not be collected. Span events are for all XHR/fetch requests Previously, Span events were generated only for XHR/fetch requests that were part of a route change. With this change, all requests will be captured as Spans. Update to Cumulative Layout Shift calculation The CLS calculation has been updated to use session windows in order to align with Google Chrome tooling (Lighthouse, PageSpeed Insights, CrUX). For more information, see the official blog post on web.dev. Bug Fixes Prevent duplicate session trace nodes The agent no longer calls the clearResourceTimings API, which had the potential to affect other scripts from accessing all resources. Instead, it now uses the PerformanceObserver API to collect information about resources.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 184.89117,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>AjaxRequest</em> <em>events</em> for all XHR&#x2F;fetch <em>requests</em>",
        "body": "Improvements <em>AjaxRequest</em> <em>events</em> for all XHR&#x2F;fetch requests Previously, XHR&#x2F;fetch requests were captured as <em>AjaxRequest</em> <em>events</em> only when they were part of a route change. With this change, all requests will be captured as <em>events</em>. This feature can be further configured by specifying which requests"
      },
      "id": "6160e085196a6761b6b70da7"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/group-browser-metrics-urls": [
    {
      "sections": [
        "Monitor or block specific domains and subdomains",
        "Tip",
        "Configure domain conditions",
        "Turn off domain conditions"
      ],
      "title": "Monitor or block specific domains and subdomains",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "bf81374c9ec84ce08154a76b10f526fb5ee7e7ec",
      "image": "https://docs.newrelic.com/static/1bf47635bd1556e86b9019a47176e3b9/c1b63/browser_domain_conditions.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains/",
      "published_at": "2021-12-25T06:17:08Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser lets you choose which domains or subdomains that a browser app monitors. This is useful for limiting monitoring only to the application activity you consider important. For example, if you use the copy/paste method to deploy your browser app, you can set domain conditions to protect the security of your browser monitoring license key and app ID. Tip Domain conditions only filter data based on the url of the page that is reported. Domain condition filters do not apply to AJAX data reported to New Relic. Configure domain conditions To view or edit your domain condition settings: Go to one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions. If there are no domain conditions in place, select Enable domain conditions. If conditions exist, select Edit conditions. Select the option to build a list of allowed domains or to build a list of blocked/denied domains. Select the domain conditions (maximum 10 conditions). Select the domain conditions with the Starts with condition, then enter the URL with the subdomain (maximum 10 conditions). one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions: Use this feature to limit monitoring only to your important app activity, or to enhance security for your browser license key and app ID. Review and confirm your domain condition settings. A preview text box displays in real time what domains match the conditions you set. You will also see an estimate of the impact the proposed settings will have on your data. Turn off domain conditions To disable domain conditions and return to monitoring all domains: Go to one.newrelic.com > Browser > (select an app) > Settings > Domain conditions. Set the Enable domain conditions option to Off.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Monitor</em> or block specific domains and subdomains",
        "sections": "<em>Monitor</em> or block specific domains and subdomains",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> lets you choose which domains or subdomains that a <em>browser</em> app monitors. This is useful for limiting <em>monitoring</em> only to the application activity you consider important. For example, if you use the copy&#x2F;paste method to deploy your <em>browser</em> app, you can set domain conditions to protect"
      },
      "id": "6043fd41e7b9d240ca5799bb"
    },
    {
      "sections": [
        "Rename browser apps",
        "Rename app monitored by APM",
        "Caution",
        "Rename app via JavaScript snippet",
        "Rename app via New Relic REST API (v2)"
      ],
      "title": "Rename browser apps",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "6ba80996a8c58869876377c40ba67098f0870475",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/rename-browser-apps/",
      "published_at": "2021-12-25T06:18:04Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow the appropriate procedure to rename your browser app depending on the deployment option you used to add it to browser. Rename app monitored by APM If you added an app to browser already being monitored by APM, the app name that appears in browser is the same as the app name in the APM UI. To rename the app, use any of these options: Option Comments Rename and continue collecting data This option is useful when you simply want to give an app a different display name (alias). To change the alias that appears in the New Relic UI, use the app's Settings page: Go to one.newrelic.com > APM > (select an app) > Settings > Application. Stop reporting under the old name To stop reporting data under the old name and begin collecting data with a new name (app identifer), use the APM agent's configuration file. This changes the identifier that New Relic's data collector uses to distinguish one app from another. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. If one or more apps share the same name, then their data will be aggregated in the UI. Caution If you change the app identifier, a new application will appear in our user interface with the new name, and data will stop reporting to the app(s) with the old name. Rename app via JavaScript snippet This information applies if you inserted the browser agent's JavaScript snippet into your: App monitored by APM that was deployed via the copy/paste method Single page app (SPA) Any standalone browser app that is not also monitored by APM You cannot directly edit the JavaScript snippet in the existing app. Instead, to use your app with a different name: Follow standard procedures to create a new app using the copy/paste method. Provide the new name, and generate the JavaScript snippet. Copy the new JavaScript snippet. In your webpage, replace the JavaScript from your original app with the JavaScript generated for the new app name. If your standalone app has multiple names, copy the custom app IDs in your configuration script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to browser apps that are also monitored by APM. You cannot change the app name via the REST API if you used the copy/paste method to insert browser's JavaScript snippet into your app. Follow standard procedures to change the APM app alias via REST API or API Explorer. New Relic automatically changes the display name for the app everywhere in the New Relic UI, including browser.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Rename <em>browser</em> apps",
        "sections": "Rename <em>browser</em> apps",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>configuration</em> script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to <em>browser</em> apps that are also monitored"
      },
      "id": "603ea123e7b9d2943f2a07b3"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> settings: UI options for Apdex and geography",
        "sections": "<em>Browser</em> settings: UI options for Apdex and geography",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "As part of the <em>browser</em> setup requirements, you must install the <em>browser</em> agent. Then you can use the your app&#x27;s Applications settings page to update <em>browser</em> <em>monitoring</em> options for: <em>Browser</em> subscription levels <em>Browser</em> Apdex T values Cities, regions, or countries to be highlighted on the Filterable"
      },
      "id": "6043fea6196a676128960f4b"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains": [
    {
      "sections": [
        "Rename browser apps",
        "Rename app monitored by APM",
        "Caution",
        "Rename app via JavaScript snippet",
        "Rename app via New Relic REST API (v2)"
      ],
      "title": "Rename browser apps",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "6ba80996a8c58869876377c40ba67098f0870475",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/rename-browser-apps/",
      "published_at": "2021-12-25T06:18:04Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow the appropriate procedure to rename your browser app depending on the deployment option you used to add it to browser. Rename app monitored by APM If you added an app to browser already being monitored by APM, the app name that appears in browser is the same as the app name in the APM UI. To rename the app, use any of these options: Option Comments Rename and continue collecting data This option is useful when you simply want to give an app a different display name (alias). To change the alias that appears in the New Relic UI, use the app's Settings page: Go to one.newrelic.com > APM > (select an app) > Settings > Application. Stop reporting under the old name To stop reporting data under the old name and begin collecting data with a new name (app identifer), use the APM agent's configuration file. This changes the identifier that New Relic's data collector uses to distinguish one app from another. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. If one or more apps share the same name, then their data will be aggregated in the UI. Caution If you change the app identifier, a new application will appear in our user interface with the new name, and data will stop reporting to the app(s) with the old name. Rename app via JavaScript snippet This information applies if you inserted the browser agent's JavaScript snippet into your: App monitored by APM that was deployed via the copy/paste method Single page app (SPA) Any standalone browser app that is not also monitored by APM You cannot directly edit the JavaScript snippet in the existing app. Instead, to use your app with a different name: Follow standard procedures to create a new app using the copy/paste method. Provide the new name, and generate the JavaScript snippet. Copy the new JavaScript snippet. In your webpage, replace the JavaScript from your original app with the JavaScript generated for the new app name. If your standalone app has multiple names, copy the custom app IDs in your configuration script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to browser apps that are also monitored by APM. You cannot change the app name via the REST API if you used the copy/paste method to insert browser's JavaScript snippet into your app. Follow standard procedures to change the APM app alias via REST API or API Explorer. New Relic automatically changes the display name for the app everywhere in the New Relic UI, including browser.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Rename <em>browser</em> apps",
        "sections": "Rename <em>browser</em> apps",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>configuration</em> script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to <em>browser</em> apps that are also monitored"
      },
      "id": "603ea123e7b9d2943f2a07b3"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.35121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> settings: UI options for Apdex and geography",
        "sections": "<em>Browser</em> settings: UI options for Apdex and geography",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "As part of the <em>browser</em> setup requirements, you must install the <em>browser</em> agent. Then you can use the your app&#x27;s Applications settings page to update <em>browser</em> <em>monitoring</em> options for: <em>Browser</em> subscription levels <em>Browser</em> Apdex T values Cities, regions, or countries to be highlighted on the Filterable"
      },
      "id": "6043fea6196a676128960f4b"
    },
    {
      "sections": [
        "Browser license key and app ID",
        "Get browser license key and app ID from the UI",
        "Create and manage keys via API"
      ],
      "title": "Browser license key and app ID",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "33c732387b5cec4796c7e0f788601455883587ed",
      "image": "https://docs.newrelic.com/static/cfe79713e0c022d39ff6bd6d66289263/c1b63/lkey_appId.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/configuration/browser-license-key-app-id/",
      "published_at": "2021-12-25T13:34:24Z",
      "updated_at": "2021-07-09T23:33:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic features require your browser monitoring license key or your New Relic application ID. The New Relic collector reads this key to determine which account incoming data belongs to. If you use the copy/paste method to add an app to browser monitoring, your app's browser Settings page will show the generated JavaScript snippet. The bottom of the generated JavaScript includes your browser licenseKey (also known as a browser_monitoring_key) and applicationID. The browser monitoring licenseKey (browser_monitoring_key) is a unique key that is linked to, but is not the same as, your main account license key. The browser key can't be used to determine your account's license key. The browser applicationID is the unique identification code for each app in browser monitoring. To protect the security of your browser_monitoring_key and applicationID, you can monitor or block your domain. Get browser license key and app ID from the UI This procedure applies only when you use the copy/paste deployment method. If you use the APM app deployment method, your Settings page will not show the JavaScript snippet. one.newrelic.com > Browser > Settings: The end of the JavaScript generated for copy/paste deployments includes your browser monitoring license key and application ID. To obtain only the browser monitoring license key and application ID information: Go to one.newrelic.com > Browser > Settings. Select and copy the generated JavaScript, and paste it into a text file. Delete everything in the text file except the browser monitoring license key and app ID information (just above the ending </script> tag), and save. Create and manage keys via API You can create additional license keys and manage them using NerdGraph.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.34608,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> license key and app ID",
        "sections": "<em>Browser</em> license key and app ID",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " main account license key. The <em>browser</em> key can&#x27;t be used to determine your account&#x27;s license key. The <em>browser</em> applicationID is the unique identification code for each app in <em>browser</em> <em>monitoring</em>. To protect the security of your <em>browser_monitoring</em>_key and applicationID, you can <em>monitor</em> or block your domain"
      },
      "id": "603ec39928ccbcd056eba755"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/rename-browser-apps": [
    {
      "sections": [
        "Monitor or block specific domains and subdomains",
        "Tip",
        "Configure domain conditions",
        "Turn off domain conditions"
      ],
      "title": "Monitor or block specific domains and subdomains",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "bf81374c9ec84ce08154a76b10f526fb5ee7e7ec",
      "image": "https://docs.newrelic.com/static/1bf47635bd1556e86b9019a47176e3b9/c1b63/browser_domain_conditions.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains/",
      "published_at": "2021-12-25T06:17:08Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser lets you choose which domains or subdomains that a browser app monitors. This is useful for limiting monitoring only to the application activity you consider important. For example, if you use the copy/paste method to deploy your browser app, you can set domain conditions to protect the security of your browser monitoring license key and app ID. Tip Domain conditions only filter data based on the url of the page that is reported. Domain condition filters do not apply to AJAX data reported to New Relic. Configure domain conditions To view or edit your domain condition settings: Go to one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions. If there are no domain conditions in place, select Enable domain conditions. If conditions exist, select Edit conditions. Select the option to build a list of allowed domains or to build a list of blocked/denied domains. Select the domain conditions (maximum 10 conditions). Select the domain conditions with the Starts with condition, then enter the URL with the subdomain (maximum 10 conditions). one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions: Use this feature to limit monitoring only to your important app activity, or to enhance security for your browser license key and app ID. Review and confirm your domain condition settings. A preview text box displays in real time what domains match the conditions you set. You will also see an estimate of the impact the proposed settings will have on your data. Turn off domain conditions To disable domain conditions and return to monitoring all domains: Go to one.newrelic.com > Browser > (select an app) > Settings > Domain conditions. Set the Enable domain conditions option to Off.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Monitor</em> or block specific domains and subdomains",
        "sections": "<em>Monitor</em> or block specific domains and subdomains",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> lets you choose which domains or subdomains that a <em>browser</em> app monitors. This is useful for limiting <em>monitoring</em> only to the application activity you consider important. For example, if you use the copy&#x2F;paste method to deploy your <em>browser</em> app, you can set domain conditions to protect"
      },
      "id": "6043fd41e7b9d240ca5799bb"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> settings: UI options for Apdex and geography",
        "sections": "<em>Browser</em> settings: UI options for Apdex and geography",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "As part of the <em>browser</em> setup requirements, you must install the <em>browser</em> agent. Then you can use the your app&#x27;s Applications settings page to update <em>browser</em> <em>monitoring</em> options for: <em>Browser</em> subscription levels <em>Browser</em> Apdex T values Cities, regions, or countries to be highlighted on the Filterable"
      },
      "id": "6043fea6196a676128960f4b"
    },
    {
      "sections": [
        "Browser license key and app ID",
        "Get browser license key and app ID from the UI",
        "Create and manage keys via API"
      ],
      "title": "Browser license key and app ID",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "33c732387b5cec4796c7e0f788601455883587ed",
      "image": "https://docs.newrelic.com/static/cfe79713e0c022d39ff6bd6d66289263/c1b63/lkey_appId.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/configuration/browser-license-key-app-id/",
      "published_at": "2021-12-25T13:34:24Z",
      "updated_at": "2021-07-09T23:33:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Some New Relic features require your browser monitoring license key or your New Relic application ID. The New Relic collector reads this key to determine which account incoming data belongs to. If you use the copy/paste method to add an app to browser monitoring, your app's browser Settings page will show the generated JavaScript snippet. The bottom of the generated JavaScript includes your browser licenseKey (also known as a browser_monitoring_key) and applicationID. The browser monitoring licenseKey (browser_monitoring_key) is a unique key that is linked to, but is not the same as, your main account license key. The browser key can't be used to determine your account's license key. The browser applicationID is the unique identification code for each app in browser monitoring. To protect the security of your browser_monitoring_key and applicationID, you can monitor or block your domain. Get browser license key and app ID from the UI This procedure applies only when you use the copy/paste deployment method. If you use the APM app deployment method, your Settings page will not show the JavaScript snippet. one.newrelic.com > Browser > Settings: The end of the JavaScript generated for copy/paste deployments includes your browser monitoring license key and application ID. To obtain only the browser monitoring license key and application ID information: Go to one.newrelic.com > Browser > Settings. Select and copy the generated JavaScript, and paste it into a text file. Delete everything in the text file except the browser monitoring license key and app ID information (just above the ending </script> tag), and save. Create and manage keys via API You can create additional license keys and manage them using NerdGraph.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.34608,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> license key and app ID",
        "sections": "<em>Browser</em> license key and app ID",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " main account license key. The <em>browser</em> key can&#x27;t be used to determine your account&#x27;s license key. The <em>browser</em> applicationID is the unique identification code for each app in <em>browser</em> <em>monitoring</em>. To protect the security of your <em>browser_monitoring</em>_key and applicationID, you can <em>monitor</em> or block your domain"
      },
      "id": "603ec39928ccbcd056eba755"
    }
  ],
  "/docs/browser/new-relic-browser/configuration/view-browser-apps-alert-information": [
    {
      "sections": [
        "Monitor or block specific domains and subdomains",
        "Tip",
        "Configure domain conditions",
        "Turn off domain conditions"
      ],
      "title": "Monitor or block specific domains and subdomains",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "bf81374c9ec84ce08154a76b10f526fb5ee7e7ec",
      "image": "https://docs.newrelic.com/static/1bf47635bd1556e86b9019a47176e3b9/c1b63/browser_domain_conditions.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/monitor-or-block-specific-domains-subdomains/",
      "published_at": "2021-12-25T06:17:08Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser lets you choose which domains or subdomains that a browser app monitors. This is useful for limiting monitoring only to the application activity you consider important. For example, if you use the copy/paste method to deploy your browser app, you can set domain conditions to protect the security of your browser monitoring license key and app ID. Tip Domain conditions only filter data based on the url of the page that is reported. Domain condition filters do not apply to AJAX data reported to New Relic. Configure domain conditions To view or edit your domain condition settings: Go to one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions. If there are no domain conditions in place, select Enable domain conditions. If conditions exist, select Edit conditions. Select the option to build a list of allowed domains or to build a list of blocked/denied domains. Select the domain conditions (maximum 10 conditions). Select the domain conditions with the Starts with condition, then enter the URL with the subdomain (maximum 10 conditions). one.newrelic.com > Browser > (select a browser app) > Settings > Domain conditions: Use this feature to limit monitoring only to your important app activity, or to enhance security for your browser license key and app ID. Review and confirm your domain condition settings. A preview text box displays in real time what domains match the conditions you set. You will also see an estimate of the impact the proposed settings will have on your data. Turn off domain conditions To disable domain conditions and return to monitoring all domains: Go to one.newrelic.com > Browser > (select an app) > Settings > Domain conditions. Set the Enable domain conditions option to Off.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Monitor</em> or block specific domains and subdomains",
        "sections": "<em>Monitor</em> or block specific domains and subdomains",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> lets you choose which domains or subdomains that a <em>browser</em> app monitors. This is useful for limiting <em>monitoring</em> only to the application activity you consider important. For example, if you use the copy&#x2F;paste method to deploy your <em>browser</em> app, you can set domain conditions to protect"
      },
      "id": "6043fd41e7b9d240ca5799bb"
    },
    {
      "sections": [
        "Rename browser apps",
        "Rename app monitored by APM",
        "Caution",
        "Rename app via JavaScript snippet",
        "Rename app via New Relic REST API (v2)"
      ],
      "title": "Rename browser apps",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "6ba80996a8c58869876377c40ba67098f0870475",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/rename-browser-apps/",
      "published_at": "2021-12-25T06:18:04Z",
      "updated_at": "2021-07-10T02:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Follow the appropriate procedure to rename your browser app depending on the deployment option you used to add it to browser. Rename app monitored by APM If you added an app to browser already being monitored by APM, the app name that appears in browser is the same as the app name in the APM UI. To rename the app, use any of these options: Option Comments Rename and continue collecting data This option is useful when you simply want to give an app a different display name (alias). To change the alias that appears in the New Relic UI, use the app's Settings page: Go to one.newrelic.com > APM > (select an app) > Settings > Application. Stop reporting under the old name To stop reporting data under the old name and begin collecting data with a new name (app identifer), use the APM agent's configuration file. This changes the identifier that New Relic's data collector uses to distinguish one app from another. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. If one or more apps share the same name, then their data will be aggregated in the UI. Caution If you change the app identifier, a new application will appear in our user interface with the new name, and data will stop reporting to the app(s) with the old name. Rename app via JavaScript snippet This information applies if you inserted the browser agent's JavaScript snippet into your: App monitored by APM that was deployed via the copy/paste method Single page app (SPA) Any standalone browser app that is not also monitored by APM You cannot directly edit the JavaScript snippet in the existing app. Instead, to use your app with a different name: Follow standard procedures to create a new app using the copy/paste method. Provide the new name, and generate the JavaScript snippet. Copy the new JavaScript snippet. In your webpage, replace the JavaScript from your original app with the JavaScript generated for the new app name. If your standalone app has multiple names, copy the custom app IDs in your configuration script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to browser apps that are also monitored by APM. You cannot change the app name via the REST API if you used the copy/paste method to insert browser's JavaScript snippet into your app. Follow standard procedures to change the APM app alias via REST API or API Explorer. New Relic automatically changes the display name for the app everywhere in the New Relic UI, including browser.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Rename <em>browser</em> apps",
        "sections": "Rename <em>browser</em> apps",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>configuration</em> script to your new app. Based on the data retention schedule, New Relic will retain historical data collected under the old name, and will collect and aggregate data under the new name. Rename app via New Relic REST API (v2) This information applies only to <em>browser</em> apps that are also monitored"
      },
      "id": "603ea123e7b9d2943f2a07b3"
    },
    {
      "sections": [
        "Browser settings: UI options for Apdex and geography",
        "Select Apdex and geography settings",
        "View end-user Apdex"
      ],
      "title": "Browser settings: UI options for Apdex and geography",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Configuration"
      ],
      "external_id": "36b483a11fe529bec2644f008679908aaab60162",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/configuration/browser-settings-ui-options-apdex-geography/",
      "published_at": "2021-12-25T04:47:35Z",
      "updated_at": "2021-07-10T02:41:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "As part of the browser setup requirements, you must install the browser agent. Then you can use the your app's Applications settings page to update browser monitoring options for: Browser subscription levels Browser Apdex T values Cities, regions, or countries to be highlighted on the Filterable geography page Select Apdex and geography settings For apps that are also monitored by APM, you can set separate Apdex T values for browser (end users) and for APM. You can also select cities, regions, or countries to be highlighted on the Filterable geography page. Go to one.newrelic.com > Browser > (select an app) > Settings > Application settings. From Application settings, select an Apdex T value specifically for browser monitoring, or leave the default Apdex value. Select up to five countries or regions for browser monitoring to highlight on the Filterable geography page. If you are reporting data to multiple app names, select the same countries in both the primary and secondary apps. Select Save application settings. Whenever you change Apdex settings, a black vertical bar appears on the Page load timing chart on your browser app's Summary page. View end-user Apdex To view your Apdex score: Go to one.newrelic.com > Browser > (select an app) > Summary. OR Go to one.newrelic.com > Browser > (select an app) > Page views.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 119.351204,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> settings: UI options for Apdex and geography",
        "sections": "<em>Browser</em> settings: UI options for Apdex and geography",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "As part of the <em>browser</em> setup requirements, you must install the <em>browser</em> agent. Then you can use the your app&#x27;s Applications settings page to update <em>browser</em> <em>monitoring</em> options for: <em>Browser</em> subscription levels <em>Browser</em> Apdex T values Cities, regions, or countries to be highlighted on the Filterable"
      },
      "id": "6043fea6196a676128960f4b"
    }
  ],
  "/docs/browser/new-relic-browser/getting-started/browser-apps-index": [
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.4626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    },
    {
      "sections": [
        "Introduction to browser monitoring",
        "Tip",
        "More than Real User Monitoring (RUM)",
        "Examine user perceptions",
        "Improve interactive app performance",
        "Correlate front-end and back-end problems",
        "Get started with browser monitoring"
      ],
      "title": "Introduction to browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "4928b2a5981bd2d6263f04b4b882d65adef22779",
      "image": "https://docs.newrelic.com/static/98ad878ffa7b586b779178656f19ec58/c1b63/browser_intro_0.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring/",
      "published_at": "2021-12-26T01:48:40Z",
      "updated_at": "2021-11-25T13:02:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your end-user experience depends on your entire technology stack. You need to quickly understand what's causing a customer complaint or issue. Did the problem come from your infrastructure, your application, or the browsers that ultimately render it? Is it the result of a problematic internet provider, a problem in your own data center with failing CPU or memory, or something else? Tip This doc gives you detailed information about why our browser monitoring solution matters to your business. But if you want to skip ahead, just sign up for a New Relic account. (It's free, forever!) Then, after you install the browser monitoring agent, you can start working with your data. More than Real User Monitoring (RUM) Many websites contain dynamic content that is loaded after the initial page has finished loading, and complex JavaScript code increases the need for error reporting. Browser monitoring in New Relic One provides a Real User Monitoring (RUM) solution that measures the speed and performance of your end users as they navigate to your site from different web browsers, devices, operating systems, and networks. With browser monitoring in New Relic One, you see actionable data about your end users' experience with your app. But browser monitoring in New Relic goes far beyond the initial page load to measure full page life cycle data. For example, our browser UI shows you: Actual performance data, such as by page view popularity and user satisfaction (Apdex) scores Perceived performance data that measures how quickly your async or dynamic visuals and interactive page contents display JavaScript error analytics, stack traces, and line-of-code visibility, to show you the end-user steps leading up to an error itself Session performance with a detailed timeline and heat map of the load and interaction events during a webpage's full life cycle AJAX requests indicating problems with timing, end points, and specific locations in the webpage Hash-based route changes in apps with single-page application (SPA) architectures These tools (and more!) help your teams optimize your end users' page load experience, eliminate bugs, and troubleshoot faster across your full stack. Examine user perceptions Real user data gives insights into actual page performance, but you also need to look into your users' perception of your site's performance. Pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser monitoring agent. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. Additional metrics include: First paint, first contentful paint, and largest contentful paint First input delay First interaction This helps you understand how users experience your site, both from visual and responsiveness standpoints. Improve interactive app performance Our single-page app (SPA) monitoring automatically tracks route changes, initial page loads, and synchronous and asynchronous activity during browser interactions. You can also use our browser agent and SPA API to monitor virtually anything that executes inside the browser. If you are a developer, SPA monitoring can help you: Create faster, more responsive, highly interactive apps. Monitor the throughput and performance that real users are experiencing. Troubleshoot and resolve problems within the context of the page load. Query and visualize the data to assist with business decisions. Bring better apps to the marketplace more quickly. Correlate front-end and back-end problems With New Relic One, you can instrument any type of data you need, such as metrics, events, logs, and traces. This helps you find actionable data about your end users' experience across the stack. For example: Type of data Comments Locations or domains Limit browser monitoring to focus on specific geographical locations or specific types of end-user activity. You can also monitor or block specific domains. Trends in interactions Use our comparative charting feature for a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetic monitors. Distributed tracing Isolate latency from the web browser through back-end services with distributed tracing. The UI helps you see the connection across across a full transaction, from browser activity, to time spent in network, to back-end activity. Browser types Explore your end users' experience with your app segmented by any types of browsers they use, including: Top browsers by throughput Average page load time by platform type (mobile, desktop, and other) Selected browser type by version (for example, Chrome 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Get started with browser monitoring Follow these basic steps, and you'll quickly be up and running in New Relic with browser monitoring! Review the compatibility details and basic requirements for browser monitoring. Install the browser agent. Go to [one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. View summary data from your Browser summary page, then drill down into page load timing details and other UI data. Configure your alerts for key performance data, or use our Applied Intelligence solutions to reduce alert noise, correlate incidents, and automatically detect anomalies. Query and visualize your default data (or customize your own), then analyze what that data says about your business. Customize and share your own charts and dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.3774,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>browser</em> <em>monitoring</em>",
        "sections": "<em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific <em>browser</em> type or platform, or whether the problem is more widespread. <em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em> Follow these basic steps, and you&#x27;ll quickly be up and running in New Relic"
      },
      "id": "604429a9e7b9d2bde7579a04"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-25T04:32:43Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.50934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Browser</em> <em>monitoring</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " The <em>browser</em> API resources include: Resource Details <em>Browser</em> agent API Use the <em>browser</em> agent API for tasks such as: Report custom end user data to <em>browser</em> <em>monitoring</em>. <em>Monitor</em> asynchronous <em>browser</em> activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/browser/new-relic-browser/getting-started/compatibility-requirements-browser-monitoring": [
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 171.46257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    },
    {
      "sections": [
        "Introduction to browser monitoring",
        "Tip",
        "More than Real User Monitoring (RUM)",
        "Examine user perceptions",
        "Improve interactive app performance",
        "Correlate front-end and back-end problems",
        "Get started with browser monitoring"
      ],
      "title": "Introduction to browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "4928b2a5981bd2d6263f04b4b882d65adef22779",
      "image": "https://docs.newrelic.com/static/98ad878ffa7b586b779178656f19ec58/c1b63/browser_intro_0.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/introduction-browser-monitoring/",
      "published_at": "2021-12-26T01:48:40Z",
      "updated_at": "2021-11-25T13:02:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your end-user experience depends on your entire technology stack. You need to quickly understand what's causing a customer complaint or issue. Did the problem come from your infrastructure, your application, or the browsers that ultimately render it? Is it the result of a problematic internet provider, a problem in your own data center with failing CPU or memory, or something else? Tip This doc gives you detailed information about why our browser monitoring solution matters to your business. But if you want to skip ahead, just sign up for a New Relic account. (It's free, forever!) Then, after you install the browser monitoring agent, you can start working with your data. More than Real User Monitoring (RUM) Many websites contain dynamic content that is loaded after the initial page has finished loading, and complex JavaScript code increases the need for error reporting. Browser monitoring in New Relic One provides a Real User Monitoring (RUM) solution that measures the speed and performance of your end users as they navigate to your site from different web browsers, devices, operating systems, and networks. With browser monitoring in New Relic One, you see actionable data about your end users' experience with your app. But browser monitoring in New Relic goes far beyond the initial page load to measure full page life cycle data. For example, our browser UI shows you: Actual performance data, such as by page view popularity and user satisfaction (Apdex) scores Perceived performance data that measures how quickly your async or dynamic visuals and interactive page contents display JavaScript error analytics, stack traces, and line-of-code visibility, to show you the end-user steps leading up to an error itself Session performance with a detailed timeline and heat map of the load and interaction events during a webpage's full life cycle AJAX requests indicating problems with timing, end points, and specific locations in the webpage Hash-based route changes in apps with single-page application (SPA) architectures These tools (and more!) help your teams optimize your end users' page load experience, eliminate bugs, and troubleshoot faster across your full stack. Examine user perceptions Real user data gives insights into actual page performance, but you also need to look into your users' perception of your site's performance. Pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser monitoring agent. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. Additional metrics include: First paint, first contentful paint, and largest contentful paint First input delay First interaction This helps you understand how users experience your site, both from visual and responsiveness standpoints. Improve interactive app performance Our single-page app (SPA) monitoring automatically tracks route changes, initial page loads, and synchronous and asynchronous activity during browser interactions. You can also use our browser agent and SPA API to monitor virtually anything that executes inside the browser. If you are a developer, SPA monitoring can help you: Create faster, more responsive, highly interactive apps. Monitor the throughput and performance that real users are experiencing. Troubleshoot and resolve problems within the context of the page load. Query and visualize the data to assist with business decisions. Bring better apps to the marketplace more quickly. Correlate front-end and back-end problems With New Relic One, you can instrument any type of data you need, such as metrics, events, logs, and traces. This helps you find actionable data about your end users' experience across the stack. For example: Type of data Comments Locations or domains Limit browser monitoring to focus on specific geographical locations or specific types of end-user activity. You can also monitor or block specific domains. Trends in interactions Use our comparative charting feature for a direct page load time comparison between real user (browser) interactions and trends appearing in Synthetic monitors. Distributed tracing Isolate latency from the web browser through back-end services with distributed tracing. The UI helps you see the connection across across a full transaction, from browser activity, to time spent in network, to back-end activity. Browser types Explore your end users' experience with your app segmented by any types of browsers they use, including: Top browsers by throughput Average page load time by platform type (mobile, desktop, and other) Selected browser type by version (for example, Chrome 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific browser type or platform, or whether the problem is more widespread. Get started with browser monitoring Follow these basic steps, and you'll quickly be up and running in New Relic with browser monitoring! Review the compatibility details and basic requirements for browser monitoring. Install the browser agent. Go to [one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. View summary data from your Browser summary page, then drill down into page load timing details and other UI data. Configure your alerts for key performance data, or use our Applied Intelligence solutions to reduce alert noise, correlate incidents, and automatically detect anomalies. Query and visualize your default data (or customize your own), then analyze what that data says about your business. Customize and share your own charts and dashboards.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.37738,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>browser</em> <em>monitoring</em>",
        "sections": "<em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " 31, 32, 33, etc.) This helps you quickly determine whether problems with page load timing may be related to a specific <em>browser</em> type or platform, or whether the problem is more widespread. <em>Get</em> <em>started</em> with <em>browser</em> <em>monitoring</em> Follow these basic steps, and you&#x27;ll quickly be up and running in New Relic"
      },
      "id": "604429a9e7b9d2bde7579a04"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "APIs for data ingest",
        "NerdGraph (GraphQL)",
        "REST API",
        "APIs by feature",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-12-25T04:32:43Z",
      "updated_at": "2021-12-19T15:29:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Send data to New Relic. Retrieve data from New Relic. View and configure settings. This document provides examples and reference information for our APIs. APIs for data ingest Our four primary data ingest APIs are some of the many solutions for reporting data to New Relic. These APIs can be used directly, but they're also the underlying ingest route for any of our tools that use those APIs (for example, our OpenTelemetry integration, or our Telemetry SDKs). API type Description Metric API Send dimensional metrics to New Relic from any source (including other telemetry monitoring services). Event API Send custom event data to New Relic without the use of an agent or integration. Log API Send log data to New Relic. Trace API Send distributed tracing data (also referred to as \"spans\") to New Relic without the use of an agent or integration. NerdGraph (GraphQL) NerdGraph is the API we recommend for querying New Relic data, querying account information, and making a range of feature configurations. To learn what you can do, check out the NerdGraph tutorials. NerdGraph is our newest API and is our attempt to bring together in one place some of our older APIs, like our REST API. Note that there is still some functionality you can do with REST APIs that can't yet be done with NerdGraph, and this is why some New Relic organizations still use the REST API. REST API Our REST API is our older API for querying and configuration, which NerdGraph is in the process of replacing. The REST API has some configuration abilities that NerdGraph doesn't yet have, but when possible you should use NerdGraph. The REST API can be used for a wide range of features: for detail, see APIs by feature. APIs by feature New Relic tools and features, like APM, infrastructure monitoring, browser monitoring, and alerts, are often used together, and sometimes can overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The browser API resources include: Resource Details Browser agent API Use the browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To query New Relic data, use NerdGraph. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To query New Relic data, use NerdGraph. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To query New Relic data, use NerdGraph. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To query New Relic data, use NerdGraph. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage (original pricing model) For organizations on our original pricing model, you can use NerdGraph to query subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API If you're a New Relic partnership organization, you can use the Partner API to retrieve data and make configurations. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing models that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API Our Insights Query API is mostly deprecated. Instead, use NerdGraph for querying your New Relic data. Dashboard API Use the Dashboards API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.50931,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Browser</em> <em>monitoring</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " The <em>browser</em> API resources include: Resource Details <em>Browser</em> agent API Use the <em>browser</em> agent API for tasks such as: Report custom end user data to <em>browser</em> <em>monitoring</em>. <em>Monitor</em> asynchronous <em>browser</em> activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/browser/new-relic-browser/guides/guide-using-browser-spa-apis": [
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.270615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> performance of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side performance Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    },
    {
      "sections": [
        "AJAX call fails with a CORS redirect error message",
        "Problem",
        "Solution",
        "Cause"
      ],
      "title": "AJAX call fails with a CORS redirect error message",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "a4e478428acefb454ab8969cccb666d03ae458f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/ajax-call-fails-cors-redirect-error-message/",
      "published_at": "2021-12-25T02:06:12Z",
      "updated_at": "2021-11-13T07:04:35Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem A redirected AJAX call is being rejected with a CORS error message, for example: Access to XMLHttpRequest at 'https://my-domain-2/path' (redirected from 'https://my-domain-1/path') from origin 'https://my-website-domain' has been blocked by CORS policy: Request header field x-newrelic-id is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The browser agent automatically adds custom headers to outgoing same-origin AJAX calls in order to support the Distributed Tracing feature. When the server that receives the AJAX call responds with a redirect status code (such as 302), the browser will automatically make the same AJAX call to the redirected URL. And if this new URL is on a different origin and the call does not pass the CORS preflight, the browser will fail the call with the error message listed above.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.58794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " is not allowed by Access-Control-Allow-Headers in preflight response. Copy Solution To resolve this error, update your code to make the AJAX call to the new URL provided by the redirect. For more information, see the MDN article CORS request external redirect not allowed. Cause The <em>browser</em> agent"
      },
      "id": "603eb41ce7b9d2ce042a07db"
    },
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.58773,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "Problem You are not seeing AJAX data for your <em>browser</em> app. Solution If your application is instrumented with <em>browser</em> <em>monitoring</em> and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest"
      },
      "id": "603e902d196a6762dea83d8a"
    }
  ],
  "/docs/browser/new-relic-browser/installation/disable-browser-monitoring": [
    {
      "sections": [
        "Install the browser monitoring agent",
        "Enable browser monitoring",
        "Deployment options",
        "Enable an APM-monitored app",
        "Enable with copy/paste",
        "Instrument webpages using the APM agent",
        "Use REST API",
        "Browser agent types: Lite, Pro, Pro+SPA"
      ],
      "title": "Install the browser monitoring agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "bc45bbc86cd4d8b81367ad0904907ddc735717f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-11-13T06:04:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser uses a JavaScript snippet, also referred to as an \"agent,\" to instrument your app's webpages. The JavaScript collects data for browser monitoring. To install the browser agent, you can choose from a number of deployment options. If you don't have one already, create a New Relic account. It's free, forever. Get an account Enable browser monitoring Browser Pro+SPA is the default agent when you enable browser monitoring. This automatically gives you access to all of our browser monitoring features. For more information about the browser monitoring options, see Browser agent types in this document. To enable browser monitoring: Go to one.newrelic.com, select Browser, and then select Add more data. Follow the instructions in the UI to add browser monitoring to your app. Generate some traffic for your app, then wait a few minutes for data to appear in New Relic. Optional: After installation is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the browser agent type. It may take several minutes after enabling the browser monitoring agent before your webpage data appear in New Relic. If have problems, follow our troubleshooting tips. Deployment options No matter which option you use to deploy browser monitoring, the end result is the same: the browser monitoring JavaScript snippet (also referred to as the \"agent\") is inserted into your app pages. The method you select depends on your preferences and business needs. Enable an APM-monitored app When enabling browser monitoring, you can use an APM agent to automatically inject the browser monitoring JavaScript snippet for you. This is the easiest way to install the agent for an app that's already being monitored by APM. APM-monitored apps are listed on your APM Applications index. Enable with copy/paste When enabling browser monitoring, you can manually insert the JavaScript snippet into your app's webpages. The copy/paste option gives you control over the exact placement of our JavaScript snippet, which is required to monitor the webpage's performance. This is useful for: Standalone apps, static sites, and cached pages delivered by CDN APM apps that are not as closely coupled to the browser app as with a standard server-side app (for example, when your client-side app talks to a REST API back end) Some tips for using the JavaScript snippet: Placement in your webpage: Copy the code snippet, then paste it inline into your pages as close to the top of the <head> element as possible, but after any position-sensitive <meta> tags (for example, X-UA-Compatible or charset information). For more information on the inline head placement, see JavaScript placement requirements. License key and app ID: Near the bottom of the generated JavaScript is your browser license key and application ID. This is useful with the REST API and API Explorer. Instrument webpages using the APM agent This information applies to apps that are also monitored by APM. Our APM agents can instrument webpages with the required JavaScript for page load timing. If you are using an APM agent's API to manually add the JavaScript snippet to your webpages, insert the instrumentation snippet as close to the top as possible. This allows you to take advantage of detailed information about browser's AJAX calls and JavaScript errors. For more information, see the instructions for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby Use REST API This information applies to apps that are also monitored by APM. The REST API lets you manage deployment outside the browser monitoring UI. This is useful for large organizations deploying multiple apps. Browser agent types: Lite, Pro, Pro+SPA We have three types of browser agents: Lite, Pro, and Pro+SPA. The agent type has no impact on your billing. Browser agent type Comparison Pro+SPA This is the default installed agent when you enable browser monitoring. What it includes: Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications. Pro+SPA is not limited only to single page applications. After install, you can downgrade anytime to the less advanced agents if you don't want or need SPA monitoring. Pro What it includes: Gives you access to the Browser Pro features. What it doesn't include: Lacks the functionality designed for single page app monitoring. Lite What it includes: Gives you information about some basic page load timing and browser user information. What it doesn't include: Lacks the Browser Pro features and SPA features. Details about how agent types relate to pricing: New Relic One pricing: This pricing model has data ingest as a billing factor. If you want to reduce data ingest, you may want to consider downgrading to lesser agent types after install. Original pricing: Your access to browser monitoring features is gated by your subscription plan, not by the agent type. This means there is no reason not to use the default Pro+SPA agent. After initial agent installation is finished, you can go to the App settings page to edit your configuration or to change your subscription.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.98596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>browser</em> <em>monitoring</em> agent",
        "sections": "<em>Install</em> the <em>browser</em> <em>monitoring</em> agent",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>installation</em> is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the <em>browser</em> agent type. It may take several minutes after enabling the <em>browser</em> <em>monitoring</em> agent before your webpage data appear in New Relic. If have problems, follow our"
      },
      "id": "604429e628ccbcb80b2c60d0"
    },
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.268875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": ": function (t){var e=new p(t);try{u.emit(&quot;new-xhr&quot;... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting <em>browser</em> <em>monitoring</em> <em>installation</em>. If you see a different response, you may"
      },
      "id": "603e902d196a6762dea83d8a"
    },
    {
      "sections": [
        "Update the browser agent",
        "Check your version number",
        "Check deployment method",
        "Update your APM-managed installation",
        "Update your copy/paste installation",
        "Caution",
        "Retrieve the snippet from the UI",
        "Extract the snippet with the REST API",
        "Update using the loader endpoint"
      ],
      "title": "Update the browser agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "88c27eeabc364683eae41935bd6a1b178cae36ed",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/installation/update-browser-agent/",
      "published_at": "2021-12-25T06:20:32Z",
      "updated_at": "2021-07-21T20:02:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Running the latest version of our browser agent ensures you can access all browser features and enhancements. To update to the latest version, check your version number, then follow the steps for either updating an APM-managed installation or upgrading a copy/paste installation. Check your version number To verify your browser version number: View the source code of a page which includes the JavaScript snippet. Search the page source for js-agent.newrelic.com/nr-. The numbers that follow nr- are your current version. For example, js-agent.newrelic.com/nr-593.min.js indicates you are running version 593 of the browser script. There are different agent types. The Pro+SPA agent has the format js-agent.newrelic.com/nr-spa-1184.min.js To verify the latest version of the browser script loader: Go to js-agent.newrelic.com/nr-loader-full-current.min.js . Search for js-agent.newrelic.com/nr-, then note the numbers that follow nr-. If the latest version number is higher than the number of the version you are currently running, update your browser agent. Check deployment method Your browser agent may have been deployed in two ways: either using a manual implementation (copying and pasting the snippet) or automatically instrumented using an APM agent. To check which deployment method was used, run this command in the JavaScript console: > newrelic.info.sa Copy If the command returns 1, then your browser agent used the copy/paste method. Update your APM-managed installation To update your APM-managed browser installation, restart your APM agent. Your app will automatically update to the latest JavaScript snippet. To ensure the new script registers, you may need to clear your cache. For more information, follow the troubleshooting procedures to manually check and clear the cache. Update your copy/paste installation Use any of the following options to access the browser JavaScript snippet needed to update a copy/paste installation. After accessing the snippet, be sure to replace all of your existing snippet with the new version. If you have a standalone installation with a few applications, you can retrieve the snippet from the UI, and then replace it with the new version. If you have many applications, you can use the REST API or the loader endpoint to automate the update process. Caution Do not simply change the version number in the existing snippet. This can result in incomplete data collection. For best results after you use any of the following options, always update the agent. Retrieve the snippet from the UI Download the latest version of the snippet: Go to one.newrelic.com > Browser > (select an app) > Application settings. This option is only available for standalone installations. Extract the snippet with the REST API To update the snippet using the New Relic REST API, follow the process for viewing a specific browser app. The loader_script attribute in your response will include the latest JavaScript snippet. This may be a good solution if you have many applications to manage, or if your browser app is linked to an APM app. Update using the loader endpoint To update the snippet from the New Relic loader endpoint, you can choose which type of browser agent you want: Pro+SPA endpoint Pro endpoint Lite endpoint These endpoints always point to the latest version of the agent. We recommend using the Pro+SPA agent. Read more about these agent types. These loader endpoints are generic and do not include your specific configuration data. To add your configuration data to the loaders: Find your browser application ID and license key: Follow standard procedures to use the New Relic UI or the REST API. Set your browser application ID and license key immediately after the snippet. NREUM.info = { applicationID: \"YOUR-APPLICATION-ID\", licenseKey: \"YOUR-BROWSER-LICENSE-KEY\" }; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.8309,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>browser</em> agent",
        "sections": "Update your APM-managed <em>installation</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "Running the latest version of our <em>browser</em> agent ensures you can access all <em>browser</em> features and enhancements. To update to the latest version, check your version number, then follow the steps for either updating an APM-managed <em>installation</em> or upgrading a copy&#x2F;paste <em>installation</em>. Check your version"
      },
      "id": "603ec40c64441f245f4e8879"
    }
  ],
  "/docs/browser/new-relic-browser/installation/update-browser-agent": [
    {
      "sections": [
        "Install the browser monitoring agent",
        "Enable browser monitoring",
        "Deployment options",
        "Enable an APM-monitored app",
        "Enable with copy/paste",
        "Instrument webpages using the APM agent",
        "Use REST API",
        "Browser agent types: Lite, Pro, Pro+SPA"
      ],
      "title": "Install the browser monitoring agent",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "bc45bbc86cd4d8b81367ad0904907ddc735717f3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/",
      "published_at": "2021-12-25T15:10:10Z",
      "updated_at": "2021-11-13T06:04:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser uses a JavaScript snippet, also referred to as an \"agent,\" to instrument your app's webpages. The JavaScript collects data for browser monitoring. To install the browser agent, you can choose from a number of deployment options. If you don't have one already, create a New Relic account. It's free, forever. Get an account Enable browser monitoring Browser Pro+SPA is the default agent when you enable browser monitoring. This automatically gives you access to all of our browser monitoring features. For more information about the browser monitoring options, see Browser agent types in this document. To enable browser monitoring: Go to one.newrelic.com, select Browser, and then select Add more data. Follow the instructions in the UI to add browser monitoring to your app. Generate some traffic for your app, then wait a few minutes for data to appear in New Relic. Optional: After installation is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the browser agent type. It may take several minutes after enabling the browser monitoring agent before your webpage data appear in New Relic. If have problems, follow our troubleshooting tips. Deployment options No matter which option you use to deploy browser monitoring, the end result is the same: the browser monitoring JavaScript snippet (also referred to as the \"agent\") is inserted into your app pages. The method you select depends on your preferences and business needs. Enable an APM-monitored app When enabling browser monitoring, you can use an APM agent to automatically inject the browser monitoring JavaScript snippet for you. This is the easiest way to install the agent for an app that's already being monitored by APM. APM-monitored apps are listed on your APM Applications index. Enable with copy/paste When enabling browser monitoring, you can manually insert the JavaScript snippet into your app's webpages. The copy/paste option gives you control over the exact placement of our JavaScript snippet, which is required to monitor the webpage's performance. This is useful for: Standalone apps, static sites, and cached pages delivered by CDN APM apps that are not as closely coupled to the browser app as with a standard server-side app (for example, when your client-side app talks to a REST API back end) Some tips for using the JavaScript snippet: Placement in your webpage: Copy the code snippet, then paste it inline into your pages as close to the top of the <head> element as possible, but after any position-sensitive <meta> tags (for example, X-UA-Compatible or charset information). For more information on the inline head placement, see JavaScript placement requirements. License key and app ID: Near the bottom of the generated JavaScript is your browser license key and application ID. This is useful with the REST API and API Explorer. Instrument webpages using the APM agent This information applies to apps that are also monitored by APM. Our APM agents can instrument webpages with the required JavaScript for page load timing. If you are using an APM agent's API to manually add the JavaScript snippet to your webpages, insert the instrumentation snippet as close to the top as possible. This allows you to take advantage of detailed information about browser's AJAX calls and JavaScript errors. For more information, see the instructions for your APM agent: C SDK Go Java .NET Node.js PHP Python Ruby Use REST API This information applies to apps that are also monitored by APM. The REST API lets you manage deployment outside the browser monitoring UI. This is useful for large organizations deploying multiple apps. Browser agent types: Lite, Pro, Pro+SPA We have three types of browser agents: Lite, Pro, and Pro+SPA. The agent type has no impact on your billing. Browser agent type Comparison Pro+SPA This is the default installed agent when you enable browser monitoring. What it includes: Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications. Pro+SPA is not limited only to single page applications. After install, you can downgrade anytime to the less advanced agents if you don't want or need SPA monitoring. Pro What it includes: Gives you access to the Browser Pro features. What it doesn't include: Lacks the functionality designed for single page app monitoring. Lite What it includes: Gives you information about some basic page load timing and browser user information. What it doesn't include: Lacks the Browser Pro features and SPA features. Details about how agent types relate to pricing: New Relic One pricing: This pricing model has data ingest as a billing factor. If you want to reduce data ingest, you may want to consider downgrading to lesser agent types after install. Original pricing: Your access to browser monitoring features is gated by your subscription plan, not by the agent type. This means there is no reason not to use the default Pro+SPA agent. After initial agent installation is finished, you can go to the App settings page to edit your configuration or to change your subscription.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.98596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>browser</em> <em>monitoring</em> agent",
        "sections": "<em>Install</em> the <em>browser</em> <em>monitoring</em> agent",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": " <em>installation</em> is complete and you are seeing data, go to the App settings page for additional agent configuration, or to change the <em>browser</em> agent type. It may take several minutes after enabling the <em>browser</em> <em>monitoring</em> agent before your webpage data appear in New Relic. If have problems, follow our"
      },
      "id": "604429e628ccbcb80b2c60d0"
    },
    {
      "sections": [
        "Troubleshoot AJAX data collection",
        "Problem",
        "Solution",
        "1. Verify you use XMLHttpRequest.",
        "2. Verify the object is instrumented.",
        "3. Verify network access.",
        "JSONP requirements"
      ],
      "title": "Troubleshoot AJAX data collection",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Troubleshooting"
      ],
      "external_id": "8dc486fa0fbb0a07f5e93c3cf75590e3e03bba2b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/troubleshooting/troubleshoot-ajax-data-collection/",
      "published_at": "2021-12-25T02:07:46Z",
      "updated_at": "2021-11-13T07:03:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You are not seeing AJAX data for your browser app. Solution If your application is instrumented with browser monitoring and is correctly collecting data for other Pro features, follow these steps: 1. Verify you use XMLHttpRequest. Check whether your application uses the XMLHttpRequest object to make AJAX calls. Browser monitoring: Other methods (including the newer Fetch API) currently are not supported when using browser Pro. Single-page app monitoring: Fetch is supported for AJAX requests within a browser interaction with SPA monitoring. If you are making requests using JSONP, see JSONP requirements. 2. Verify the object is instrumented. If you are using XMLHttpRequest, use your browser's dev console to verify that the object has been instrumented by New Relic. Enter the object name at your console. If instrumentation has succeeded, the console should return something like: function (t){var e=new p(t);try{u.emit(\"new-xhr\"... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting browser monitoring installation. If you see a different response, you may be using another script or library that is conflicting with New Relic instrumentation. Contact support at support.newrelic.com. 3. Verify network access. If the object is properly instrumented, try triggering an AJAX call in your application while monitoring network traffic in the browser's developer tools. Wait up to one minute, and look for a call to bam.nr-data.net/jserrors with an xhr parameter. If the call fails, check for network issues. If you don't see this call, if it fails with an error not related to network access, or if it succeeds but you still aren't seeing data, get support at support.newrelic.com. If your requests use JSONP, see requirements and notes on functionality below: JSONP requirements If your requests use JSONP, these requests will not appear on the AJAX UI page. However, you can view them as assets within session traces. If using SPA monitoring, you can view them on the Breakdown tab of the Page views page. Requirements for JSONP to be recognized: Each JSONP request must use a unique callback function. Most popular libraries (like jQuery) generate a unique callback function dynamically for each request. The query string callback must be named \"callback\" or \"cb\" in order to be recognized by New Relic. This is the default behavior in most popular libraries.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.268875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": ": function (t){var e=new p(t);try{u.emit(&quot;new-xhr&quot;... Copy If instrumentation failed, you will see something like: function XMLHttpRequest() { [native_code] } Copy If you see this type of failure response, see Troubleshooting <em>browser</em> <em>monitoring</em> <em>installation</em>. If you see a different response, you may"
      },
      "id": "603e902d196a6762dea83d8a"
    },
    {
      "sections": [
        "Disable browser monitoring",
        "Disable monitoring of specific pages/URLs",
        "Deployed with selected APM agent",
        "Deployed with copy/paste method",
        "Disable domain monitoring",
        "Disable browser agent"
      ],
      "title": "Disable browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Installation"
      ],
      "external_id": "0109af1704295c643c93616540cf9667ec6438e9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/installation/disable-browser-monitoring/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-07-10T02:44:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using browser to monitor your application, you can manually disable monitoring for your app or for specific pages. Reasons for turning off browser monitoring on certain pages include: Some pages may not be relevant for monitoring. You want to monitor only specific pages. You want to remove the browser script for troubleshooting purposes. Disable monitoring of specific pages/URLs To disable browser on a specific page or URL, follow the procedures based on your deployment method: Deployed with selected APM agent If you used the APM agent to automatically insert your JavaScript snippet, you can disable injection for only those particular pages using the APM language agent's API or config file. For more information, see the instructions for your agent: Go (currently not applicable) Java .NET Node.js: This agent does not automatically insert JavaScript. To turn off monitoring on certain pages, simply remove the API calls from those pages. PHP Python Ruby Deployed with copy/paste method If you used the copy/paste deployment method and want to stop collecting data for a browser app, simply remove the browser monitoring JavaScript snippet from the pages you do not want to monitor. Disable domain monitoring To turn off monitoring for specific domains or sub-domains, update your browser domain conditions. Disable browser agent If you used the copy/paste deployment method and want to stop collecting data for a browser app, simply remove the browser JavaScript snippet from the pages you do not want to monitor. If you used the APM agent to install the browser agent, you can turn off some of the browser monitoring features individually, or you can disable browser entirely. Go to one.newrelic.com, click on Browser > (select a browser app) > Settings > Application settings. To disable only the Pro account level features, select Lite. To turn off browser monitoring completely, select Off. Select Save application settings. If applicable, restart your APM agent. When browser monitoring is off, the agent will not instrument pages with monitoring scripts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.353905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Disable <em>browser</em> <em>monitoring</em>",
        "sections": "Disable <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "If you are using <em>browser</em> to <em>monitor</em> your application, you can manually disable <em>monitoring</em> for your app or for specific pages. Reasons for turning off <em>browser</em> <em>monitoring</em> on certain pages include: Some pages may not be relevant for <em>monitoring</em>. You want to <em>monitor</em> only specific pages. You want"
      },
      "id": "6043fd4164441f8728378f17"
    }
  ],
  "/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.67673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Page load timing process",
        "Tip",
        "Page load process",
        "Page load time charts in browser monitoring",
        "Web application",
        "Network",
        "Important",
        "DOM processing",
        "Page rendering",
        "Request queuing",
        "App server requests vs. browser transactions",
        "Outliers"
      ],
      "title": "Page load timing process",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "3c1b807e4433968a69a461a95e612812ff0ff8e9",
      "image": "https://docs.newrelic.com/static/ade867510b645a97e56c905e4cf019f9/8c557/browser-page-load-timeline.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/page-load-timing-process/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-07T03:03:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains: How a web page loads How browser monitoring measures page load timing, also known as real user monitoring (RUM) Tip This is a description of traditional, synchronous page load timing. Browser can also monitor asynchronous page load timing. Page load process Here are the major steps in the loading of most web pages. The numbers 1-6 in the diagram correspond to the numbered steps below. Page load timeline: The steps involved in a web page load. Browser monitoring charts display the following segments of that process: Network, Web application, DOM processing, and Page rendering. A page load begins when a user selects a hyperlink, submits a form, or types a URL in a browser. This is also referred to as the initial request or the navigation start. The user's action sends a request across the network to the web application server. The request reaches the application for processing. (The request may take some time to start being processed. This could be the result of request queuing or it could be other factors.) The app finishes processing and sends an HTML response back across the network to the user's browser. This is sometimes referred to as response start or first byte. (Time To First Byte) The user's browser begins receiving the HTML response, and starts to process the Document Object Model, or DOM. The DOM finishes loading; this point is known as DOM ready. Using the DOM, the user's browser starts to render the page. The page finishes rendering in the user's browser and the window load event fires. (For pages that use asynchronous loading, some elements may continue to load after the window load event occurs.) Page load time charts in browser monitoring Browser monitoring captures the major page load timing segments in the browser Summary page and the Page views page. If you have SPA monitoring enabled, you will have access to both this chart and SPA-specific charts. The charts show: Network Web application time DOM processing Page rendering Other segments as applicable, such as request queuing The chart colors match the colors in the page load timing diagram. one.newrelic.com > Browser > (select an app) > Summary: The load time chart appears on the Summary and Page views page. The way browser collects these times depends on the browser's capability to use the Navigation Timing Specification API. You can add custom page load timing events with the browser agent API. Here are descriptions of the activity included in the browser load time chart segments: Web application The web application time includes the time spent on the application server. This can only be determined if the browser instrumentation for page load timing was provided by an APM agent. Network The Network layer includes time spent in redirects as well as in requesting and receiving HTML. It does not include time on the server or for static assets. Network time measurement starts from the initial click on a link. Network time includes DNS and may include more than one lookup if you have redirects on your site, TCP (including the firewall, unless you have configured request queue time monitoring), and SSL connect time. If you have configured request queue time monitoring, then the network time does not include any of the request queue time that occurs after the X-Request header. If you have not configured request queue time monitoring, then the network time does include all of the request queue time. The Navigation Timing Specification API provides a detailed breakdown of network time. (For old browsers, the timer starts on the \"before unload event.\") For apps that have been deployed using the copy/paste method, Browser includes web app and queue time in Network time. This is because browser relies on the server-side agent to pass the application values to the browser agent through auto-injection. For more information about how this back-end time breaks down from the browser's point of view, use the Session traces page. The session traces report on all the network related events available, so you can see on a case-by-case basis how the browser is spending time on DNS lookups and other network events. Important Even with request queuing configured, the front-end server's setup can still affect network time. This is because the front-end server does not add the queueing time header until after it actually accepts and processes the request. If the front-end server is configured in some way that causes requests to start backlogging and to queue up in the listener socket that the front-end server uses to accept connections, then you will see network time increase for browser monitoring. The queueing time headers can never account for backlog in this listener socket. DOM processing DOM processing is the time it takes to parse the HTML into a DOM and retrieve or execute synchronous scripts. If the browser starts to download images in this phase, page load timing will capture the image load time. The DOM processing and page rendering layers include network time for static assets (assets that are not explicitly retrieved after page load). However, if a script on the page dynamically inserts image tags and loads images after the server or content delivery system (CDN) finishes, page load timing cannot capture the image load time. Page rendering The Page rendering phase is the time between the DOM being complete and the window load event. This phase measures browser-side processing of the page content, and often includes time for scripts and static assets to load. Request queuing Request queuing will be displayed in the load time chart if your account has both browser and APM linked. In New Relic, request queuing refers to the time between a request entering your production systems and it reaching your application. Depending on the specifics of your production infrastructure, this time may include an actual queue that requests enter, or it may represent other functions that take time (such as load balancing or internal network latency). App server requests vs. browser transactions Often the number of app server transactions (requests per minute or rpm) is larger than the number of browser transactions (pages per minute or ppm) for the same application. For more information, see the troubleshooting procedures. Outliers No matter how well your application performs, there will be some slow browsers, platforms, and networks that make your overall aggregate response times appear slower. To minimize the skew caused by outliers, page load timing clamps and scales the end user response times that are greater than 4.5 times your application's browser Apdex T setting to 4.5 times the Apdex T, or to 13.5 seconds, whichever is greater. (Histogram outliers are cut off at 95%.) For example, if your application's end user Apdex T threshold is 8 seconds, those response times will be clamped at 36 seconds. This minimizes the impact of these response times on your overall application but still provides accounting for \"frustrated\" Apdex scores. For SPA monitoring, outliers are handled differently. When the duration of an initial page load or route change reaches 30 minutes, that event is treated as invalid data and is discarded.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.6307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Page</em> <em>load</em> <em>timing</em> process",
        "sections": "<em>Page</em> <em>load</em> <em>time</em> charts in <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "This document explains: How a web <em>page</em> loads How <em>browser</em> <em>monitoring</em> measures <em>page</em> <em>load</em> <em>timing</em>, also known as real user <em>monitoring</em> (RUM) Tip This is a description of traditional, synchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Browser</em> can also <em>monitor</em> asynchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Page</em> <em>load</em> process Here"
      },
      "id": "6043efdf28ccbc21ff2c60a2"
    }
  ],
  "/docs/browser/new-relic-browser/page-load-timing-resources/instrumentation-browser-monitoring": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.67671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.5867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58641,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    }
  ],
  "/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.67671,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58641,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    },
    {
      "sections": [
        "Page load timing process",
        "Tip",
        "Page load process",
        "Page load time charts in browser monitoring",
        "Web application",
        "Network",
        "Important",
        "DOM processing",
        "Page rendering",
        "Request queuing",
        "App server requests vs. browser transactions",
        "Outliers"
      ],
      "title": "Page load timing process",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "3c1b807e4433968a69a461a95e612812ff0ff8e9",
      "image": "https://docs.newrelic.com/static/ade867510b645a97e56c905e4cf019f9/8c557/browser-page-load-timeline.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/page-load-timing-process/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-07T03:03:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains: How a web page loads How browser monitoring measures page load timing, also known as real user monitoring (RUM) Tip This is a description of traditional, synchronous page load timing. Browser can also monitor asynchronous page load timing. Page load process Here are the major steps in the loading of most web pages. The numbers 1-6 in the diagram correspond to the numbered steps below. Page load timeline: The steps involved in a web page load. Browser monitoring charts display the following segments of that process: Network, Web application, DOM processing, and Page rendering. A page load begins when a user selects a hyperlink, submits a form, or types a URL in a browser. This is also referred to as the initial request or the navigation start. The user's action sends a request across the network to the web application server. The request reaches the application for processing. (The request may take some time to start being processed. This could be the result of request queuing or it could be other factors.) The app finishes processing and sends an HTML response back across the network to the user's browser. This is sometimes referred to as response start or first byte. (Time To First Byte) The user's browser begins receiving the HTML response, and starts to process the Document Object Model, or DOM. The DOM finishes loading; this point is known as DOM ready. Using the DOM, the user's browser starts to render the page. The page finishes rendering in the user's browser and the window load event fires. (For pages that use asynchronous loading, some elements may continue to load after the window load event occurs.) Page load time charts in browser monitoring Browser monitoring captures the major page load timing segments in the browser Summary page and the Page views page. If you have SPA monitoring enabled, you will have access to both this chart and SPA-specific charts. The charts show: Network Web application time DOM processing Page rendering Other segments as applicable, such as request queuing The chart colors match the colors in the page load timing diagram. one.newrelic.com > Browser > (select an app) > Summary: The load time chart appears on the Summary and Page views page. The way browser collects these times depends on the browser's capability to use the Navigation Timing Specification API. You can add custom page load timing events with the browser agent API. Here are descriptions of the activity included in the browser load time chart segments: Web application The web application time includes the time spent on the application server. This can only be determined if the browser instrumentation for page load timing was provided by an APM agent. Network The Network layer includes time spent in redirects as well as in requesting and receiving HTML. It does not include time on the server or for static assets. Network time measurement starts from the initial click on a link. Network time includes DNS and may include more than one lookup if you have redirects on your site, TCP (including the firewall, unless you have configured request queue time monitoring), and SSL connect time. If you have configured request queue time monitoring, then the network time does not include any of the request queue time that occurs after the X-Request header. If you have not configured request queue time monitoring, then the network time does include all of the request queue time. The Navigation Timing Specification API provides a detailed breakdown of network time. (For old browsers, the timer starts on the \"before unload event.\") For apps that have been deployed using the copy/paste method, Browser includes web app and queue time in Network time. This is because browser relies on the server-side agent to pass the application values to the browser agent through auto-injection. For more information about how this back-end time breaks down from the browser's point of view, use the Session traces page. The session traces report on all the network related events available, so you can see on a case-by-case basis how the browser is spending time on DNS lookups and other network events. Important Even with request queuing configured, the front-end server's setup can still affect network time. This is because the front-end server does not add the queueing time header until after it actually accepts and processes the request. If the front-end server is configured in some way that causes requests to start backlogging and to queue up in the listener socket that the front-end server uses to accept connections, then you will see network time increase for browser monitoring. The queueing time headers can never account for backlog in this listener socket. DOM processing DOM processing is the time it takes to parse the HTML into a DOM and retrieve or execute synchronous scripts. If the browser starts to download images in this phase, page load timing will capture the image load time. The DOM processing and page rendering layers include network time for static assets (assets that are not explicitly retrieved after page load). However, if a script on the page dynamically inserts image tags and loads images after the server or content delivery system (CDN) finishes, page load timing cannot capture the image load time. Page rendering The Page rendering phase is the time between the DOM being complete and the window load event. This phase measures browser-side processing of the page content, and often includes time for scripts and static assets to load. Request queuing Request queuing will be displayed in the load time chart if your account has both browser and APM linked. In New Relic, request queuing refers to the time between a request entering your production systems and it reaching your application. Depending on the specifics of your production infrastructure, this time may include an actual queue that requests enter, or it may represent other functions that take time (such as load balancing or internal network latency). App server requests vs. browser transactions Often the number of app server transactions (requests per minute or rpm) is larger than the number of browser transactions (pages per minute or ppm) for the same application. For more information, see the troubleshooting procedures. Outliers No matter how well your application performs, there will be some slow browsers, platforms, and networks that make your overall aggregate response times appear slower. To minimize the skew caused by outliers, page load timing clamps and scales the end user response times that are greater than 4.5 times your application's browser Apdex T setting to 4.5 times the Apdex T, or to 13.5 seconds, whichever is greater. (Histogram outliers are cut off at 95%.) For example, if your application's end user Apdex T threshold is 8 seconds, those response times will be clamped at 36 seconds. This minimizes the impact of these response times on your overall application but still provides accounting for \"frustrated\" Apdex scores. For SPA monitoring, outliers are handled differently. When the duration of an initial page load or route change reaches 30 minutes, that event is treated as invalid data and is discarded.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.6307,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Page</em> <em>load</em> <em>timing</em> process",
        "sections": "<em>Page</em> <em>load</em> <em>time</em> charts in <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "This document explains: How a web <em>page</em> loads How <em>browser</em> <em>monitoring</em> measures <em>page</em> <em>load</em> <em>timing</em>, also known as real user <em>monitoring</em> (RUM) Tip This is a description of traditional, synchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Browser</em> can also <em>monitor</em> asynchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Page</em> <em>load</em> process Here"
      },
      "id": "6043efdf28ccbc21ff2c60a2"
    }
  ],
  "/docs/browser/new-relic-browser/page-load-timing-resources/page-load-timing-process": [
    {
      "sections": [
        "PageViewTiming: Async or dynamic page details",
        "Why use PageViewTiming?",
        "Support for Google's Core Web Vitals",
        "Detailed visual, interactivity, and responsiveness metrics",
        "Compatibility and requirements",
        "CumulativeLayoutShift",
        "How is CLS captured in New Relic",
        "Approximating other CLS sources",
        "How CLS is aggregated",
        "Query your event data",
        "Percentile over timeseries",
        "Percentile by transaction and interaction",
        "Histogram of delay timings"
      ],
      "title": "PageViewTiming: Async or dynamic page details",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "069f311598f5df27ee46006693b077f7f8b8d146",
      "image": "https://docs.newrelic.com/static/e19694ae33f749d66a346968f23bfb5a/c1b63/core-web-vitals_0.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-11-06T19:46:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's PageViewTiming event sends each data point as a separate event as soon as it is available. Because we do not restrict the timing, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use PageViewTiming and its attributes to query data about your site, component loading, and user performance metrics, both from visual and responsiveness standpoints. Why use PageViewTiming? If your application uses asynchronous or dynamic pages, you may need additional details about site or component loading. But pages can load content in many different ways, and users control when they interact with that content. This is why some user-centric performance metrics happen outside the standard window onload (page load time) in the browser agent. For example, users may become impatient and begin clicking as soon as content is on the webpage. Or, they may wait to use the page until long after content is loaded. The PageViewTiming event provides a more real-time delivery mechanism that does not have a dependency on any other event. The additional metrics can help you understand how users experience your site, both from visual and responsiveness standpoints. Support for Google's Core Web Vitals As of agent version 1177 for browser monitoring, we have full support for Google's Core Web Vitals. It requires a Pro or above Browser agent. Note that the metrics that make up Core Web Vitals evolve over time. The current set focuses on three aspects of the user experience: loading, interactivity, and visual stability. It includes the following metrics and their respective thresholds: Core Web Vitals metrics include loading, interactivity, and visual stability. Largest Contentful Paint (LCP): measures loading performance. To provide a good user experience, LCP should occur within 2.5 seconds of when the page first starts loading. First Input Delay (FID): measures interactivity. To provide a good user experience, pages should have a FID of less than 100 milliseconds. Cumulative Layout Shift (CLS): measures visual stability. To provide a good user experience, pages should maintain a CLS of less than 0.1. For each of these metrics, to ensure you're hitting the recommended target for most of your users, a good threshold to measure is the 75th percentile of page loads, segmented across mobile and desktop devices. To learn more, watch our Nerd Days talk on perceived performance. Detailed visual, interactivity, and responsiveness metrics The BrowserInteraction and PageView events end their reporting when they receive the page window load (or window load and AJAX) timing. However, paint and interactivity metrics can happen at any time. PageViewTiming delivers these metrics as a separate event to: Account for the variability in this timing. Avoid setting an arbitrary timeout. Prevent holding BrowserInteraction and PageView events indefinitely. Additional data Comments firstPaint and firstContentfulPaint The firstPaint and firstContentfulPaint attributes already are available with BrowserInteraction and PageView events. However, they are not always reliably captured before the window onload event fires. Using PageViewTiming gives you a way to capture these metrics even if they happen after the original page load time. This gives you a better understanding of the correlation between responsiveness of that load event and the visual rendering of your content. largestContentfulPaint The largestContentfulPaint,metric is available with agent version 1163 or higher. It reports the render time of the largest content element visible in the viewport. Google's research found that looking at when the largest element was rendered was a more accurate way to measure when the main content of a page is loaded and useful. For more information about this metric, including limitations and considerations, see the w3c draft. We also report the cumulative layout shift (CLS) score attribute with LCP. This attribute is reported as cumulativeLayoutShift. Largest Contentful Paint is one of three metrics identified by Google as the Core Web Vitals. LCP values up to 2.5 secs are considered \"Good,\" between 2.5-4.0 secs are considered \"Needs Improvement,\" and above 4.0 secs are considered \"Poor.\" firstInteraction and firstInputDelay With the addition of firstInteraction and firstInputDelay, you can quickly determine the ways that your users are interacting with that visual content. These metrics tell you not only when they interacted, but what type of interaction (mousedown, pointerdown, etc.) and how long it took for them to receive a response from your site. The firstInputDelay metric lies in the middle of FirstContentfulPaint and Time to Interactive (TTI) metrics. It measures the time between when a first input can be made and when the browser's main thread is able to respond to any interactions. We also report the cumulative layout shift (CLS) score attribute at the moment of the user's first interaction. This attribute is reported as cumulativeLayoutShift. First Input Delay is one of three metrics identified by Google as the Core Web Vitals. FID values up to 100 ms are considered \"Good,\" between 100-300 ms are considered \"Needs Improvement,\" and above 300 ms are considered \"Poor.\" For a more detailed explanation, see our browser monitoring release notes. cumulativeLayoutShift Cumulative Layout Shift (CLS) is available with agent v1177 or higher. CLS is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts. A low CLS helps ensure that the page is delightful. This is one of three metrics identified by Google as the Core Web Vitals. Cumulative Layout Shift is one of three metrics identified by Google as the Core Web Vitals. CLS scores up to 0.1 are considered \"Good,\" between 0.1-0.25 are considered \"Needs Improvement,\" and above 0.25 are considered \"Poor.\" timingName You can review different types of activities with the timingName attribute, such as firstPaint, firstContentfulPaint, firstInteraction, largestContentfulPaint, pageHide and windowUnload. For example, a PageViewTiming event may have a timingName of firstPaint and a firstPaint value of .03. The event will also include all default attributes included with the standard BrowserInteraction and PageView events. elementId This is the Id, if specified, of the largestContentfulPaint element. This value will only be reported with the LCP metric. This value can be null. elementSize This is the reported size of the largestContentfulPaint element. This value will only be reported with the LCP metric. pageHide The pageHide event, available with agent v1177 or higher, is sent when the browser hides the current page in the process of presenting a different page from the session's history. For example, when the user clicks the browser's Back button, the current page receives a pageHide event before the previous page is shown. For supporting documentation and browser compatibility for the pageHide event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with pageHide. This attribute is reported as cumulativeLayoutShift. windowLoad The windowLoad event is available with agent v1177 or higher. This is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. For supporting documentation and browser compatibility for the windowLoad event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowLoad. This attribute is reported as cumulativeLayoutShift. windowUnload The windowUnload event is available with agent v1163 or higher. This is fired when a document or child resource is being unloaded. For supporting documentation and browser compatibility for the windowUnload event, see the MDN Web Docs site. We also report the cumulative layout shift (CLS) score attribute with windowUnload. This attribute is reported as cumulativeLayoutShift. Compatibility and requirements Requirements: Meets install requirements. Reporting of this event requires browser agent version 1153 or higher and a Pro or Pro+SPA agent. Follow our Browser agent release notes to find out when new metrics are released. These metrics are supported by the following browser versions. For unsupported browsers, no PageViewTiming events will be recorded. Metrics Supported browser versions cumulativeLayoutShift Chrome 79 Metric is elevated to stable; changes in metric definition will be reported in this log. Chrome 77 Metric exposed via API: Cumulative Layout Shift available via Layout Instability API firstPaint firstContentfulPaint Chrome 60 or higher for desktop and mobile (Android webview and Chrome for Android) Opera 47 or higher for desktop Opera 44 or higher for Android mobile Samsung Internet for mobile largestContentfulPaint Chrome 77 or higher for desktop and mobile firstInteraction firstInputDelay These metrics require the addEventListener browser API. This API is available in all modern browsers, including: Apple Safari Google Chrome Microsoft Internet Explorer (IE) versions 9 or higher Mozilla Firefox pageHide This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowLoad This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. windowUnload This metric is currently supported by all browsers on desktop and mobile. Compatibility matrix via MDN documentation. CumulativeLayoutShift Cumulative Layout Shift (CLS) is a metric measuring the stability of the content on a webpage. For a complete description, see web.dev/cls. How is CLS captured in New Relic Shifts in page layout as reported by the Layout Instability API are aggregated throughout the life of the page and reported as an attribute on all PageViewTiming events, representing the CLS value when that event occurred. Using this model, users can look at their CLS value at different points in the page's life; for example, CLS values up until the first-time users interact with the page or hide the page. Approximating other CLS sources Lighthouse captures CLS value only up to the time when a page is loaded, which is useful in a development or lab environment. You can approximate Lighthouse values by looking at the windowLoad PageViewTiming event. CrUX report uses values captured over the lifespan of the page, which is useful to analyze worst-case shifts in a RUM environment. You can approximate CrUX values by looking at the CLS attribute on the windowUnload PageViewTiming event. These values will not be exactly the same because of different sample sets and a difference in how values from long-lived web pages are included. The New Relic browser monitoring agent captures CLS when the page unloads, while CrUX collects and updates the metric throughout the lifespan of the page. How CLS is aggregated As of July 2021, Google has updated the way CLS values are aggregated. Browser monitoring agent versions v12xx use the method described in Evolving the CLS metric. Browser monitoring agent v12xx or higher: Layout shift values are captured in windows. Layout shifts that occurred within 1 second of each other, but no more than 5 seconds between the first and last shift, are part of the same window. A CLS score represents the sum of layout shift values from the window with the highest sum of layout shift values. Prior to Browser agent v12xx: A CLS score represents the sum of all layout shifts that occurred up until that point in the page's life. Query your event data Here are some sample queries for the event data to help you get started. Percentile over timeseries Show the 95th percentile of first paint and first contentful paint over a time series: SELECT FILTER(percentile(firstPaint, 95), where(timingName = ' firstPaint ')) as 'fp', FILTER(percentile( firstContentfulPaint , 95), where(timingName = 'firstContentfulPaint')) as 'fcp' FROM PageViewTiming TIMESERIES 1 minute SINCE 1 hour ago Copy Percentile by transaction and interaction Show the 95th percentile of first input delay over a time series, faceted by transaction name and interaction type: SELECT percentile( firstInputDelay , 95) as 'fid' FROM PageViewTiming WHERE timingName = 'firstInteraction' TIMESERIES 1 minute FACET browserTransactionName, interactionType SINCE 3 hours ago Copy Histogram of delay timings Show a histogram of first input delay timings faceted by first interaction time ranges: FROM PageViewTiming SELECT histogram( firstInputDelay , 1000, 10) SINCE 3 hours ago WHERE timingName = 'firstInteraction' FACET CASES (WHERE firstInteraction < 1, WHERE firstInteraction >= 1 AND firstInteraction < 5, WHERE firstInteraction >= 5) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 233.6767,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "sections": "<em>PageViewTiming</em>: Async or dynamic <em>page</em> details",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s <em>PageViewTiming</em> event sends each data point as a separate event as soon as it is available. Because we do not restrict the <em>timing</em>, you can receive first paint or first interaction data regardless of when it fires. This document describes why and how to use <em>PageViewTiming</em> and its"
      },
      "id": "603ea90a64441f02614e88a4"
    },
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.5867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58641,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    }
  ],
  "/docs/browser/new-relic-browser/page-load-timing-resources/pageviewtiming-async-or-dynamic-page-details": [
    {
      "sections": [
        "Navigation start time unknown",
        "Contents",
        "Network estimate",
        "Network estimate unavailable"
      ],
      "title": "Navigation start time unknown",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "e0c839e445b4309c62704afd01702e6588232b45",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/navigation-start-time-unknown/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-30T18:44:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If a browser does not use the Navigation timing API for page load timing, the browser uses a cookie to determine the navigation start time. If a user navigates from a site without page load timing to a site with page load timing (for example, to the first page on your page load timing-enabled site), special considerations for navigation start time arise. Contents Network estimate The page load timing JavaScript utility file creates a cookie with the navigation start time when a user leaves a page (by hooking an event, beforeunload, or pagehide, depending on the browser). However, when navigating away from a site without page load timing enabled, the JavaScript code will not be present, and the cookie will not be created. Then, when the user hits the first page of a site, the navigation start time cannot be determined, because there is no cookie. In this case the browser agent has all the data (queue time, app time, DOM content and rendering time) except network time. Navigation start time is required to compute network time. Rather than toss the data, the page load timing feature estimates the network time based on recently accumulated averages for your application, regionally. This way the page load timing feature provides a more accurate throughput measurement, and the rest of the data is retained. This is especially important for sites with a high bounce rate (when users visit only one page). The more visitors you have from different regions, the more accurate the network estimate will be. Network estimate unavailable If a network estimate is not available for your application and for the region where the hit originated, the page load timing process reverts to a network estimate across all reporting apps for the region. Failing that, the data is tossed. Note: For browsers that have the Navigation Timing API, this is not an issue, as the navigation start time can be determined without using a cookie.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.5867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigation start <em>time</em> unknown",
        "sections": "Navigation start <em>time</em> unknown",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "If a <em>browser</em> does not use the Navigation <em>timing</em> API for <em>page</em> <em>load</em> <em>timing</em>, the <em>browser</em> uses a cookie to determine the navigation start <em>time</em>. If a user navigates from a site without <em>page</em> <em>load</em> <em>timing</em> to a site with <em>page</em> <em>load</em> <em>timing</em> (for example, to the first <em>page</em> on your <em>page</em> <em>load</em> <em>timing</em>-enabled site"
      },
      "id": "6043ec3ae7b9d2b8d95799be"
    },
    {
      "sections": [
        "Cached pages",
        "Contents",
        "Detecting cached pages"
      ],
      "title": "Cached pages",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "abdc36d00ef805f7f51ca56c1f43a24efe9b00a5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/cached-pages/",
      "published_at": "2021-12-25T06:19:39Z",
      "updated_at": "2021-10-30T18:43:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Pages can be cached in the browser or on a server. A cached page will contain stale (previously generated) application and queue times. Contents Detecting cached pages Browser monitoring detects cached pages by comparing the total back-end time against app and queue time. When the sum of app and queue time is greater than the total back-end time, browser monitoring assumes the page was cached and aggregates the request with app and queue times as 0. Here are some additional tips for cached pages: Java: Flush the app server’s \"work\" cache. This forces the app server to recompile. .NET: Make sure your asp.net cache directory is clean by using the command flush_dotnet_temp.cmd. This forces the app server to recompile ASPs with page load timing instrumentation. Node.js: By default, Node.js does not cache pages. PHP: If you have a CDN cache your dynamic pages, make sure the cache contains the page load timing instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic browser monitoring from the user interface, and then manually instrument the webpages that you do want to be tagged.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 229.58641,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cached <em>pages</em>",
        "sections": "Cached <em>pages</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": " the <em>page</em> <em>load</em> <em>timing</em> instrumentation. Python: Restart your app. Ruby: Look at the header information for automatic vs. manual instrumentation. For example, if you want to ignore specific webpages, you must disable automatic <em>browser</em> <em>monitoring</em> from the user interface, and then manually instrument the webpages that you do want to be tagged."
      },
      "id": "6043faac28ccbc2cc52c6087"
    },
    {
      "sections": [
        "Page load timing process",
        "Tip",
        "Page load process",
        "Page load time charts in browser monitoring",
        "Web application",
        "Network",
        "Important",
        "DOM processing",
        "Page rendering",
        "Request queuing",
        "App server requests vs. browser transactions",
        "Outliers"
      ],
      "title": "Page load timing process",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Page load timing resources"
      ],
      "external_id": "3c1b807e4433968a69a461a95e612812ff0ff8e9",
      "image": "https://docs.newrelic.com/static/ade867510b645a97e56c905e4cf019f9/8c557/browser-page-load-timeline.png",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/page-load-timing-resources/page-load-timing-process/",
      "published_at": "2021-12-25T06:21:25Z",
      "updated_at": "2021-10-07T03:03:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains: How a web page loads How browser monitoring measures page load timing, also known as real user monitoring (RUM) Tip This is a description of traditional, synchronous page load timing. Browser can also monitor asynchronous page load timing. Page load process Here are the major steps in the loading of most web pages. The numbers 1-6 in the diagram correspond to the numbered steps below. Page load timeline: The steps involved in a web page load. Browser monitoring charts display the following segments of that process: Network, Web application, DOM processing, and Page rendering. A page load begins when a user selects a hyperlink, submits a form, or types a URL in a browser. This is also referred to as the initial request or the navigation start. The user's action sends a request across the network to the web application server. The request reaches the application for processing. (The request may take some time to start being processed. This could be the result of request queuing or it could be other factors.) The app finishes processing and sends an HTML response back across the network to the user's browser. This is sometimes referred to as response start or first byte. (Time To First Byte) The user's browser begins receiving the HTML response, and starts to process the Document Object Model, or DOM. The DOM finishes loading; this point is known as DOM ready. Using the DOM, the user's browser starts to render the page. The page finishes rendering in the user's browser and the window load event fires. (For pages that use asynchronous loading, some elements may continue to load after the window load event occurs.) Page load time charts in browser monitoring Browser monitoring captures the major page load timing segments in the browser Summary page and the Page views page. If you have SPA monitoring enabled, you will have access to both this chart and SPA-specific charts. The charts show: Network Web application time DOM processing Page rendering Other segments as applicable, such as request queuing The chart colors match the colors in the page load timing diagram. one.newrelic.com > Browser > (select an app) > Summary: The load time chart appears on the Summary and Page views page. The way browser collects these times depends on the browser's capability to use the Navigation Timing Specification API. You can add custom page load timing events with the browser agent API. Here are descriptions of the activity included in the browser load time chart segments: Web application The web application time includes the time spent on the application server. This can only be determined if the browser instrumentation for page load timing was provided by an APM agent. Network The Network layer includes time spent in redirects as well as in requesting and receiving HTML. It does not include time on the server or for static assets. Network time measurement starts from the initial click on a link. Network time includes DNS and may include more than one lookup if you have redirects on your site, TCP (including the firewall, unless you have configured request queue time monitoring), and SSL connect time. If you have configured request queue time monitoring, then the network time does not include any of the request queue time that occurs after the X-Request header. If you have not configured request queue time monitoring, then the network time does include all of the request queue time. The Navigation Timing Specification API provides a detailed breakdown of network time. (For old browsers, the timer starts on the \"before unload event.\") For apps that have been deployed using the copy/paste method, Browser includes web app and queue time in Network time. This is because browser relies on the server-side agent to pass the application values to the browser agent through auto-injection. For more information about how this back-end time breaks down from the browser's point of view, use the Session traces page. The session traces report on all the network related events available, so you can see on a case-by-case basis how the browser is spending time on DNS lookups and other network events. Important Even with request queuing configured, the front-end server's setup can still affect network time. This is because the front-end server does not add the queueing time header until after it actually accepts and processes the request. If the front-end server is configured in some way that causes requests to start backlogging and to queue up in the listener socket that the front-end server uses to accept connections, then you will see network time increase for browser monitoring. The queueing time headers can never account for backlog in this listener socket. DOM processing DOM processing is the time it takes to parse the HTML into a DOM and retrieve or execute synchronous scripts. If the browser starts to download images in this phase, page load timing will capture the image load time. The DOM processing and page rendering layers include network time for static assets (assets that are not explicitly retrieved after page load). However, if a script on the page dynamically inserts image tags and loads images after the server or content delivery system (CDN) finishes, page load timing cannot capture the image load time. Page rendering The Page rendering phase is the time between the DOM being complete and the window load event. This phase measures browser-side processing of the page content, and often includes time for scripts and static assets to load. Request queuing Request queuing will be displayed in the load time chart if your account has both browser and APM linked. In New Relic, request queuing refers to the time between a request entering your production systems and it reaching your application. Depending on the specifics of your production infrastructure, this time may include an actual queue that requests enter, or it may represent other functions that take time (such as load balancing or internal network latency). App server requests vs. browser transactions Often the number of app server transactions (requests per minute or rpm) is larger than the number of browser transactions (pages per minute or ppm) for the same application. For more information, see the troubleshooting procedures. Outliers No matter how well your application performs, there will be some slow browsers, platforms, and networks that make your overall aggregate response times appear slower. To minimize the skew caused by outliers, page load timing clamps and scales the end user response times that are greater than 4.5 times your application's browser Apdex T setting to 4.5 times the Apdex T, or to 13.5 seconds, whichever is greater. (Histogram outliers are cut off at 95%.) For example, if your application's end user Apdex T threshold is 8 seconds, those response times will be clamped at 36 seconds. This minimizes the impact of these response times on your overall application but still provides accounting for \"frustrated\" Apdex scores. For SPA monitoring, outliers are handled differently. When the duration of an initial page load or route change reaches 30 minutes, that event is treated as invalid data and is discarded.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.63069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Page</em> <em>load</em> <em>timing</em> process",
        "sections": "<em>Page</em> <em>load</em> <em>time</em> charts in <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Page</em> <em>load</em> <em>timing</em> <em>resources</em>",
        "body": "This document explains: How a web <em>page</em> loads How <em>browser</em> <em>monitoring</em> measures <em>page</em> <em>load</em> <em>timing</em>, also known as real user <em>monitoring</em> (RUM) Tip This is a description of traditional, synchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Browser</em> can also <em>monitor</em> asynchronous <em>page</em> <em>load</em> <em>timing</em>. <em>Page</em> <em>load</em> process Here"
      },
      "id": "6043efdf28ccbc21ff2c60a2"
    }
  ],
  "/docs/browser/new-relic-browser/performance-quality/browser-monitoring-performance-impact": [
    {
      "sections": [
        "Browser monitoring and search engine optimization",
        "Contents",
        "Efficiency of inline JavaScript",
        "Impact on SEO"
      ],
      "title": "Browser monitoring and search engine optimization",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "1f3f91b4e13af6b49f484d7ba08f338e7f4344f0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/browser-monitoring-search-engine-optimization/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-07-09T23:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring places a small \"loader\" script into the head section of each page on a monitored site. This JavaScript instrumentation has been designed to: Provide maximum visibility into front-end performance, accurately time how long it takes for pages to load in all browsers, and to report details for JavaScript errors and AJAX calls. Have minimal impact on overall page load time and search engine optimization (SEO), including search engine ranking, indexing, crawl efficiency, or other SEO-related concerns. Contents Efficiency of inline JavaScript The most effective method for browser monitoring is to include a minimal amount of JavaScript instrumentation code inline in the head of the monitored page. This code then retrieves the remainder of the necessary code after the page finishes loading. Other browser monitoring methods include JavaScript code at the end of the page body or exclusively using an external script. However, these methods can limit visibility into the end users' experience. Impact on SEO Performance testing results indicate that using browser monitoring's JavaScript has a negligible effect on page load time. In addition, it has no negative impact on how users or search engines interact with your site. Google's consistent recommendation to website owners is to build a site that is valuable to users and accessible to search engine crawlers. Google rankings favor sites that provide the most relevant information and the best user experience. Browser monitoring can help you improve user experience by identifying performance bottlenecks, including: Slow page loads Problematic JavaScript errors Long AJAX calls Identifying Javascript errors is especially helpful because Google's bots are increasingly running the JavaScript code on websites they crawl in order to access content provided by AJAX-heavy web applications. A JavaScript error that previously was only visible to human users (for example, a broken button) could affect whether the Google bots can successfully interact with your site. We understand that SEO and traffic referred by search engines are critically important to many businesses. When used effectively, browser monitoring can even increase a site's ranking in Google and other search engines by improving performance and user experience.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.45506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> <em>monitoring</em> and search engine optimization",
        "sections": "<em>Browser</em> <em>monitoring</em> and search engine optimization",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em> places a small &quot;loader&quot; script into the head section of each page on a monitored site. This JavaScript instrumentation has been designed to: Provide maximum visibility into front-end <em>performance</em>, accurately time how long it takes for pages to load in all browsers, and to report"
      },
      "id": "6043fa33196a675d7b960f85"
    },
    {
      "sections": [
        "Security for browser monitoring",
        "Reported data",
        "Page view data",
        "AJAX timing data",
        "JavaScript error data",
        "Session trace data",
        "SPA data",
        "URL query strings",
        "Visitor's IP address",
        "Browser types",
        "CDN access",
        "Important",
        "Cookies",
        "JSONP requests"
      ],
      "title": "Security for browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "99cd4023fc519082ebe94082e3a6affd1cc2344f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/security-browser-monitoring/",
      "published_at": "2021-12-25T06:23:06Z",
      "updated_at": "2021-07-09T23:05:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring provides insights into how your application or site behaves when it is loaded in a web browser. Browser only records performance data, as explained in this document. It does not record any data used or stored by the monitored application unless you explicitly configure it to do so. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Reported data Browser reports many different types of data to help you analyze your website's performance. It only reports page view data, unless you have subscribed to Pro features. You can also enable functionality for AJAX requests, JavaScript errors, and session traces. For most data types, browser transmits the data securely using HTTPS encryption. The browser agent transmits data to New Relic's collectors by using either of the domains bam.nr-data.net or bam-cell.nr-data.net. Here is a summary of the types of data reported by browser monitoring. Page view data This data is reported once per page view and consists of: Page load timing data Name of the server-side app controller that served the page, if available (obfuscated in the page and during transmission) Additional custom parameters set by the server-side app controller, if available (obfuscated in the page and during transmission) Additional custom parameters set by the browser agent API, if set prior to page load This information appears on the Page views page. For data security reasons, browser does not record or collect URL query strings. Server-side data can only be collected when the host is also instrumented by New Relic and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. AJAX timing data When enabled, browser periodically reports AJAX timing data until the user navigates away from or closes the page. (New Relic automatically filters out all AJAX requests that take longer than two minutes.) Data includes: Hostnames, ports, and paths (but not search/query parameters) of AJAX request URLs HTTP status code of responses Byte size of request message bodies Name of the server-side app controller servicing the AJAX request and server-side timing data (obfuscated in the page and during transmission), when the browser instrumentation is injected by the New Relic agent Timing data for the AJAX transaction Timing data for the AJAX callbacks This information appears on the AJAX page. JavaScript error data When enabled, browser periodically reports data about every error that occurs on the page until the user navigates away from or closes the page. This information appears on the JavaScript errors page. For each error, the data includes: Exception class of the error Error message containing arbitrary text Stack trace of the error, which may contain function names and URLs of scripts causing the error Error messages typically do not contain any confidential or sensitive information. However, it is possible for messages to be purposefully constructed with sensitive information. Before enabling JavaScript error reporting, ensure that your website does not expose any sensitive information in error messages. Session trace data When enabled, browser periodically reports data on the details of the a single page's life cycle, including user interactions, AJAX loads, and JavaScript errors, until the user navigates away from or closes the page. New Relic automatically stops recording further data after ten minutes. Data includes: Asset load timing details User interactions such as scrolling, mousing, and clicking JavaScript error timing and other JavaScript error information Triggered Javascript events Session traces are captured randomly at a fixed rate from among the monitored page views. Session trace information appears on the Session traces page. SPA data If you use browser's single-page app (SPA) monitoring, New Relic reports the following data once per page load or route change. Browser data for page views, AJAX timing, JavaScript errors, and session traces Hash fragments associated with SPA route changes Additional custom parameters added from the SPA API When SPA monitoring has been enabled, this information appears on the Page views page. Server-side data can only be collected when the host is also instrumented by New Relic, and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. URL query strings The browser agent uses the HTTP referer attribute to track page URLs. URLs can sometimes contain potentially sensitive user-entered query data (for example, a user's name). For data security reasons, browser does not record or collect URL query strings. Visitor's IP address Browser uses the visitor's IP address to enrich data for additional visitor segmentation. Details such as the ASN and geoID are mapped to browser data from the IP address. For data security reasons, browser does not retain the visitor's IP address for reporting. The IP address is obtained in the HTTP header from the request to the New Relic collector. New Relic does not retain the visitor's IP address after the attributes have been mapped. The IP address value is overwritten within 24 hours of data being collected. Browser types Browser determines the browser type from the User-Agent header and the geographical location based on the browser's IP address. New Relic does not retain the IP address, only the country and region associated with the performance data. This information appears on the selected app's Geography page. Also, details about specific browser types appear on the selected app's Browsers page. CDN access Page load timing requires access to the content delivery network (CDN), where New Relic's utility JavaScript file (nr.js) is hosted. The domain name for the file (js-agent.newrelic.com) remains static, but the number in the path (version) may change periodically. A script tag is injected by the New Relic agent (or pasted into the webpage for standalone apps) that references the JavaScript on the CDN, which is then loaded by the browser. The loaded JavaScript collects and reports the metrics dynamically to either of the domains bam.nr-data.net or bam-cell.nr-data.net. Important If your end users are behind a firewall or proxy and do not have access to the CDN or to New Relic's networks (including bam.nr-data.net and bam-cell.nr-data.net), browser monitoring will not work. Cookies Browser monitoring creates cookies in the end user's browser. If the user has cookies disabled, page load timing (sometimes referred to as real user monitoring or RUM) will not be able to track sessions properly. Also, if the user has an older browser that does not support the Navigation Timing Specification API, page load timing will not be able to track response times as accurately. New Relic's cookies generated by browser agents older than version 995 may not contain the secure attribute. This is because page load timing data transmission in versions before version 995 use HTTP when the page is HTTP, but use HTTPS when the page is HTTPS. All browser agent versions above version 995 will always use the secure flag for cookies and transmit over HTTPS. JavaScript and AJAX data may contain more sensitive information, so they are always transmitted over HTTPS. Transmission of these cookies using HTTP or access to them from JavaScript is not a significant security risk, because the cookies are not used to make security decisions or allow access to an account. They are used only to collect performance data, with any identifiable data obfuscated. For customers subject to special guidelines for cookie collection, such as those under the EU GDPR/PECR ICO Guidelines, we now provide the option to disable cookie collection for your application. Please see our browser agent v1169 release notes for more information. Important If your site uses P3P, it must be configured to allow these cookies. JSONP requests Page load timing metrics are reported to New Relic using a Script GET, also known as a JSONP request. The Script GET returns a value that is subsequently stored in a cookie and used to trigger trace capturing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.45506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Security for <em>browser</em> <em>monitoring</em>",
        "sections": "Security for <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em> provides insights into how your application or site behaves when it is loaded in a web <em>browser</em>. <em>Browser</em> only records <em>performance</em> data, as explained in this document. It does not record any data used or stored by the monitored application unless you explicitly configure it to do"
      },
      "id": "6043efdf64441f772e378f12"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27055,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> <em>performance</em> of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side <em>performance</em> Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/performance-quality/browser-monitoring-search-engine-optimization": [
    {
      "sections": [
        "Browser monitoring and performance impact",
        "Overall impact",
        "Network impact",
        "Browser agent scripts",
        "Browser agent harvests"
      ],
      "title": "Browser monitoring and performance impact",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "5504ef3846f4bcdae0ff4f58e8c745079d9a5cb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/browser-monitoring-performance-impact/",
      "published_at": "2021-12-25T06:23:54Z",
      "updated_at": "2021-11-25T14:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's JavaScript snippet introduces a nearly invisible impact on website performance and user perception of the time it takes a page to load. The JavaScript is included in a packet of webpage data that is sent anyway. In addition, it immediately begins monitoring for errors and events as the rest of the webpage executes. The negligible amount of overhead required to load the JavaScript results in a significant return of actionable data. Overall impact The JavaScript's overhead takes into consideration both the impact on the user and the impact on your systems' performance: User perception: Typically users cannot detect performance degradations on a website of less than 200ms. Browser's JavaScript adds less than 15ms in aggregated time per page load. This is split up over time, so at no point would a user be able to perceive any performance impact due to the JavaScript. Webserver and systems: Browser app monitoring occurs on the user's browser, not on the server. Processing time does not have an impact on your CPU consumption. In addition, we take additional steps to minimize any potential impact on the apps and webpages being monitored. For example, the \"loader\" script is loaded synchronously in the <HEAD> in order to ensure monitoring is enabled for the entire life cycle of the page. This script is included inline, which eliminates the need for another roundtrip network request to a content delivery network (CDN). The \"loader\" comes with the initial page load. Later in the life cycle of the page, New Relic loads an additional monitoring script asynchronously. This script should not have any perceivable effect to the user and is included in the overall overhead of less than 15ms per page. Network impact Browser monitoring also minimizes network traffic for the end user by aggregating data locally (in the client) and sending it back to New Relic on load, at periodic intervals, on unload, or when data has been collected. (During the browser session's idle periods, transmissions may not be required.) Browser agent scripts The agent consists of two scripts. The first script is inserted inline into the HTML document. The second script is downloaded from the content delivery network (js-agent.newrelic.com) when the window load event happens. Find out about browser agent types here. Script Lite Pro Pro + SPA Inline script size 8.3 KB 22 KB 27 KB Downloaded script size 27 KB 27 KB 38 KB Browser agent harvests Data type Lite Pro Pro + SPA Harvest frequency Page view metrics/events yes yes yes One call. Once the second script is downloaded, we immediately make the first harvest call, which generates page view metrics and the PageView event. This is a JSONP call to bam.nr-data.net or bam-cell.nr-data.net. PageViewTiming events yes yes yes All agent types collect PageViewTiming events. The first harvest happens 10 seconds after the agent initializes, after window load event. After that, we send additional PageViewTiming events every 30 seconds, but only if there's data to send. For information about the event types included in these harvest calls, see the PageViewTiming section of our data dictionary. JavaScriptError metrics/events no yes yes First call when agent initializes; every 60 seconds after that. These calls, sent as metrics data, happen every 60 seconds because we include the Ajax calls that the agent itself makes. This information also applies to Ajax metrics. Ajax metrics no yes yes Sent together with JavaScript errors. Ajax events no yes yes Sent together with BrowserInteraction events. These are collected immediately when an interaction finishes. We only collect interactions for the initial page load and for route changes. We also have an API for generating custom interactions. There will be a separate call for each interaction. Typically, these calls are infrequent because they depend on the user interacting with the page. This information also applies to BrowserInteraction events. Session traces no yes yes First call when agent initializes; after that, every 10 seconds if there is data to send. Session traces send the most data, but they are heavily sampled. Only about 75 page views per hour get enabled to send session trace data. The agent sends data every 10 seconds if it has enough data to send. PageAction events no yes yes First call is made when agent initializes; after that, every 30 seconds if there is data to send. BrowserInteraction events no no yes Sent immediately when an interaction finishes. There will always be at least one interaction that represents the initial page load. Additional interactions are collected only if the URL changes (representing route change). Harvest frequency details for Ajax events apply here as well.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.61493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> <em>monitoring</em> and <em>performance</em> impact",
        "sections": "<em>Browser</em> <em>monitoring</em> and <em>performance</em> impact",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s JavaScript snippet introduces a nearly invisible impact on website <em>performance</em> and user perception of the time it takes a page to load. The JavaScript is included in a packet of webpage data that is sent anyway. In addition, it immediately begins <em>monitoring</em> for errors"
      },
      "id": "603ec318196a67a757a83dd1"
    },
    {
      "sections": [
        "Security for browser monitoring",
        "Reported data",
        "Page view data",
        "AJAX timing data",
        "JavaScript error data",
        "Session trace data",
        "SPA data",
        "URL query strings",
        "Visitor's IP address",
        "Browser types",
        "CDN access",
        "Important",
        "Cookies",
        "JSONP requests"
      ],
      "title": "Security for browser monitoring",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "99cd4023fc519082ebe94082e3a6affd1cc2344f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/security-browser-monitoring/",
      "published_at": "2021-12-25T06:23:06Z",
      "updated_at": "2021-07-09T23:05:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring provides insights into how your application or site behaves when it is loaded in a web browser. Browser only records performance data, as explained in this document. It does not record any data used or stored by the monitored application unless you explicitly configure it to do so. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Reported data Browser reports many different types of data to help you analyze your website's performance. It only reports page view data, unless you have subscribed to Pro features. You can also enable functionality for AJAX requests, JavaScript errors, and session traces. For most data types, browser transmits the data securely using HTTPS encryption. The browser agent transmits data to New Relic's collectors by using either of the domains bam.nr-data.net or bam-cell.nr-data.net. Here is a summary of the types of data reported by browser monitoring. Page view data This data is reported once per page view and consists of: Page load timing data Name of the server-side app controller that served the page, if available (obfuscated in the page and during transmission) Additional custom parameters set by the server-side app controller, if available (obfuscated in the page and during transmission) Additional custom parameters set by the browser agent API, if set prior to page load This information appears on the Page views page. For data security reasons, browser does not record or collect URL query strings. Server-side data can only be collected when the host is also instrumented by New Relic and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. AJAX timing data When enabled, browser periodically reports AJAX timing data until the user navigates away from or closes the page. (New Relic automatically filters out all AJAX requests that take longer than two minutes.) Data includes: Hostnames, ports, and paths (but not search/query parameters) of AJAX request URLs HTTP status code of responses Byte size of request message bodies Name of the server-side app controller servicing the AJAX request and server-side timing data (obfuscated in the page and during transmission), when the browser instrumentation is injected by the New Relic agent Timing data for the AJAX transaction Timing data for the AJAX callbacks This information appears on the AJAX page. JavaScript error data When enabled, browser periodically reports data about every error that occurs on the page until the user navigates away from or closes the page. This information appears on the JavaScript errors page. For each error, the data includes: Exception class of the error Error message containing arbitrary text Stack trace of the error, which may contain function names and URLs of scripts causing the error Error messages typically do not contain any confidential or sensitive information. However, it is possible for messages to be purposefully constructed with sensitive information. Before enabling JavaScript error reporting, ensure that your website does not expose any sensitive information in error messages. Session trace data When enabled, browser periodically reports data on the details of the a single page's life cycle, including user interactions, AJAX loads, and JavaScript errors, until the user navigates away from or closes the page. New Relic automatically stops recording further data after ten minutes. Data includes: Asset load timing details User interactions such as scrolling, mousing, and clicking JavaScript error timing and other JavaScript error information Triggered Javascript events Session traces are captured randomly at a fixed rate from among the monitored page views. Session trace information appears on the Session traces page. SPA data If you use browser's single-page app (SPA) monitoring, New Relic reports the following data once per page load or route change. Browser data for page views, AJAX timing, JavaScript errors, and session traces Hash fragments associated with SPA route changes Additional custom parameters added from the SPA API When SPA monitoring has been enabled, this information appears on the Page views page. Server-side data can only be collected when the host is also instrumented by New Relic, and the browser monitoring instrumentation is injected by the agent. For more information about how we collect and present this data, see Instrumentation for page load timing. URL query strings The browser agent uses the HTTP referer attribute to track page URLs. URLs can sometimes contain potentially sensitive user-entered query data (for example, a user's name). For data security reasons, browser does not record or collect URL query strings. Visitor's IP address Browser uses the visitor's IP address to enrich data for additional visitor segmentation. Details such as the ASN and geoID are mapped to browser data from the IP address. For data security reasons, browser does not retain the visitor's IP address for reporting. The IP address is obtained in the HTTP header from the request to the New Relic collector. New Relic does not retain the visitor's IP address after the attributes have been mapped. The IP address value is overwritten within 24 hours of data being collected. Browser types Browser determines the browser type from the User-Agent header and the geographical location based on the browser's IP address. New Relic does not retain the IP address, only the country and region associated with the performance data. This information appears on the selected app's Geography page. Also, details about specific browser types appear on the selected app's Browsers page. CDN access Page load timing requires access to the content delivery network (CDN), where New Relic's utility JavaScript file (nr.js) is hosted. The domain name for the file (js-agent.newrelic.com) remains static, but the number in the path (version) may change periodically. A script tag is injected by the New Relic agent (or pasted into the webpage for standalone apps) that references the JavaScript on the CDN, which is then loaded by the browser. The loaded JavaScript collects and reports the metrics dynamically to either of the domains bam.nr-data.net or bam-cell.nr-data.net. Important If your end users are behind a firewall or proxy and do not have access to the CDN or to New Relic's networks (including bam.nr-data.net and bam-cell.nr-data.net), browser monitoring will not work. Cookies Browser monitoring creates cookies in the end user's browser. If the user has cookies disabled, page load timing (sometimes referred to as real user monitoring or RUM) will not be able to track sessions properly. Also, if the user has an older browser that does not support the Navigation Timing Specification API, page load timing will not be able to track response times as accurately. New Relic's cookies generated by browser agents older than version 995 may not contain the secure attribute. This is because page load timing data transmission in versions before version 995 use HTTP when the page is HTTP, but use HTTPS when the page is HTTPS. All browser agent versions above version 995 will always use the secure flag for cookies and transmit over HTTPS. JavaScript and AJAX data may contain more sensitive information, so they are always transmitted over HTTPS. Transmission of these cookies using HTTP or access to them from JavaScript is not a significant security risk, because the cookies are not used to make security decisions or allow access to an account. They are used only to collect performance data, with any identifiable data obfuscated. For customers subject to special guidelines for cookie collection, such as those under the EU GDPR/PECR ICO Guidelines, we now provide the option to disable cookie collection for your application. Please see our browser agent v1169 release notes for more information. Important If your site uses P3P, it must be configured to allow these cookies. JSONP requests Page load timing metrics are reported to New Relic using a Script GET, also known as a JSONP request. The Script GET returns a value that is subsequently stored in a cookie and used to trigger trace capturing.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.45506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Security for <em>browser</em> <em>monitoring</em>",
        "sections": "Security for <em>browser</em> <em>monitoring</em>",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em> provides insights into how your application or site behaves when it is loaded in a web <em>browser</em>. <em>Browser</em> only records <em>performance</em> data, as explained in this document. It does not record any data used or stored by the monitored application unless you explicitly configure it to do"
      },
      "id": "6043efdf64441f772e378f12"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> <em>performance</em> of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side <em>performance</em> Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ],
  "/docs/browser/new-relic-browser/performance-quality/security-browser-monitoring": [
    {
      "sections": [
        "Browser monitoring and performance impact",
        "Overall impact",
        "Network impact",
        "Browser agent scripts",
        "Browser agent harvests"
      ],
      "title": "Browser monitoring and performance impact",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "5504ef3846f4bcdae0ff4f58e8c745079d9a5cb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/browser-monitoring-performance-impact/",
      "published_at": "2021-12-25T06:23:54Z",
      "updated_at": "2021-11-25T14:03:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's JavaScript snippet introduces a nearly invisible impact on website performance and user perception of the time it takes a page to load. The JavaScript is included in a packet of webpage data that is sent anyway. In addition, it immediately begins monitoring for errors and events as the rest of the webpage executes. The negligible amount of overhead required to load the JavaScript results in a significant return of actionable data. Overall impact The JavaScript's overhead takes into consideration both the impact on the user and the impact on your systems' performance: User perception: Typically users cannot detect performance degradations on a website of less than 200ms. Browser's JavaScript adds less than 15ms in aggregated time per page load. This is split up over time, so at no point would a user be able to perceive any performance impact due to the JavaScript. Webserver and systems: Browser app monitoring occurs on the user's browser, not on the server. Processing time does not have an impact on your CPU consumption. In addition, we take additional steps to minimize any potential impact on the apps and webpages being monitored. For example, the \"loader\" script is loaded synchronously in the <HEAD> in order to ensure monitoring is enabled for the entire life cycle of the page. This script is included inline, which eliminates the need for another roundtrip network request to a content delivery network (CDN). The \"loader\" comes with the initial page load. Later in the life cycle of the page, New Relic loads an additional monitoring script asynchronously. This script should not have any perceivable effect to the user and is included in the overall overhead of less than 15ms per page. Network impact Browser monitoring also minimizes network traffic for the end user by aggregating data locally (in the client) and sending it back to New Relic on load, at periodic intervals, on unload, or when data has been collected. (During the browser session's idle periods, transmissions may not be required.) Browser agent scripts The agent consists of two scripts. The first script is inserted inline into the HTML document. The second script is downloaded from the content delivery network (js-agent.newrelic.com) when the window load event happens. Find out about browser agent types here. Script Lite Pro Pro + SPA Inline script size 8.3 KB 22 KB 27 KB Downloaded script size 27 KB 27 KB 38 KB Browser agent harvests Data type Lite Pro Pro + SPA Harvest frequency Page view metrics/events yes yes yes One call. Once the second script is downloaded, we immediately make the first harvest call, which generates page view metrics and the PageView event. This is a JSONP call to bam.nr-data.net or bam-cell.nr-data.net. PageViewTiming events yes yes yes All agent types collect PageViewTiming events. The first harvest happens 10 seconds after the agent initializes, after window load event. After that, we send additional PageViewTiming events every 30 seconds, but only if there's data to send. For information about the event types included in these harvest calls, see the PageViewTiming section of our data dictionary. JavaScriptError metrics/events no yes yes First call when agent initializes; every 60 seconds after that. These calls, sent as metrics data, happen every 60 seconds because we include the Ajax calls that the agent itself makes. This information also applies to Ajax metrics. Ajax metrics no yes yes Sent together with JavaScript errors. Ajax events no yes yes Sent together with BrowserInteraction events. These are collected immediately when an interaction finishes. We only collect interactions for the initial page load and for route changes. We also have an API for generating custom interactions. There will be a separate call for each interaction. Typically, these calls are infrequent because they depend on the user interacting with the page. This information also applies to BrowserInteraction events. Session traces no yes yes First call when agent initializes; after that, every 10 seconds if there is data to send. Session traces send the most data, but they are heavily sampled. Only about 75 page views per hour get enabled to send session trace data. The agent sends data every 10 seconds if it has enough data to send. PageAction events no yes yes First call is made when agent initializes; after that, every 30 seconds if there is data to send. BrowserInteraction events no no yes Sent immediately when an interaction finishes. There will always be at least one interaction that represents the initial page load. Additional interactions are collected only if the URL changes (representing route change). Harvest frequency details for Ajax events apply here as well.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.61493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> <em>monitoring</em> and <em>performance</em> impact",
        "sections": "<em>Browser</em> <em>monitoring</em> and <em>performance</em> impact",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s JavaScript snippet introduces a nearly invisible impact on website <em>performance</em> and user perception of the time it takes a page to load. The JavaScript is included in a packet of webpage data that is sent anyway. In addition, it immediately begins <em>monitoring</em> for errors"
      },
      "id": "603ec318196a67a757a83dd1"
    },
    {
      "sections": [
        "Browser monitoring and search engine optimization",
        "Contents",
        "Efficiency of inline JavaScript",
        "Impact on SEO"
      ],
      "title": "Browser monitoring and search engine optimization",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Performance quality"
      ],
      "external_id": "1f3f91b4e13af6b49f484d7ba08f338e7f4344f0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/browser/new-relic-browser/performance-quality/browser-monitoring-search-engine-optimization/",
      "published_at": "2021-12-25T06:22:18Z",
      "updated_at": "2021-07-09T23:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring places a small \"loader\" script into the head section of each page on a monitored site. This JavaScript instrumentation has been designed to: Provide maximum visibility into front-end performance, accurately time how long it takes for pages to load in all browsers, and to report details for JavaScript errors and AJAX calls. Have minimal impact on overall page load time and search engine optimization (SEO), including search engine ranking, indexing, crawl efficiency, or other SEO-related concerns. Contents Efficiency of inline JavaScript The most effective method for browser monitoring is to include a minimal amount of JavaScript instrumentation code inline in the head of the monitored page. This code then retrieves the remainder of the necessary code after the page finishes loading. Other browser monitoring methods include JavaScript code at the end of the page body or exclusively using an external script. However, these methods can limit visibility into the end users' experience. Impact on SEO Performance testing results indicate that using browser monitoring's JavaScript has a negligible effect on page load time. In addition, it has no negative impact on how users or search engines interact with your site. Google's consistent recommendation to website owners is to build a site that is valuable to users and accessible to search engine crawlers. Google rankings favor sites that provide the most relevant information and the best user experience. Browser monitoring can help you improve user experience by identifying performance bottlenecks, including: Slow page loads Problematic JavaScript errors Long AJAX calls Identifying Javascript errors is especially helpful because Google's bots are increasingly running the JavaScript code on websites they crawl in order to access content provided by AJAX-heavy web applications. A JavaScript error that previously was only visible to human users (for example, a broken button) could affect whether the Google bots can successfully interact with your site. We understand that SEO and traffic referred by search engines are critically important to many businesses. When used effectively, browser monitoring can even increase a site's ranking in Google and other search engines by improving performance and user experience.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.45506,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> <em>monitoring</em> and search engine optimization",
        "sections": "<em>Browser</em> <em>monitoring</em> and search engine optimization",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em> places a small &quot;loader&quot; script into the head section of each page on a monitored site. This JavaScript instrumentation has been designed to: Provide maximum visibility into front-end <em>performance</em>, accurately time how long it takes for pages to load in all browsers, and to report"
      },
      "id": "6043fa33196a675d7b960f85"
    },
    {
      "sections": [
        "Browser Summary page",
        "View the Summary page",
        "Core Web Vitals widgets",
        "User time on the site",
        "Initial page load and route change chart",
        "User-centric page load times chart",
        "Throughput chart",
        "Tip",
        "Front end vs. back end chart",
        "First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL",
        "Related Entities widget",
        "View Synthetics monitors"
      ],
      "title": "Browser Summary page",
      "type": "docs",
      "tags": [
        "Browser",
        "Browser monitoring",
        "Getting started"
      ],
      "external_id": "a69bb31a3bff73ef8badce5ce435da62e9e7b644",
      "image": "https://docs.newrelic.com/static/e61bbb246d462250e94c99bf637b9cca/c1b63/browser_summary_page.png",
      "url": "https://docs.newrelic.com/docs/browser/browser-monitoring/getting-started/browser-summary-page/",
      "published_at": "2021-12-25T02:04:29Z",
      "updated_at": "2021-12-10T02:30:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Browser monitoring's Summary page summarizes the real-user browser performance of your app. Use the Summary page to: View trends in an app's browser-side performance Quickly troubleshoot page load timing issues Navigate to other browser UI pages View the Summary page To view a summary of browser performance for an app: Go to one.newrelic.com > Explorer > Browser applications. Use the Explorer to access all your entities, that is, anything we can identify that reports data, from applications and hosts to custom groupings of any elements. Alternatively, go to one.newrelic.com, click Browser, and select an app from the Browser index. From the app's Summary page, use standard New Relic page functions to drill down into detailed information. one.newrelic.com > Browser > (select an app) > Summary: After you select an application from the browser apps index, the Summary page shows a summary of browser performance for that app. The Summary page includes: Core Web Vitals widgets User time on the site Initial page load and route change chart User-centric page load times chart Throughput chart Front end vs. back end chart First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL Related Entities widget View Synthetics monitors Core Web Vitals widgets The Core Web Vitals widgets show how your browser performs according to Google's Core Web Vitals. The Core Web Vitals widgets include: LCP - Largest Contentful Paint FID - First Input Delay CLS - Cumulative Layout Shift User time on the site The User time on the site widget shows the time a user remains on the site. Initial page load and route change chart The Initial page load and route change chart shows the load time of a traditional URL change stemming from a load or reload of a URL. This chart appears with more detail about the page load timing process on the page load time page. User-centric page load times chart The User-centric page load times chart shows the load time of a page for a user. This chart appears with more detail about the page load timing process on the page load time page. Throughput chart The Throughput chart displays browser throughput as pages per minute (ppm). The value in the upper right of the chart is the average value for the selected time range. If you have enabled SPA monitoring enabled and the Summary page shows the SPA load time chart, the Throughput chart will also use SPA data. Tip App server requests per minute (rpm) may show a different measurement than the browser page load timing's pages per minute (ppm). Front end vs. back end chart The Front end vs. back end chart links to the connect APM service application. For details on APM and tracing, see Language agents and distributed tracing. First interaction by device type, First interaction by user agent, JavaScript errors, and Longest first input delay by URL You'll also see summary versions of these metrics from the page load time page and JavaScript errors page: First interaction by device type First interaction by user agent JavaScript errors Longest first input delay by URL Related Entities widget The Related Entities widget shows all the entities that are related to the browser. To understand more about connections between entities, read about Entity relationships. View Synthetics monitors The button directs you to the Synthetics page. To read more about Synthetics, see Synthetic monitoring.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.27054,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Browser</em> Summary page",
        "sections": "<em>Browser</em> Summary page",
        "tags": "<em>Browser</em> <em>monitoring</em>",
        "body": "<em>Browser</em> <em>monitoring</em>&#x27;s Summary page summarizes the real-user <em>browser</em> <em>performance</em> of your app. Use the Summary page to: View trends in an app&#x27;s <em>browser</em>-side <em>performance</em> Quickly troubleshoot page load timing issues Navigate to other <em>browser</em> UI pages View the Summary page To view a summary of <em>browser</em>"
      },
      "id": "60440d9c196a674ac8960f5b"
    }
  ]
}